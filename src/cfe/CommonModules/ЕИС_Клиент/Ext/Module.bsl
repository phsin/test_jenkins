Функция ИнициализацияКомпоненты(ПараметрыОрганизации) Экспорт
	
	Компонента = Новый COMОбъект("eisCom.MyEisCom");
	Опции = Компонента.GetOptions();
	Опции.LogsDir = ПараметрыОрганизации["КаталогЛогов"];
	Токен = ПараметрыОрганизации["Токен"];
	Опции.Token = Токен;
	Отпечаток = ПараметрыОрганизации["СертификатОтпечаток"];
	Опции.ClientCertificateThumbprint = Отпечаток;
	
	Статус = Компонента.Init(Опции);
		
	Возврат Компонента;
		
КонецФункции

Функция СохранитьПакет(Компонента, ДанныеПакета) Экспорт
	
	Если Не ТипЗнч(ДанныеПакета) = Тип("Структура") Тогда
		Возврат "";	
	КонецЕсли;
	
	ЕИС_Защита.ИнициализироватьПакет(ДанныеПакета);
	
	ИмяФайла1				 = ДанныеПакета.ИмяФайла1; 
	ИмяФайла2				 = ДанныеПакета.ИмяФайлаПрил;  
	guid_Пакета				 = ДанныеПакета.guid;
	НомерПоставщика			 = ДанныеПакета.НомерПоставщика; 
	НомерКонтрагента		 = ДанныеПакета.НомерКонтрагента; 
	ApplicationId			 = ДанныеПакета.ApplicationId; 
	Подписать				 = ДанныеПакета.Подписать;  
	ПараметрыОрганизации	 = ДанныеПакета.ПараметрыОрганизации;  
	тзФайлыВложений			 = ДанныеПакета.тзФайлыВложений;
	
	
	метод = Компонента.GetMethod();
	//метод.BaseUrl = "http://localhost:4444/";
	метод.BaseUrl = ДанныеПакета.BaseUrl;
	метод.Service = ДанныеПакета.Service;
	метод.Action = ДанныеПакета.Action;
	
	метод.File1 = Лев(ИмяФайла1, СтрДлина(ИмяФайла1)-4);
	метод.File2 = Лев(ИмяФайла2, СтрДлина(ИмяФайла2)-4);
	Метод.CatalogFiles = ПараметрыОрганизации["КаталогЛогов"];

	ПоставщикЭтоИП=1;
	Если ПоставщикЭтоИП=1 Тогда
	    Подпись="<ИП ИННФЛ='"+ ПараметрыОрганизации["ПоставщикИНН"] +"'><ФИО>
		|<Фамилия>"+ ПараметрыОрганизации["ПодписантФамилия"] +"</Фамилия>
		|<Имя>"+ ПараметрыОрганизации["ПодписантИмя"]+"</Имя>
		|<Отчество>"+ ПараметрыОрганизации["ПодписантОтчество"] +"</Отчество></ФИО></ИП>"; //
	Иначе
		Запрос=Запрос+"
	|            <ЮЛ ИННЮЛ='"+ПараметрыОрганизации["ПоставщикИНН"]+"' 
	|НаимОрг='"+ПараметрыОрганизации["ПоставщикНаименование"] +"' Должн='ДИРЕКТОР' ИныеСвед='1'>
	|                <ФИО Фамилия='"+ ПараметрыОрганизации["ПодписантФамилия"] +"' Имя='"+ ПараметрыОрганизации["ПодписантИмя"] +"' Отчество='"+ ПараметрыОрганизации["ПодписантОтчество"] +"'/>
	|            </ЮЛ>";
	КонецЕсли;

	Вложен = "";
	Если ЗначениеЗаполнено(тзФайлыВложений) Тогда 
		
		Для каждого Стр Из тзФайлыВложений Цикл
			ФайлИД = Стр.Id;
			ФайлИмя = Стр.FileName;
			
			Вложен = Вложен + "
			|    <Вложен КонтентИд='"+ ФайлИД +"' ИмяФайл='"+ФайлИмя+"' >
			|        	<ОтносСсылка КонтентИд='"+ ФайлИД +"' ТипФХ='ЛКП' />
			|    </Вложен>";
		КонецЦикла;
		
	КонецЕсли;
	
	Если Подписать=0 Тогда
		ЗапросXML = "<?xml version=""1.0"" encoding=""windows-1251""?>"+
	                "<ФайлПакет xmlns:ns3='http://zakupki.gov.ru/eruz/ws/elacts' "+
	                "xmlns='' ВерсФорм='1.04' ВнешИд='" +ВРЕГ(guid_Пакета)+"' "+
	                "ДатаВрФормир='"+ ЕИС_Клиент.ТекущаяДатаВремяСтрока() +"' ИдОтпр='"+НомерПоставщика+"' ИдПол='"+НомерКонтрагента+"' "+
	                "ИдПрилож='"+ метод.File2 +"' "+
	                "ИдТрПакет='"+ApplicationId+"' "+
	                "ИдФайл='"+ метод.File1 +"' "+
	                "ТипПрилож='УПДПрод'><Документ><Контент>"+
					"{FILE1}"+
					"</Контент></Документ><Прилож><Контент>"+
					"{FILE2}"+
					"</Контент></Прилож>
					|"+Вложен+"
					|</ФайлПакет>";	
	Иначе
		ЗапросXML = "<?xml version=""1.0"" encoding=""windows-1251""?>"+
	                "<ФайлПакет xmlns:ns3='http://zakupki.gov.ru/eruz/ws/elacts' "+
	                "xmlns='' ВерсФорм='1.04' ВнешИд='" +ВРЕГ(guid_Пакета)+"' "+
	                "ДатаВрФормир='"+ ЕИС_Клиент.ТекущаяДатаВремяСтрока() +"' ИдОтпр='"+НомерПоставщика+"' ИдПол='"+НомерКонтрагента+"' "+
	                "ИдПрилож='"+ метод.File2 +"' "+
	                "ИдТрПакет='"+ApplicationId+"' "+
	                "ИдФайл='"+ метод.File1 +"' "+
	                "ТипПрилож='УПДПрод'><Документ><Контент>"+
					"{FILE1}"+
					"</Контент><ПодписьДокумент><Подпись>{PODPIS1}</Подпись>"+Подпись+"</ПодписьДокумент></Документ><Прилож><Контент>"+
					"{FILE2}"+
					"</Контент><ПодписьПрилож><Подпись>{PODPIS1}</Подпись>"+Подпись+"</ПодписьПрилож></Прилож>
					|"+Вложен+"
					|</ФайлПакет>";	
	КонецЕсли;
				
	ИмяФайлаПакет = Компонента.SavePacket(метод, ЗапросXML, "packet_"+ApplicationId);
	
	//Сообщить("Сформирован пакет: "+ИмяФайлаПакет);
	
	Возврат ИмяФайлаПакет;

КонецФункции

Процедура ПолучитьСписокКонтрактов(ВыбНачДата, ВыбКонДата, Организация) Экспорт
	
	ПараметрыОрганизации = ГМ_ЕИС.ПолучитьСтруктуруПараметров(Организация);
		
	РегистрационныйНомерФирмы = ПараметрыОрганизации["РегНомер"];
	КаталогЛогов = ПараметрыОрганизации["КаталогЛогов"];
	
	Если Не ЗначениеЗаполнено(РегистрационныйНомерФирмы) Тогда 
		СообщитьИнфо("В параметрах интеграции по организации " + Организация + " не указан регистрационный номер");
		Возврат;
	КонецЕсли;
		
	СообщитьИнфо("Запрос списка контрактов за период " + ВыбНачДата + " - " + ВыбКонДата);
	
	Компонента = ИнициализацияКомпоненты(ПараметрыОрганизации);
	
	метод = Компонента.GetMethod();
	метод.BaseUrl = "https://int.zakupki.gov.ru/";
	метод.Service = "eis-integration/elact/supplier-docs";
	метод.Action = "http://zakupki.gov.ru/eruz/ws/elacts/lkp-get-contract-list";
	метод.File1 = "";
	метод.File2 = "";
	Метод.CatalogFiles = КаталогЛогов;
	
	ApplicationId = Строка(Новый УникальныйИдентификатор);
		
	ЗапросXML = "<?xml version='1.0' encoding='windows-1251'?><soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:elac=""http://zakupki.gov.ru/eruz/ws/elacts"">"+
				"<soapenv:Header/>"+
				"<soapenv:Body>"+
                "<elac:lkpGetContractsListRequest>"+
                " <elac:regNum>"+ РегистрационныйНомерФирмы +"</elac:regNum>"+
                " <elac:fromDate>"+ Преобразовать_Дата_в_Строка( ВыбНачДата ) +"</elac:fromDate>"+
                "<elac:toDate>"+ Преобразовать_Дата_в_Строка( ВыбКонДата, 0) +"</elac:toDate>"+
				"</elac:lkpGetContractsListRequest></soapenv:Body></soapenv:Envelope>";	
	
	результатGUID = Компонента.SendRequestSoap(метод, ЗапросXML, ApplicationId);
	
	Сообщить(результатGUID);
	ИмяФайла = КаталогЛогов+результатGUID+"_result.xml";
	
	txt = Новый ТекстовыйДокумент;
	txt.Прочитать(ИмяФайла);
	АдресВх = ПоместитьВоВременноеХранилище(txt.ПолучитьТекст());
	
	СтатусЗапроса = ГМ_ЕИС.НайтиОшибки( АдресВх );
	
    objDom = New COMОбъект("MSXML2.DOMDocument");
    objDom.load( ИмяФайла );
	
	Если ПараметрыОрганизации["ОтладкаЗапросовXML"] Тогда
		ГМ_ЕИС.СохранитьЗапросВРегистрСведений(ПараметрыОрганизации, ЗапросXML, objDom.xml, "Загрузка списка контрактов", результатGUID, СтатусЗапроса);	
	КонецЕсли;

	contracts = objDom.selectNodes("//contractInfo");
	Новых = 0;
    НеЗагружено = 0;
	Обновлено = 0;
	
	ЗагруженныеФайлы = Новый Массив;
	
	Для i1 = 0 По contracts.length - 1 Цикл
		
		contract = contracts.item(i1);
		id = contract.selectSingleNode("id").text;
		url = contract.selectSingleNode("url").text;
		Ответ = Компонента.Get(url, id);
		
		txt = Новый ТекстовыйДокумент;
		txt.Прочитать(Ответ);
		АдресВх = ПоместитьВоВременноеХранилище(txt.ПолучитьТекст());
		
		СтруктураОтвет = Новый Структура("ИмяФайла, АдресВх", Ответ, АдресВх);
		ЗагруженныеФайлы.Добавить(СтруктураОтвет);
		
	КонецЦикла;
	
	ЕИС_Защита.ПолучитьСписокКонтрактов(ЗагруженныеФайлы, ПараметрыОрганизации);
	
КонецПроцедуры

Процедура Отправить(Компонента, ПараметрыОрганизации, ИмяФайлаПакета, guidПакета, Докум, ПолучитьОтветЕИС=1) Экспорт

	ТекстЗапроса = "";
	
	Текст = Новый ТекстовыйДокумент;
 
	Текст.Прочитать(ИмяФайлаПакета);
	Для А=1 По Текст.КоличествоСтрок() Цикл
		ТекстЗапроса = ТекстЗапроса + Текст.ПолучитьСтроку(А);	
	КонецЦикла;
	
	ПозицияНачала = Найти(ТекстЗапроса, "<ФайлПакет");
	ТекстЗапроса = Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса)-ПозицияНачала+1);
	ТекстЗапроса = "<?xml version=""1.0"" encoding=""windows-1251""?>"+
				"<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/' ><SOAP-ENV:Header/><SOAP-ENV:Body>" + ТекстЗапроса;
	ТекстЗапроса = ТекстЗапроса+"</SOAP-ENV:Body></SOAP-ENV:Envelope>";
	
	Текст = Новый ТекстовыйДокумент;
	ИмяФайлаЗапрос = Лев(ИмяФайлаПакета, СтрДлина(ИмяФайлаПакета)-4) + "_SOAP.xml";
	
	Текст.ДобавитьСтроку(ТекстЗапроса);
	Текст.Записать(ИмяФайлаЗапрос);
	Если ПараметрыОрганизации["ВыводитьПодробнуюИнформацию"] Тогда
		СообщитьИнфо(ТекущееВремяСтрока()+" Записан "+ИмяФайлаЗапрос);
	КонецЕсли;
	метод = Компонента.GetMethod();
	//метод.BaseUrl = "http://localhost:4444/";
	метод.BaseUrl = "https://int.zakupki.gov.ru/";
	метод.Service = "eis-integration/elact/supplier-upload";
	метод.Action = "receiveFile";
	
	метод.File1 = ""; 
	метод.File2 = "";
		
	результат = Компонента.SendRequestSoap(метод, ТекстЗапроса, guidПакета);
	
	ИмяФайлаОтвет = ПараметрыОрганизации["КаталогЛогов"]+результат+"_result.xml";
	
	txt = Новый ТекстовыйДокумент;
	txt.Прочитать(ИмяФайлаОтвет);
	АдресВх = ПоместитьВоВременноеХранилище(txt.ПолучитьТекст());

	ГМ_ЕИС.ЗаписатьОтвет(Докум, guidПакета, ИмяФайлаОтвет, ИмяФайлаЗапрос, АдресВх);
	Если ПараметрыОрганизации["ВыводитьПодробнуюИнформацию"] Тогда
		СообщитьИнфо(ТекущееВремяСтрока()+" Ответ записан "+guidПакета);
	КонецЕсли;
	
	Если ПолучитьОтветЕИС=1 Тогда
	    ПолучитьОтвет(Компонента, , Докум, , ПараметрыОрганизации);
	КонецЕсли;	
		
КонецПроцедуры

Процедура ОбновитьКонтракт(Контракт, ИмяфайлаОтвет, Компонента, ПараметрыОрганизации) Экспорт
		
    objDom = New COMОбъект("MSXML2.DOMDocument");
    
    objDom.load( ИмяфайлаОтвет );

	contracts = objDom.selectNodes("//contractInfo");
	
	Если contracts.length = 0 Тогда
		
		ГМ_ЕИС.КонтрактУстановитьСтатусЗакрыт(Контракт);
		
		СообщитьИнфо("Исполнение контракта ["+Контракт+"] прекращено.");
		
		Возврат;
		
	КонецЕсли;
	
	Для i1 = 0 По contracts.length - 1 Цикл
        
		contract=contracts.item(i1);
		
		id = contract.selectSingleNode("id").text;
		url = contract.selectSingleNode("url").text;
		
		Ответ = Компонента.Get(url, id);
		
		txt = Новый ТекстовыйДокумент;
		txt.Прочитать(Ответ);
		АдресВх = ПоместитьВоВременноеХранилище(txt.ПолучитьТекст());
		
		ГМ_ЕИС.ЗагрузитьКонтракт(Ответ, АдресВх, ПараметрыОрганизации);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбновитьКонтрактИзЕИС(Контракт, Компонента, ПараметрыОрганизации) Экспорт

	РеестровыйНомерКонтракта = ГМ_ЕИС.ПолучитьЗначениеРевизитаОбъекта_НаСервере(Контракт, "РеестровыйНомерКонтракта");
	РегистрационныйНомерФирмы = ПараметрыОрганизации.РегНомер;
	КаталогЛогов = ПараметрыОрганизации.КаталогЛогов;
	
	метод = Компонента.GetMethod();
	метод.BaseUrl = "https://int.zakupki.gov.ru/";
	метод.Service = "eis-integration/elact/supplier-docs";
	метод.Action = "http://zakupki.gov.ru/eruz/ws/elacts/lkp-get-contract-list";
	метод.File1 = "";
	метод.File2 = "";
	Метод.CatalogFiles = КаталогЛогов;
	
	ApplicationId = Строка(Новый УникальныйИдентификатор);
	ЗапросXML = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:elac='http://zakupki.gov.ru/eruz/ws/elacts'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <elac:lkpGetContractsListRequest>
	|         <elac:regNum>"+ РегистрационныйНомерФирмы +"</elac:regNum>
	|         <elac:contractRegNum>"+РеестровыйНомерКонтракта+"</elac:contractRegNum>
	|      </elac:lkpGetContractsListRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>";
	
	результатGUID = Компонента.SendRequestSoap(метод, ЗапросXML, ApplicationId);
	
	ИмяФайлаОтвет = КаталогЛогов+результатGUID+"_result.xml";
	
	Если ПараметрыОрганизации.ВыводитьПодробнуюИнформацию Тогда
		СообщитьИнфо(ТекущееВремяСтрока()+" Записан файл: " + ИмяФайлаОтвет);
	КонецЕсли;
	
	ОбновитьКонтракт(Контракт, ИмяФайлаОтвет, Компонента, ПараметрыОрганизации);
	
КонецПроцедуры

Процедура ОбновитьКонтрактыПоСписку(СписокКонтрактов, Компонента, ПараметрыОрганизации) Экспорт
	
	Для Каждого Контракт Из СписокКонтрактов Цикл
	
		ОбновитьКонтрактИзЕИС(Контракт, Компонента, ПараметрыОрганизации);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеПоДокументу(ВыбДок, Компонента, ПараметрыОрганизации) Экспорт
	
	еисИдДокумента = ПараметрыОрганизации.еисИдДокумента;
	Если Не ЗначениеЗаполнено(еисИдДокумента) =1 Тогда
		СообщитьИнфо("В документе "+
				ВыбДок+ " отсутствует идентификатор.", ВыбДок);
		Возврат;
	КонецЕсли;
			
	РегистрационныйНомерФирмы = ПараметрыОрганизации.РегНомер;
	КаталогЛогов = ПараметрыОрганизации.КаталогЛогов;
		
	метод = Компонента.GetMethod();
	метод.BaseUrl = "https://int.zakupki.gov.ru/";
	метод.Service = "eis-integration/elact/supplier-docs";
	метод.Action = "http://zakupki.gov.ru/eruz/ws/elacts/lkp-get-object-info";
	метод.File1 = "";
	метод.File2 = "";
	Метод.CatalogFiles = КаталогЛогов;
	
	ApplicationId = Строка(Новый УникальныйИдентификатор);

	// ON_NSCHFDOPPR
	// ON_NSCHFDOPPOK

	ЗапросXML = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:elac='http://zakupki.gov.ru/eruz/ws/elacts'>
    |<soapenv:Header/>
    |<soapenv:Body>
    |  <elac:lkpGetObjectInfoRequest>
    |     <elac:regNum>"+РегистрационныйНомерФирмы+"</elac:regNum>
    |     <elac:documentUid>" + еисИдДокумента + "</elac:documentUid>
    |     <elac:documentKind>ON_NSCHFDOPPR</elac:documentKind>
    |  </elac:lkpGetObjectInfoRequest>
    |</soapenv:Body>
	|</soapenv:Envelope>";

	результатGUID = Компонента.SendRequestSoap(метод, ЗапросXML, ApplicationId);
	
	ИмяФайлаОтвет = КаталогЛогов+результатGUID+"_result.xml";
	
	Если ПараметрыОрганизации.ВыводитьПодробнуюИнформацию Тогда
		СообщитьИнфо(ТекущееВремяСтрока()+" Записан файл: " + ИмяФайлаОтвет);
	КонецЕсли;	
	
	txt = Новый ТекстовыйДокумент;
	txt.Прочитать(ИмяФайлаОтвет);
	АдресВх = ПоместитьВоВременноеХранилище(txt.ПолучитьТекст());

	ГМ_ЕИС.ЗаписатьСтатусВДокумент(ВыбДок, АдресВх, ПараметрыОрганизации);
	
КонецПроцедуры

Процедура Пауза(ЗадержкаСекунд) Экспорт 	
	
	Если НЕ ЗначениеЗаполнено(ЗадержкаСекунд) Тогда 
		ЗадержкаСекунд = 5;
	КонецЕсли;
	СообщитьИнфо("Пауза "+ЗадержкаСекунд+" сек");
	СтрокаЗапроса = "Timeout /T " + Формат(ЗадержкаСекунд, "ЧГ=0") + " /NoBreak";
	WshShell = Новый COMОбъект("WScript.Shell"); 
	WshShell.Run(СтрокаЗапроса, 0, -1);
	
КонецПроцедуры

Функция ТекущееВремяСтрока() Экспорт 
	
	ВыбДата = ТекущаяДата();
	СтрДата = "";
	
	ВремяЧас = Час(ВыбДата);
	Если ВремяЧас < 10 Тогда
		СтрДата = СтрДата + "0" + ВремяЧас+".";
	Иначе
	    СтрДата = СтрДата + ВремяЧас+".";
	КонецЕсли;
	
	ВремяМинуты = Минута(ВыбДата);
	Если ВремяМинуты < 10 Тогда
		СтрДата = СтрДата + "0" + ВремяМинуты+".";
	Иначе
	    СтрДата = СтрДата + ВремяМинуты+".";
	КонецЕсли;
	
	ВремяСекунда = Секунда(ВыбДата);
	Если ВремяСекунда < 10 Тогда
		СтрДата = СтрДата + "0" + ВремяСекунда;
	Иначе
	    СтрДата = СтрДата + ВремяСекунда;
	КонецЕсли;

	Возврат СтрДата; 
	
КонецФункции

Функция ТекущаяДатаВремяСтрока() Экспорт
	
	ВыбДата = ТекущаяДата();
	
	стрДата = Формат(ВыбДата,"ДФ=yyyy")+"-";
	Если Месяц(ВыбДата)<10 Тогда
		стрДата=стрДата+"0"+Месяц(ВыбДата)+"-";
	Иначе
		стрДата=стрДата + Месяц(ВыбДата)+"-";
	КонецЕсли;
	
	Если День(ВыбДата)<10 Тогда
		стрДата=стрДата + "0" + День(ВыбДата);
	Иначе
		стрДата=стрДата + День(ВыбДата);
	КонецЕсли;
	
	
	ВремяСтрока = Формат(ВыбДата, "ДЛФ=T");
	ВремяСтруктура = РазложитьСтрокуВМассивПодстрок(ВремяСтрока, ":", Истина);
	ч = Число(ВремяСтруктура[0]);
	м = Число(ВремяСтруктура[1]);
	с = Число(ВремяСтруктура[2]);
	
	Если ч<10 Тогда 
		стрДата=стрДата+"T0"+ч;
	Иначе
		стрДата=стрДата+"T"+ч;
	КонецЕсли;
	Если м<10 Тогда 
		стрДата=стрДата+":0"+м;
	Иначе
		стрДата=стрДата+":"+м;
	КонецЕсли;
	Если с<10 Тогда 
		стрДата=стрДата+":0"+с;
	Иначе
		стрДата=стрДата+":"+с;
	КонецЕсли;
	
	стрДата=стрДата+".000+03:00";
	
	Возврат стрДата;
	
КонецФункции

Функция СтрокаВДатаВремя( ДатаВремяСтрока ) Экспорт
	
	Результат = Дата(1,1,1);
	Если НЕ ЗначениеЗаполнено( ДатаВремяСтрока ) Тогда 
		Возврат Результат;
	КонецЕсли;
	
	год = Лев(ДатаВремяСтрока,4 );
	мес = Сред(ДатаВремяСтрока,6,2);
	день = Сред(ДатаВремяСтрока,9,2);
	Если НЕ ЗначениеЗаполнено( день ) Тогда 
		День = 1;
	КонецЕсли;
	
	Попытка 
		час = Число( Сред(ДатаВремяСтрока,12,2) );
		мин = Сред(ДатаВремяСтрока,15,2);	
		сек = 0;
		Попытка 
			смещение = Число(Сред(ДатаВремяСтрока,21,2));
		Исключение
			смещение = 0;
		КонецПопытки;
		результат = Дата(год, мес,день, (час+Смещение), мин, сек);	
	Исключение 
		Попытка 
			результат = Дата(год, мес, день);
		Исключение
			СообщитьИнфо("Некорректная дата "+ДатаВремяСтрока);
		КонецПопытки;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

Функция Преобразовать_Дата_в_Строка(ВыбДата, НачалоДня=1) Экспорт
	
	стрДата  = Формат(ВыбДата, "ДФ=yyyy-MM-ddTHH:mm:ss");

	Возврат стрДата;
	
КонецФункции

Функция ПолучитьОтвет(Компонента, ПаузаСек = "", Док, ОткрытьФормуДокумента = 0, ПараметрыОрганизации ) Экспорт
	
	//Компонента = ?(Компонента = Неопределено, ИнициализацияКомпоненты(), Компонента);
	ApplicationId = ГМ_ЕИС.ПолучитьApplicationId(Док);
	
	Если ПаузаСек="" Тогда
	    Пауза( ПараметрыОрганизации["ПаузаСек"] );
	ИначеЕсли ПаузаСек>0 Тогда 
		Пауза(ПаузаСек);
	КонецЕсли;
	
	тхт = Новый ТекстовыйДокумент;
	
	ЗапросXML = "<?xml version='1.0' encoding='windows-1251' ?>"+
	"<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'>"+
	"<soapenv:Header/>"+
	"<soapenv:Body>"+
	"<ФайлЗапросРезул ИдФайл='?' СистОтпр='1С8' СистПол='?' ДатаВрФормир='"+ ТекущаяДатаВремяСтрока() +"'  ВерсФорм='1.01' ВерсПрог='12.0' >"+
	"<Документ ИдТрПакет='"+ ApplicationId +"' />"+
	"</ФайлЗапросРезул>"+
	"</soapenv:Body>"+
	"</soapenv:Envelope>";
	
	тхт.ДобавитьСтроку(ЗапросXML);
	
	КаталогФайлов = ПараметрыОрганизации["КаталогЛогов"];
	ФайлЗапрос = КаталогФайлов+"requestResult_"+ApplicationId+".xml";
	
	тхт.Записать(ФайлЗапрос);

    метод = Компонента.GetMethod();
	//метод.BaseUrl = "http://localhost:4444/";
	метод.BaseUrl = "https://int.zakupki.gov.ru/";
	метод.Service = "eis-integration/elact/supplier-upload";
	метод.Action = "getProcessingResult";
	
	метод.File1 = "";
	метод.File2 = "";
	Метод.CatalogFiles = "";	
		
	результат = Компонента.SendRequestSoap(метод, ЗапросXML, ApplicationId+"#2");
	
	ИмяФайлаОтвет = ПараметрыОрганизации["КаталогЛогов"]+результат+"_result.xml";
	
	//Сообщить("Ответ записан: "+ИмяФайлаОтвет);
	txt = Новый ТекстовыйДокумент;
	txt.Прочитать(ИмяФайлаОтвет);
	АдресВх = ПоместитьВоВременноеХранилище(txt.ПолучитьТекст());

	ГМ_ЕИС.ЗаписатьОтвет(Док, ApplicationId, ИмяФайлаОтвет, ФайлЗапрос, АдресВх);
	
	//Если ОткрытьФормуДокумента = 1 Тогда
	//	ОткрытьФорму(Док);    
	//КонецЕсли;
		
КонецФункции

Функция ПолучитьОтветПоСписку(МассивДокументов, Компонента, ПараметрыОрганизации) Экспорт
	
	Для Каждого Док Из МассивДокументов Цикл
		
		ПолучитьОтвет(Компонента, 0, Док, Ложь, ПараметрыОрганизации);
			
	КонецЦикла;

КонецФункции

Процедура ПолучитьСтатусыПоСписку(МассивДокументов, Компонента, ПараметрыОрганизации) Экспорт
	
	ПараметрыОрганизации.Вставить("еисИдДокумента", "");
	
	Для Каждого Док Из МассивДокументов Цикл
		
		ПараметрыОрганизации.еисИдДокумента = ГМ_ЕИС.ПолучитьIdДокумента(Док);
		
		ПолучитьДанныеПоДокументу(Док, Компонента, ПараметрыОрганизации);
			
	КонецЦикла;

КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",	Знач ПропускатьПустыеСтроки = Неопределено)
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
 
КонецФункции

Процедура Подписать() Экспорт
	
	ЗапуститьПриложение( "https://eruz.zakupki.gov.ru/eacts/app/#/registry/mass-signing-documents" );
		
КонецПроцедуры

Процедура ОткрытьЛК() Экспорт
	
	ЗапуститьПриложение( "https://zakupki.gov.ru/auth/welcome" );
		
КонецПроцедуры

Процедура ОткрытьОтветЕИС(ТекДок) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекДок) Тогда 
		Возврат;
	КонецЕсли;
	
	ФайлОтвет = ГМ_ЕИС.ПоследнийЗапрос(ТекДок).ФайлОтвет;
	
	Если Не ЗначениеЗаполнено(ФайлОтвет) Тогда 
		СообщитьИнфо("Ответ не получен для документа "+ ТекДок);
		Возврат;
	КонецЕсли;
                         
	Попытка		
		СообщитьИнфо( "Открываем: "+ ФайлОтвет );
		ЗапуститьПриложение( ФайлОтвет );
	Исключение
		Ошибка = "Не удалось открыть файл "+ ФайлОтвет +" ";
		СообщитьИнфо(Ошибка + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ОткрытьЗапросЕИС(ТекДок) Экспорт

	Если Не ЗначениеЗаполнено(ТекДок) Тогда 
		Возврат;
	КонецЕсли;
	
	ФайлЗапрос = ГМ_ЕИС.ПоследнийЗапрос(ТекДок).ФайлЗапрос;
	
	Если Не ЗначениеЗаполнено(ФайлЗапрос) Тогда 
		СообщитьИнфо("Документ не отправлен в ЕИС");
		Возврат;
	КонецЕсли;

	Попытка
		СообщитьИнфо( "Открываем: "+ ФайлЗапрос );
		ЗапуститьПриложение( ФайлЗапрос );
	Исключение
		Ошибка = "Не удалось открыть ответ "+ ФайлЗапрос +" ";
		СообщитьИнфо(Ошибка + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура СообщитьИнфо(Знач ТекстСообщения, Знач КлючДанных = Неопределено) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.КлючДанных = КлючДанных;
	Сообщение.Сообщить();	
	
КонецПроцедуры

Функция ОтправитьФайлы(Компонента, СтрФайла, ПараметрыОрганизации) Экспорт
	
	Результат = Новый Структура("Id, Hash, FileName, Вид, Наименование");
	ЗаполнитьЗначенияСвойств(Результат, СтрФайла);
	
	СообщитьИнфо("Отправка файла: "+СтрФайла.Путь);
	Ответ = Компонента.SendFile( СтрФайла.Путь );
		
	Если ПараметрыОрганизации["ВыводитьПодробнуюИнформацию"] Тогда  				
		СообщитьИнфо("Статус = "+ Ответ.Status + " File ID = "+Ответ.Id);
		СообщитьИнфо("File hash = "+Ответ.Hash);
		СообщитьИнфо("Описание = "+Ответ.Description);
	КонецЕсли;		
	
	Если Врег(Ответ.Status) = "CREATED" Тогда
		Результат.Id = Ответ.Id;
		Результат.Hash = Ответ.Hash;
		Результат.FileName = Ответ.FileName;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьСписокКорректировок(НачалоПериода, КонецПериода, Организация) Экспорт

	ПараметрыОрганизации = ГМ_ЕИС.ПолучитьСтруктуруПараметров(Организация);
		
	РегистрационныйНомерФирмы = ПараметрыОрганизации["РегНомер"];
	КаталогЛогов = ПараметрыОрганизации["КаталогЛогов"];
	
	Если Не ЗначениеЗаполнено(РегистрационныйНомерФирмы) Тогда 
		СообщитьИнфо("В параметрах интеграции по организации " + Организация + " не указан регистрационный номер");
		Возврат;
	КонецЕсли;
		
	СообщитьИнфо("Запрос списка документов за период " + НачалоПериода + " - " + КонецПериода);
	
	Компонента = ИнициализацияКомпоненты(ПараметрыОрганизации);
	
	метод = Компонента.GetMethod();
	метод.BaseUrl = "https://int.zakupki.gov.ru/";
	метод.Service = "eis-integration/elact/supplier-docs";
	метод.Action = "http://zakupki.gov.ru/eruz/ws/elacts/lkp-get-object-list-info";
	метод.File1 = "";
	метод.File2 = "";
	Метод.CatalogFiles = КаталогЛогов;
	
	ApplicationId = Строка(Новый УникальныйИдентификатор);
		
	ЗапросXML = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:elac='http://zakupki.gov.ru/eruz/ws/elacts'>
    |<soapenv:Header/>
    |<soapenv:Body>
    |  <elac:lkpGetObjectListRequest>
    |     <elac:regNum>"+РегистрационныйНомерФирмы+"</elac:regNum>
	|     <elac:documentKind>ON_NKORSCHFDOPPR</elac:documentKind>
	|     <elac:documentKind>ON_KORSCHFDOPPR</elac:documentKind>
	|     <elac:fromDate>"+ ГМ_ЕИС.Преобразовать_Дата_в_Строка(НачалоПериода) +"</elac:fromDate>
	|	  <elac:toDate>"+ ГМ_ЕИС.Преобразовать_Дата_в_Строка(КонецПериода, 0) +"</elac:toDate>	
	|  </elac:lkpGetObjectListRequest>
    |</soapenv:Body>
	|</soapenv:Envelope>";
	
	результатGUID = Компонента.SendRequestSoap(метод, ЗапросXML, ApplicationId);
	Если Не ЗначениеЗаполнено(результатGUID) Тогда
		СообщитьИнфо("Не удалось загрузить документы. Ошибка при выполнении запроса.");
		Возврат;
	КонецЕсли;
	
	ИмяФайла = КаталогЛогов+результатGUID+"_result.xml";
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	objDom = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Body = objDom.Body;
    objectList = Body.lkpGetObjectListResponse.objectList.objectInfo;
	Если Не ТипЗнч(objectList) = Тип("СписокXDTO") Тогда
		objectList = Новый Массив;
		objectList.Вставить(Body.lkpGetObjectListResponse.objectList.objectInfo);
	КонецЕсли;
	
	Для Каждого objectInfo Из objectList Цикл
		id = objectInfo.id;
		documentKind = objectInfo.documentKind;
		ПолучитьДанныеПоКорректировке(id, documentKind, ПараметрыОрганизации, Компонента);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеПоКорректировке(id, documentKind, ПараметрыОрганизации, Компонента) 
	
	РегистрационныйНомерФирмы = ПараметрыОрганизации["РегНомер"];
	КаталогЛогов = ПараметрыОрганизации["КаталогЛогов"];

	метод = Компонента.GetMethod();
	метод.BaseUrl = "https://int.zakupki.gov.ru/";
	метод.Service = "eis-integration/elact/supplier-docs";
	метод.Action = "http://zakupki.gov.ru/eruz/ws/elacts/lkp-get-object-info";
	метод.File1 = "";
	метод.File2 = "";
	Метод.CatalogFiles = КаталогЛогов;
	
	ApplicationId = Компонента.GUID();

	ЗапросXML = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:elac='http://zakupki.gov.ru/eruz/ws/elacts'>
    |<soapenv:Header/>
    |<soapenv:Body>
    |  <elac:lkpGetObjectInfoRequest>
    |     <elac:regNum>"+РегистрационныйНомерФирмы+"</elac:regNum>
    |     <elac:documentUid>" + СокрЛП(id) + "</elac:documentUid>
    |     <elac:documentKind>" + documentKind + "</elac:documentKind>
    |  </elac:lkpGetObjectInfoRequest>
    |</soapenv:Body>
	|</soapenv:Envelope>";

	результатGUID = Компонента.SendRequestSoap(метод, ЗапросXML, ApplicationId);
	
	Если ЗначениеЗаполнено(результатGUID) Тогда
		
		ФайлССодержимым = КаталогЛогов+результатGUID+"_result.xml";
		
		Если ПараметрыОрганизации.ВыводитьПодробнуюИнформацию Тогда
			СообщитьИнфо(ТекущееВремяСтрока() + " Записан файл: " + ФайлССодержимым);
		КонецЕсли;
		
		ОбработатОтветПоДокументу(ФайлССодержимым, ПараметрыОрганизации);
	Иначе
		СообщитьИнфо("Не удалось получить данные по документу с id: " + id);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатОтветПоДокументу(ФайлОтвет, ПараметрыОрганизации)
	
	КаталогЛогов = ПараметрыОрганизации["КаталогЛогов"];

	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ФайлОтвет);
	//ЧтениеXML.УстановитьСтроку(ПолучитьИзВременногоХранилища(АдресВх));
	objDom = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Body = objDom.Body;
	objectInfo = Body.lkpGetObjectInfoResponse.objectInfo;
	ФайлПакет = Body.lkpGetObjectInfoResponse.ФайлПакет;
	Статус = ПредопределенноеЗначение("Перечисление.еисСтатусыДокументов."+objectInfo.status);
	
	РеестровыйНомерКонтракта = ФайлПакет.РеестрНомКонт;
	ДатаДокумента = СтрокаВДатаВремя(objectInfo.documentDate);
	id = objectInfo.id;
	
	ИмяФайлаКорректировки = КаталогЛогов + ФайлПакет.ИдФайл + ".xml";
	ИмяФайлаПриложения = КаталогЛогов + ФайлПакет.ИдПрилож + ".xml";
	
	КорректировкаBase64 = ФайлПакет.Документ.Контент;
	ДД = Base64Значение(КорректировкаBase64);
	СодержимоеКорректировки = ПолучитьСтрокуИзДвоичныхДанных(ДД, "windows-1251"); 
	txt = Новый ТекстовыйДокумент;
	txt.УстановитьТекст(СодержимоеКорректировки);
	txt.Записать(ИмяФайлаКорректировки, "windows-1251");
	Если ПараметрыОрганизации.ВыводитьПодробнуюИнформацию Тогда
		ГМ_ЕИС.СообщитьИнфо("Записан файл: " + ИмяФайлаКорректировки);	
	КонецЕсли;
	
	ПриложениеBase64 = ФайлПакет.Прилож.Контент;
	ДД = Base64Значение(ПриложениеBase64);
	СодержимоеПриложения = ПолучитьСтрокуИзДвоичныхДанных(ДД, "windows-1251"); 
	txt = Новый ТекстовыйДокумент;
	txt.УстановитьТекст(СодержимоеПриложения);
	txt.Записать(ИмяФайлаПриложения, "windows-1251");
	Если ПараметрыОрганизации.ВыводитьПодробнуюИнформацию Тогда
		ГМ_ЕИС.СообщитьИнфо("Записан файл: " + ИмяФайлаПриложения);	
	КонецЕсли;
	
	вхДанные = Новый Структура();
	вхДанные.Вставить("id", id);
	вхДанные.Вставить("Статус", Статус);
	вхДанные.Вставить("Дата", ДатаДокумента);
	вхДанные.Вставить("РеестровыйНомерКонтракта", РеестровыйНомерКонтракта);
	вхДанные.Вставить("ФайлXML", ФайлОтвет);
	вхДанные.Вставить("Корректировка", СодержимоеКорректировки);
	вхДанные.Вставить("Приложение", СодержимоеПриложения);
	вхДанные.Вставить("Организация", ПараметрыОрганизации.Организация);
	
	АдресВх = ПоместитьВоВременноеХранилище(вхДанные);
	ГМ_ЕИС.ЗагрузитьКорректировкуНаСервере(АдресВх, ПараметрыОрганизации);
	
КонецПроцедуры
