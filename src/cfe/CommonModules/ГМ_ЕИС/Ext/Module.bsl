Функция ПолучитьОрганизациюПоУмолчанию() Экспорт

	_Организация = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	еисНастройки.Организация КАК Организация
		|ИЗ
		|	Справочник.еисНастройки КАК еисНастройки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		_Организация =  Выборка.Организация;
	КонецЕсли;
		
	Возврат _Организация;
	
КонецФункции

// Возвращает параметры структурой
Функция ПолучитьСтруктуруПараметров(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	еисНастройки.Ссылка КАК Ссылка,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Справочник.еисНастройки КАК еисНастройки
	|ГДЕ
	|	еисНастройки.Организация = &Организация
	|	И еисНастройки.Пользователь = &ТекПользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	еисНастройки.Ссылка,
	|	2
	|ИЗ
	|	Справочник.еисНастройки КАК еисНастройки
	|ГДЕ
	|	еисНастройки.Организация = &Организация
	|	И еисНастройки.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	вт.Приоритет КАК Приоритет,
	|	вт.Ссылка КАК Ссылка
	|ИЗ
	|	вт КАК вт
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ПараметрыОрганизации = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		ВызватьИсключение "Нет сохраненных настроек по организации ["+Организация+"]";
	КонецЕсли;

	Структура = Новый Структура();      
	
	Для Каждого Реквизит Из ПараметрыОрганизации.Метаданные().Реквизиты Цикл
        Структура.Вставить(Реквизит.Имя, ПараметрыОрганизации[Реквизит.Имя]);
    КонецЦикла;     
     
    Возврат Структура;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",	Знач ПропускатьПустыеСтроки = Неопределено)
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
 
КонецФункции 

Функция Преобразовать_Дата_в_Строка(ВыбДата, НачалоДня=1) Экспорт
	
	стрДата  = Формат(ВыбДата, "ДФ=yyyy-MM-ddTHH:mm:ss");
	//стрДата = ""+ДатаГод(ВыбДата)+"-";
	//Если ДатаМесяц(ВыбДата)<10 Тогда
	//	стрДата=стрДата+"0"+ДатаМесяц(ВыбДата)+"-";
	//Иначе
	//	стрДата=стрДата + ДатаМесяц(ВыбДата)+"-";
	//КонецЕсли;
	//
	//Если ДатаЧисло(ВыбДата)<10 Тогда
	//	стрДата=стрДата + "0" + ДатаЧисло(ВыбДата);
	//Иначе
	//	стрДата=стрДата + ДатаЧисло(ВыбДата);
	//КонецЕсли;
	//
	//Если НачалоДня=1 Тогда
	//	стрДата=стрДата+"T00:00:00";
	//Иначе
	//	стрДата=стрДата+"T23:59:59";
	//КонецЕсли;

	Возврат стрДата;
	
КонецФункции

Функция СтрокаВДату(ДатаСтрока) Экспорт
	
	год = Лев(ДатаСтрока,4 );
	мес = Сред(ДатаСтрока,6,2);
	день = Сред(ДатаСтрока,9,2);
	
	Возврат Дата(год, мес, день);
	
КонецФункции

Функция Преобразовать_Дата_в_Строка_Сокращенная(ВыбДата) Экспорт
	
	стрДата = Формат(ВыбДата,"ДФ=yyyy");
	Если Месяц(ВыбДата)<10 Тогда
		стрДата=стрДата+"0"+Месяц(ВыбДата);
	Иначе
		стрДата=стрДата + Месяц(ВыбДата);
	КонецЕсли;
	
	Если День(ВыбДата)<10 Тогда
		стрДата=стрДата + "0" + День(ВыбДата);
	Иначе
		стрДата=стрДата + День(ВыбДата);
	КонецЕсли;
	
	Возврат стрДата;
	
КонецФункции

Функция ТекущееВремяСтрока() Экспорт 
	
	ВыбДата = ТекущаяДата();
	СтрДата = "";
	
	ВремяЧас = Час(ВыбДата);
	Если ВремяЧас < 10 Тогда
		СтрДата = СтрДата + "0" + ВремяЧас+".";
	Иначе
	    СтрДата = СтрДата + ВремяЧас+".";
	КонецЕсли;
	
	ВремяМинуты = Минута(ВыбДата);
	Если ВремяМинуты < 10 Тогда
		СтрДата = СтрДата + "0" + ВремяМинуты+".";
	Иначе
	    СтрДата = СтрДата + ВремяМинуты+".";
	КонецЕсли;
	
	ВремяСекунда = Секунда(ВыбДата);
	Если ВремяСекунда < 10 Тогда
		СтрДата = СтрДата + "0" + ВремяСекунда;
	Иначе
	    СтрДата = СтрДата + ВремяСекунда;
	КонецЕсли;

	Возврат СтрДата; 
	
КонецФункции

Функция ТекущаяДатаВремяСтрока() Экспорт
	
	ВыбДата = ТекущаяДата();
	
	стрДата = Формат(ВыбДата,"ДФ=yyyy")+"-";
	Если Месяц(ВыбДата)<10 Тогда
		стрДата=стрДата+"0"+Месяц(ВыбДата)+"-";
	Иначе
		стрДата=стрДата + Месяц(ВыбДата)+"-";
	КонецЕсли;
	
	Если День(ВыбДата)<10 Тогда
		стрДата=стрДата + "0" + День(ВыбДата);
	Иначе
		стрДата=стрДата + День(ВыбДата);
	КонецЕсли;
	
	
	ВремяСтрока = Формат(ВыбДата, "ДЛФ=T");
	ВремяСтруктура = РазложитьСтрокуВМассивПодстрок(ВремяСтрока, ":", Истина);
	ч = Число(ВремяСтруктура[0]);
	м = Число(ВремяСтруктура[1]);
	с = Число(ВремяСтруктура[2]);
	
	Если ч<10 Тогда 
		стрДата=стрДата+"T0"+ч;
	Иначе
		стрДата=стрДата+"T"+ч;
	КонецЕсли;
	Если м<10 Тогда 
		стрДата=стрДата+":0"+м;
	Иначе
		стрДата=стрДата+":"+м;
	КонецЕсли;
	Если с<10 Тогда 
		стрДата=стрДата+":0"+с;
	Иначе
		стрДата=стрДата+":"+с;
	КонецЕсли;
	
	стрДата=стрДата+".000+03:00";
	
	Возврат стрДата;
	
КонецФункции

Процедура СообщитьИнфо(
		Знач ТекстСообщения,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт

	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Поле = "";
	
	ЭтоОбъект = Ложь;
	
#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
КонецПроцедуры

Функция НайтиОшибки( АдресВх, Ошибки = "", ИдДокЕИС = "" ) Экспорт 
	
	ЧтениеXML = Новый ЧтениеXML();
	//ЧтениеXML.ОткрытьФайл(ФайлОтвет);
	ЧтениеXML.УстановитьСтроку(ПолучитьИзВременногоХранилища(АдресВх));
	objDom = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Body = objDom.Body;
	
	Если ЕстьРеквизитИлиСвойствоОбъекта(Body, "ФайлРезул") Тогда
		
		ФайлРезул = Body.ФайлРезул;
		Если ЕстьРеквизитИлиСвойствоОбъекта(ФайлРезул, "Документ") Тогда
			Документ = ФайлРезул.Документ;
			
			Если ЕстьРеквизитИлиСвойствоОбъекта(Документ, "УспешОбр") Тогда
				ИдДокЕИС = Документ.УспешОбр.ИдДокЕИС;
				СообщитьИнфо("Документ успешно загружен: ИдДокЕИС = "+ИдДокЕИС);
				СтатусЗапроса = Перечисления.еисСтатусЗапроса.ОбработанУспешно;
				Возврат СтатусЗапроса;
			КонецЕсли;
			
			Если ЕстьРеквизитИлиСвойствоОбъекта(Документ, "Процесс") Тогда
				СтатусЗапроса = Перечисления.еисСтатусЗапроса.Обрабатывается;
				Возврат СтатусЗапроса;
			КонецЕсли;
			
			Если ЕстьРеквизитИлиСвойствоОбъекта(Документ, "ОшибкиПр") Тогда
				
				ОшибкиXDTO = Документ.ОшибкиПр.ОшибкаПр;
				Если ТипЗнч(ОшибкиXDTO) <> Тип("СписокXDTO") Тогда 
					СписокОшибок = Новый Массив;
					СписокОшибок.Добавить(ОшибкиXDTO);
				Иначе
					СписокОшибок = ОшибкиXDTO;
				КонецЕсли;
				
				Для Каждого Ошибка Из СписокОшибок Цикл
					Ошибки = Ошибки + ?(ЗначениеЗаполнено(Ошибки), "; ", "") + Ошибка.Опис;
					СообщитьИнфо("Ошибка [" + Ошибка.Наим + "] : " + Ошибка.Опис);		
				КонецЦикла;
				
				СтатусЗапроса = Перечисления.еисСтатусЗапроса.ОбработанСОшибками;
				Возврат СтатусЗапроса;
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ЕстьРеквизитИлиСвойствоОбъекта(Body, "lkpGetContractsListResponse") Тогда
		lkpGetContractsListResponse = Body.lkpGetContractsListResponse;
		Если ЕстьРеквизитИлиСвойствоОбъекта(lkpGetContractsListResponse, "errorInfo") Тогда
			
			СообщитьИнфо(lkpGetContractsListResponse.errorInfo.message);
			СтатусЗапроса = Перечисления.еисСтатусЗапроса.ОбработанСОшибками;
			Возврат СтатусЗапроса;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ЗаменитьСпецСимволы(Стр) Экспорт
    Рез = СокрЛП(Стр);
	Рез = СтрЗаменить(Рез,"&" ,"&amp;" );
	Рез = СтрЗаменить(Рез,"""","&#34;");
	Рез = СтрЗаменить(Рез,"<" ,"&lt;"  );
	Рез = СтрЗаменить(Рез,">" ,"&gt;"  );
	Рез = СтрЗаменить(Рез,"'" ,"&#039;");
	Рез = СтрЗаменить(Рез,"№" ,"&#8470;");
	//Рез = СтрЗаменить(Рез,"/" ,"//");
	Возврат Рез;
КонецФункции

Функция ФорматнаяСтрокаЧиселКВыгрузке()

	Возврат "ЧРД=.; ЧН=0; ЧГ=0";	

КонецФункции

//Функция СтатусЗапроса( xdto, ДокСсылка=Неопределено, Параметры=Неопределено ) Экспорт
//	
//	Если xdto = Неопределено Тогда 
//		Возврат "";
//	КонецЕсли;
//	
//	ВсеОшибки="";
//	Ответ = Ложь;
//	Попытка
//		response = xdto.Body.Последовательность().ПолучитьЗначение(0);
//		
//		Если ТипЗнч(response.application.errors.error)=Тип("СписокXDTO") Тогда 		
//			errorsList = response.application.errors.error;
//			КолвоОшибок = response.application.errors.error.Количество();
//		Иначе
//			КолвоОшибок = 1;
//			errorsList = Новый Массив;
//			errorsList.Добавить(response.application.errors.error);
//		КонецЕсли;
//		
//		Для каждого errorItem ИЗ errorsList Цикл		
//			
//			ТекстОшибки = errorItem.Последовательность().ПолучитьТекст(0);
//			кодОшибки = errorItem.code;
//			Попытка 
//				НомерСтроки = " в строке "+errorItem.qualifier;
//			Исключение
//				НомерСтроки = "";
//			КонецПопытки;
//			
//			Ответ = Истина;
//			СтрОшибки = "ОШИБКА " + КодОшибки + НомерСтроки + " : " + ТекстОшибки + Символы.ПС;			
//			ВсеОшибки = ВсеОшибки + СтрОшибки;
//		КонецЦикла;
//	Исключение
//		Ответ = Ложь;
//	КонецПопытки;
//	
//	Попытка
//		application = xdto.Body.Последовательность().ПолучитьЗначение(0).application;
//		applicationID = application.applicationID;
//		Статус = application.Status;
//		
//		Если ЗначениеЗаполнено( ДокСсылка ) Тогда
//			СообщитьИнфо(""+ДокСсылка+" статус = "+ Статус, ДокСсылка);
//		Иначе 
//			СообщитьИнфо("Ответ = "+ Статус + " applicationID = " + applicationID );
//		КонецЕсли;
//		
//	Исключение
//		applicationID="";
//		Статус = "";
//	КонецПопытки;
//	
//	МенеджерЗаписи = РегистрыСведений.кб99_Запросы.СоздатьМенеджерЗаписи();
//	МенеджерЗаписи.Период = ТекущаяДата();
//	МенеджерЗаписи.Объект = ДокСсылка;
//	МенеджерЗаписи.ApplicationID = ApplicationID;
//	МенеджерЗаписи.СтатусЗапроса = Статус;
//	//МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
//	Если ЗначениеЗаполнено( Параметры ) И Параметры["ОтладкаЗапросовXML"] Тогда 
//		Параметры.Свойство("XML_Запрос", МенеджерЗаписи.Запрос );			
//		Параметры.Свойство("XML_Ответ", МенеджерЗаписи.Ответ );
//	КонецЕсли;
//	Если НЕ ЗначениеЗаполнено( applicationID ) Тогда 
//		
//		Фабрика = Новый ФабрикаXDTO;
//		ЗаписьXML = Новый ЗаписьXML; 
//		ЗаписьXML.УстановитьСтроку(); 
//		Фабрика.ЗаписатьXML(ЗаписьXML, xdto); 
//		МенеджерЗаписи.Ошибки = ЗаписьXML.Закрыть();
//		
//	Иначе
//		МенеджерЗаписи.Ошибки = ВсеОшибки;
//	КонецЕсли;
//	МенеджерЗаписи.Записать();
//	
//	Возврат Статус;
//	
//КонецФункции
Процедура РазложитьИННКонтрагента(ЮрФизЛицо, ИНН, КПП, этоИП=0) Экспорт
	
	Если Не ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат;
	КонецЕсли;
		
	ИНН = ЮрФизЛицо.ИНН;
	
	ОдинадцатыйСимвол=Сред(ИНН,11,1);
	Если (Строка(Число(ОдинадцатыйСимвол))=ОдинадцатыйСимвол) и (ПустаяСтрока(ОдинадцатыйСимвол) = 0) Тогда // оказалось физическое лицо
		ИНН=Лев(ИНН,12);
		КПП = "";
		этоИП = 1;
	Иначе // оказалась организация	
		ИНН = ЮрФизЛицо.ИНН;
		КПП = ЮрФизЛицо.КПП;
		этоИП = 0;
	КонецЕсли;
	
КонецПроцедуры

Функция глРазложить(Знач Стр, Разделитель = ",") Экспорт
	
	СЗ = Новый СписокЗначений;
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				СЗ.Добавить(СокрЛП(Стр));
				Возврат СЗ;
			КонецЕсли;
			СЗ.Добавить(СокрЛП(Лев(Стр,Поз-1)));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				СЗ.Добавить(СокрЛП(Стр));
				Возврат СЗ;
			КонецЕсли;
			СЗ.Добавить(СокрЛП(Лев(Стр,Поз-1)));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;

КонецФункции 

Функция СтрРазделить82(Знач Строка, Разделитель) Экспорт
	
	Результат = Новый Массив;
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачПозицияПервогоЭлемента = Найти(Строка, "{");
	КонПозицияПервогоЭлемента = Найти(Строка, "}");
	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
		Результат.Добавить(СокрЛП(ПервыйЭлемент));
		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
	КонецЕсли;
	
	Пока Истина Цикл
		Позиция = Найти(Строка,Разделитель);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
		Строка = СокрЛП(Сред(Строка,Позиция + 1));
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(Строка));
	
	Возврат Результат;
	
КонецФункции

Функция глАдресСоответствуетТребованиямМНС(Адрес) Экспорт
	
	АдресСписком = глРазложить(Адрес);
	
	Если СтрЧислоСтрок(Адрес) <> 1 Тогда     // недолжно быть переводов строк
		Возврат Ложь;
	ИначеЕсли СтрЧислоВхождений(Адрес, ",") <> 9 Тогда // должно быть 9 запятых
		Возврат Ложь;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(1))  > 3  Тогда   // код страны не > 3 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(2))  > 6  Тогда   // индекс не > 6 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(3))  > 30 Тогда   // наим.региона не > 30 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(4))  > 35 Тогда   // наим.района не > 35 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(5))  > 35 Тогда   // наим.города не > 35 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(6))  > 45 Тогда   // наим.нас.пункта не > 45 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(7))  > 45 Тогда   // наим.улицы не > 45 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(8))  > 10  Тогда   // номер дома не > 10 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(9))  > 10  Тогда   // номер корпуса не > 10 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(10)) > 10  Тогда   // номер квартиры не > 10 символов
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция АдресXML( ФактАдрес, ПараметрыОрганизации ) Экспорт
	
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	//ОбъектВыполнения = ПроверитьПереопределениеФункции("АдресXML");
	//Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
	//	Возврат ОбъектВыполнения.АдресXML(ФактАдрес );
	//КонецЕсли;
	//}	
	
	Если ПараметрыОрганизации["ВыгружатьАдресПоКЛАДР"] Тогда 
	
		Если НЕ глАдресСоответствуетТребованиямМНС(ФактАдрес) Тогда
		    СообщитьИнфо("Адрес ["+ФактАдрес+"] не соответствует КЛАДР");
			//Возврат 0;
		КонецЕсли;
		
		АдресСписком = глРазложить(ФактАдрес);
				
		Если АдресСписком.Получить(2)<>"" Тогда
		    Индекс	= "Индекс='"+ СокрЛП(АдресСписком.Получить(2))+"' ";
		Иначе
			Индекс = "";
		КонецЕсли;
		
		Если АдресСписком.Получить(3)<>"" Тогда 
			//КодРегиона	= "КодРегион='"+ СокрЛП(АдресСписком.Получить(3)) +"' "; 
			КодРегиона	= "КодРегион='"+ ПараметрыОрганизации["АдресПоставщикаКодРегиона"] +"' "; 
		Иначе 
			КодРегиона = "";
		КонецЕсли;
	
		//Район		     = ?(ПустаяСтрока(Точка.Район)=0, "Район='"+ СокрЛП(Точка.Район) +"' ", "");
		Если АдресСписком.Получить(4)<>"" Тогда 
			Район	= "Район='"+ СокрЛП(АдресСписком.Получить(4)) +"' "; 
		Иначе 
			Район = "";
		КонецЕсли;	
		
		//Город			 = ?(ПустаяСтрока(Точка.Город)=0, "Город='"+ СокрЛП(Точка.Город) +"' ", "");
		Если АдресСписком.Получить(5)<>"" Тогда 
			Город	= "Город='"+ СокрЛП(АдресСписком.Получить(5)) +"' "; 
		Иначе 
			Город = "";
		КонецЕсли;	
		
		//НаселенныйПункт	 = ?(ПустаяСтрока(Точка.НаселенныйПункт)=0, "НаселПункт='"+ СокрЛП(Точка.НаселенныйПункт) +"' ", "");
		Если АдресСписком.Получить(6)<>"" Тогда 
			НаселенныйПункт	= "НаселПункт='"+ СокрЛП(АдресСписком.Получить(6)) +"' "; 
		Иначе 
			НаселенныйПункт = "";
		КонецЕсли;	
	
		Попытка		
			//Улица			 = ?(ПустаяСтрока(Точка.Улица)=0, "Улица='"+ СокрЛП(Точка.Улица) +"' ", "");
			Если АдресСписком.Получить(7)<>"" Тогда 
				Улица	= "Улица='"+ СокрЛП(АдресСписком.Получить(7)) +"' "; 
			Иначе 
				Улица = "";
			КонецЕсли;	
		Исключение
			Улица = "";
		КонецПопытки;
		
		Попытка		
			//Дом				 = ?(ПустаяСтрока(Точка.Дом)=0, "Дом='"+ СокрЛП(Точка.Дом) +"' ", "");
			Если АдресСписком.Получить(8)<>"" Тогда 
				Дом	= "Дом='"+ СокрЛП(АдресСписком.Получить(8)) +"' "; 
			Иначе 
				Дом = "";
			КонецЕсли;	
		Исключение
			Дом = "";
		КонецПопытки;
		
		Попытка		
			//Корпус			 = ?(ПустаяСтрока(Точка.Корпус)=0, "Корпус='"+ СокрЛП(Точка.Корпус) +"' ", "");
			Если АдресСписком.Получить(9)<>"" Тогда 
				Корпус	= "Корпус='"+ СокрЛП(АдресСписком.Получить(9)) +"' "; 
			Иначе 
				Корпус = "";
			КонецЕсли;		
		Исключение
			Корпус = "";
		КонецПопытки;
			
		Попытка		
			//Квартира		 = ?(ПустаяСтрока(Точка.Квартира)=0, "Кварт='"+ СокрЛП(Точка.Квартира) +"' ", "");
			Если АдресСписком.Получить(10)<>"" Тогда 
				Квартира	= "Кварт='"+ СокрЛП(АдресСписком.Получить(10)) +"' "; 
			Иначе 
				Квартира = "";
			КонецЕсли;		
		Исключение
			Квартира = "";
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(КодРегиона) Тогда
			СообщитьИнфо("В адресе ["+ ФактАдрес+"] не указан код региона");
			Возврат Ложь;
		КонецЕсли;
		
		КодРегионаПоКЛАДР = СокрЛП(АдресСписком.Получить(3)) + "000000000";	
		
		АдресXML = "<АдрРФ "+ Индекс+КодРегиона+Район+Город+НаселенныйПункт+Улица+Дом+Корпус+Квартира+" />";
	Иначе
		
		АдресXML = "<АдрИнф КодСтр='643' НаимСтран='РОССИЯ' АдрТекст='"+ СокрЛП(ФактАдрес) +"'/>";	
	КонецЕсли;
	
	Возврат АдресXML;
	
КонецФункции

Функция ПолучитьXMLАдресПоставщика(АдресПоКЛАДР, ПараметрыОрганизации) Экспорт
	
	// Проверка переопределения функции в Общем модуле ЕИС_Переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьXMLАдресПоставщика");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьXMLАдресПоставщика(АдресПоКЛАДР, ПараметрыОрганизации);
	КонецЕсли;
	
	//Если ПараметрыОрганизации["ВыгружатьАдресПоКЛАДР"] Тогда
	//	АдресПоставщикаXML = "<АдрРФ Индекс='"+ ПараметрыОрганизации["АдресПоставщикаИндекс"]+
	//	"' КодРегион='"+ПараметрыОрганизации["АдресПоставщикаКодРегиона"]+
	//	"' НаимРегион='"+ПараметрыОрганизации["АдресПоставщикаНаименованиеРегиона"]+
	//	"' Город='"+ПараметрыОрганизации["АдресПоставщикаГород"]+
	//	"' Улица='"+ПараметрыОрганизации["АдресПоставщикаУлица"]+
	//	"' Дом='"+ПараметрыОрганизации["АдресПоставщикаДом"]+
	//	"' Кварт='"+ПараметрыОрганизации["АдресПоставщикаКвартира"]+"' />";	
	//Иначе
		АдресПоставщикаXML = АдресXML( АдресПоКЛАДР, ПараметрыОрганизации );
	//КонецЕсли;
	
	Возврат АдресПоставщикаXML;
	
КонецФункции

Процедура СохранитьЗапросВРегистрСведений( Параметры, Запрос, Ответ, Объект, ApplicationID, СтатусЗапроса )Экспорт
	
	МенеджерЗаписи = РегистрыСведений.еисСтатусыЗапросов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	МенеджерЗаписи.Документ = Объект;
	МенеджерЗаписи.ApplicationID = ApplicationID;
	МенеджерЗаписи.СтатусЗапроса = СтатусЗапроса;
	//МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	Если ЗначениеЗаполнено( Параметры ) И Параметры["ОтладкаЗапросовXML"] Тогда
		
		МенеджерЗаписи.ФайлЗапрос = Запрос;
		МенеджерЗаписи.ФайлОтвет = Ответ;
		
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
		
КонецПроцедуры

Функция ЗагрузитьПродукцию(product, Контракт, КонтрактXDTO) Экспорт
	
	МудульИнтеграции = ПолучитьОбщийМодульИнтеграции();
	
	guid = product.guid;
	
	СпрКонтрактныеТовары = Справочники.еисКонтрактныеТовары.НайтиПоРеквизиту("guid", guid,, Контракт);
	Если СпрКонтрактныеТовары = Справочники.еисКонтрактныеТовары.ПустаяСсылка() Тогда
		Спр = Справочники.еисКонтрактныеТовары.СоздатьЭлемент();
	Иначе
		Спр = СпрКонтрактныеТовары.ПолучитьОбъект();
	КонецЕсли;

	Попытка Спр.Наименование 	  		= product.name; Исключение КонецПопытки;
	Попытка Спр.ПолноеНаименование 		= product.name; Исключение КонецПопытки;
	Попытка Спр.Идентификатор			= product.sid;	Исключение КонецПопытки;	
	Попытка Спр.ВнешнийИдентификатор	= product.externalSid;	Исключение КонецПопытки;
	Попытка Спр.ТипОбъектаЗакупки 		= Перечисления.еисТипыОбъектовЗакупки[product.type] Исключение КонецПопытки;
	Спр.guid = guid;	
	
	Попытка
		КТРУ					= product.KTRU;
		Спр.КТРУНаименование	= КТРУ.name;
		Спр.КТРУКод				= КТРУ.code;	
	Исключение
	КонецПопытки;
	
	Попытка
		OKPD2					= product.OKPD2;
		Спр.ОКПД2Наименование	= OKPD2.name;
		Спр.ОКПД2Код			= OKPD2.code;
	Исключение
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(Спр.Номенклатура) Тогда
		Если ЗначениеЗаполнено(Спр.КТРУКод) Тогда
			еисКодТовара = Спр.КТРУКод;
		ИначеЕсли ЗначениеЗаполнено(Спр.ОКПД2Код) Тогда
			еисКодТовара = Спр.ОКПД2Код;
		КонецЕсли;
		Спр.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("еисКодТовара", еисКодТовара);
	КонецЕсли;
	
	Попытка Спр.Цена			= Число(product.price); Исключение КонецПопытки;
	Попытка Спр.Количество		= Число(product.quantity); Исключение КонецПопытки;
	
	Попытка
		СтавкаНДС = product.VATRateInfo.VATName;
	Исключение
		
		СтавкаНДС = product.VATRate;
		Если СтавкаНДС = "n" Тогда
			СтавкаНДС =  "без НДС";
		Иначе
			СтавкаНДС  = СтавкаНДС + "%";
		КонецЕсли;
		
	КонецПопытки;
	
	Если ВРЕГ(СтавкаНДС) = "БЕЗ НДС"
		ИЛИ Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДС  =  "без НДС";
	КонецЕсли;

	Попытка
		ПрУлучшХаракт = product.improvedProductReplacement;
	Исключение	
		ПрУлучшХаракт = Истина;	
	КонецПопытки;
	
	Спр.ПрУлучшХаракт = Булево(ПрУлучшХаракт);
	
	Спр.СтавкаНДС  = СтавкаНДС;	
	
	Попытка Спр.Сумма 	= Число(product.sum) Исключение КонецПопытки;
	
	кодОКЕИ = product.OKEI.code;
	Спр.ЕдиницаИзмерения = МудульИнтеграции.НайтиЕдиницуИзмерения(кодОКЕИ);
	
	Попытка
		Если ТипЗнч(product.originCountry) = Тип("СписокXDTO") Тогда
			КодСтраныПроисхождения = product.originCountry[0].countryCode;
		Иначе
			КодСтраныПроисхождения = product.originCountry.countryCode;
		КонецЕсли;
		Спр.СтранаПроисхождения = МудульИнтеграции.НайтиСтрану(КодСтраныПроисхождения);
	Исключение
	КонецПопытки;
		
	// Сведения по лекарственным препар
	Попытка
		drugInfoUsingReferenceInfo = product.drugPurchaseObjectInfo.drugInfoUsingReferenceInfo;
		MNNInfo = drugInfoUsingReferenceInfo.MNNsInfo.MNNInfo;
		positionTradeName = MNNInfo.positionsTradeName.positionTradeName;
		
		Попытка
			positionTradeName = positionTradeName.positionTradeNameUsingTextForm;
		Исключение
		КонецПопытки;
		positionTradeNameGuide = positionTradeName.guid;
		
		dosageInfo = positionTradeName.dosageInfo;
		packagingInfo = positionTradeName.packagingsInfo.packagingInfo;
		manufacturerInfo = positionTradeName.manufacturerInfo;
		
		Попытка
			ЛекартсвеннаяФорма = positionTradeName.medicamentalFormInfo.medicamentalFormName;	
		Исключение
			Попытка
				ЛекартсвеннаяФорма = positionTradeName.dosageFormInfo.medicamentalForm.name;
			Исключение
				ЛекартсвеннаяФорма = positionTradeName.medicamentalFormNormName.medicamentalFormNormName;
			КонецПопытки;
		КонецПопытки;
		
		МНН = MNNInfo.MNNName;
		ТорговоеНаименование = positionTradeName.tradeInfo.tradeName;
			
		кодОКЕИдозы = dosageInfo.dosageOKEI.code;
		Если кодОКЕИ = кодОКЕИдозы Тогда
			ПотребительскаяЕдИзм = Спр.ЕдиницаИзмерения;
		Иначе
			ПотребительскаяЕдИзм = МудульИнтеграции.НайтиЕдиницуИзмерения(кодОКЕИдозы);
		КонецЕсли;
		
		Попытка
			НаименованиеПотребительскойЕдИзм = dosageInfo.dosageUserName;
		Исключение
			НаименованиеПотребительскойЕдИзм = MNNInfo.dosageUser.dosageUserName;
		КонецПопытки;
		
		ЕдИзмДозы = dosageInfo.dosageName;
		Дозировка = Число(dosageInfo.dosageValue);
		
		УпаковкаНаименование = packagingInfo.primaryPackagingInfo.primaryPackagingName;
		Если ЕстьРеквизитИлиСвойствоОбъекта(packagingInfo, "packaging1Quantity") Тогда
			КоличЛекФормВПервУпак = Число(packagingInfo.packaging1Quantity);
			КоличПервУпакВПотребУпак = Число(packagingInfo.packaging2Quantity);
			КоличПотребЕдВПотребУпак = Число(packagingInfo.sumaryPackagingQuantity);
		Иначе
			// Упаковки указаны отдельно
			packagingsInfo = КонтрактXDTO.addInformationFromClassifiers.drugDictionary.packagingInfo;
			Если ТипЗнч(packagingsInfo) = Тип("ОбъектXDTO") Тогда
				СписокУпаковок = Новый Массив;
				СписокУпаковок.Добавить(packagingsInfo);
			Иначе
				СписокУпаковок = packagingsInfo;
			КонецЕсли;
			
			Для Каждого packagingInfo Из СписокУпаковок Цикл
				Если packagingInfo.positionTradeNameExternalCode = positionTradeName.positionTradeNameExternalCode Тогда
					КоличЛекФормВПервУпак = Число(packagingInfo.packaging1Quantity);
					КоличПервУпакВПотребУпак = Число(packagingInfo.packaging2Quantity);
					КоличПотребЕдВПотребУпак = Число(packagingInfo.sumaryPackagingQuantity);	
				КонецЕсли;					
			КонецЦикла;
		КонецЕсли;
		
		КодСтраныПроизводителя = manufacturerInfo.manufacturerOKSM.countryCode;
				
		ПроизводительНаименование = manufacturerInfo.manufacturerName;
		ЖНВЛП = drugInfoUsingReferenceInfo.isZNVLP;
		
		Спр.МНН = МНН;
		Спр.ТорговоеНаименование = ТорговоеНаименование;
		Спр.ЛекартсвеннаяФорма = ЛекартсвеннаяФорма;
		Спр.ЕдИзмДозы = ЕдИзмДозы;
		Спр.Дозировка = Дозировка;
		Спр.ПотребительскаяЕдИзм = ПотребительскаяЕдИзм;
		Спр.НаименованиеПотребительскойЕдИзм = НаименованиеПотребительскойЕдИзм;
		Спр.УпаковкаНаименование = УпаковкаНаименование;
		Спр.КоличЛекФормВПервУпак = КоличЛекФормВПервУпак;
		Спр.КоличПервУпакВПотребУпак = КоличПервУпакВПотребУпак;
		Спр.КоличПотребЕдВПотребУпак = КоличПотребЕдВПотребУпак;
		Спр.ПроизводительНаименование = ПроизводительНаименование;
		Спр.СтранаПроизводства = МудульИнтеграции.НайтиСтрану(КодСтраныПроизводителя);
		Спр.ЖНВЛП = Булево(ЖНВЛП);
		Спр.GuidЛекарственногоПрепарата = positionTradeNameGuide;
	Исключение
	КонецПопытки;
	//
	
	Спр.Владелец = Контракт;
	Спр.Записать();

	Возврат Спр.Ссылка;
	
КонецФункции

Функция ЗагрузитьЭтап(stage, Контракт) Экспорт

	guid = stage.guid;
	
	СпрЭтапы = Справочники.еисЭтапы.НайтиПоРеквизиту("guid", guid,, Контракт);
	Если СпрЭтапы = Справочники.еисЭтапы.ПустаяСсылка() Тогда
		Спр = Справочники.еисЭтапы.СоздатьЭлемент();
	Иначе
		Спр = СпрЭтапы.ПолучитьОбъект();
	КонецЕсли;

	Попытка Спр.Идентификатор			= stage.sid;	Исключение КонецПопытки;	
	Попытка Спр.ВнешнийИдентификатор	= stage.externalSid;	Исключение КонецПопытки;
	
	Спр.guid = guid;	
	Попытка НачДата			= stage.startDate; Исключение НачДата = ""; КонецПопытки;
	Попытка КонДата			= stage.endDate; Исключение КонДата = ""; КонецПопытки;
	Попытка 
		Стоимость			= Число(stage.payments.paymentSumRUR); 
	Исключение 
		Попытка
			Стоимость		= Число(stage.payments.paymentSum);
		Исключение
			Стоимость = 0; 
		КонецПопытки;
	КонецПопытки;
	
	Спр.НачДата = ?(ЗначениеЗаполнено(НачДата), СтрокаВДату(НачДата), Контракт.ДатаЗаключения);
	Спр.КонДата = СтрокаВДату(КонДата);
	Спр.Стоимость = Стоимость;
	
	Если ЗначениеЗаполнено(Спр.КонДата) Тогда
		ПредставлениеЭтапа = "С "+Формат(Спр.НачДата, "ДЛФ=D")+" по "+Формат(Спр.КонДата, "ДЛФ=D")+" на сумму: "+Стоимость+" руб.";
	Иначе
		ПредставлениеЭтапа = guid;	
	КонецЕсли;
	Спр.Наименование = ПредставлениеЭтапа;	
	
	Спр.Владелец = Контракт;
	Спр.Записать();

	Возврат Спр.Ссылка;
	
КонецФункции

Процедура ПроверитьЗаполнениеРеквизитовЮрЛица(СведенияОЮрЛице, ЮрЛицо, Отказ, Поставщик)
	
	//Поставщик = ТипЗнч(ЮрЛицо) = Тип("СправочникСсылка.Организации");
	
	Если Не ЗначениеЗаполнено(СведенияОЮрЛице.ИНН) Тогда
		СообщитьИнфо("По организации "+СведенияОЮрЛице.Представление+" не указан ИНН",,,,Отказ);
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(СведенияОЮрЛице.ИНН)) = 10 Тогда 
		Если Не ЗначениеЗаполнено(СведенияОЮрЛице.КПП) Тогда	
			СообщитьИнфо("По организации "+СведенияОЮрЛице.Представление+" не указан КПП",,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СведенияОЮрЛице.КодПоОКПО) И Не Поставщик Тогда	
		СообщитьИнфо("По организации "+СведенияОЮрЛице.Представление+" не указан код ОКПО",,,,Отказ);
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(СведенияОЮрЛице.НомерСчета) Тогда	
	//	СообщитьИнфо("По организации "+СведенияОЮрЛице.Представление+" не указан номер расчетного счета",,,,);
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(СведенияОЮрЛице.Банк) Тогда	
	//	СообщитьИнфо("По организации "+СведенияОЮрЛице.Представление+" не указан банк",,,,);
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(СведенияОЮрЛице.БИК) Тогда	
	//	СообщитьИнфо("По организации "+СведенияОЮрЛице.Представление+" не указан БИК",,,,);
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(СведенияОЮрЛице.КоррСчет) И Поставщик Тогда	
	//	СообщитьИнфо("По организации "+СведенияОЮрЛице.Представление+" не указан корр. счет",,,,);
	//КонецЕсли;	
	
	//Если Отказ Тогда
	//	ВызватьИсключение "Проверьте заполнение реквизитов юр.лица ["+ЮрЛицо+"]";	
	//КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКонтрактныйТоварПоНоменклатуре(Контракт, ВыбНоменклатура, ПараметрыОрганизации) Экспорт
	
	// Проверка переопределения функции в Общем модуле ЕИС_Переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьКонтрактныйТоварПоНоменклатуре");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьКонтрактныйТоварПоНоменклатуре(Контракт, ВыбНоменклатура, ПараметрыОрганизации);
	КонецЕсли;
	
	Результат = "";	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	кб99_СоответствияТоваровЕИС.КонтрактныйТовар КАК КонтрактныйТовар
		|ИЗ
		|	РегистрСведений.кб99_СоответствияТоваровЕИС КАК кб99_СоответствияТоваровЕИС
		|ГДЕ
		|	кб99_СоответствияТоваровЕИС.КонтрактныйТовар.Владелец = &Владелец
		|	И кб99_СоответствияТоваровЕИС.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Владелец", Контракт);
	Запрос.УстановитьПараметр("Номенклатура", ВыбНоменклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.КонтрактныйТовар;
	КонецЕсли;;
	
	Если ЗначениеЗаполнено(Результат) И ПараметрыОрганизации["ВыводитьПодробнуюИнформацию"] Тогда  
		СообщитьИнфо("Для товара ["+ВыбНоменклатура+"] найден контрактный товар: ["+Результат+"]");
	КонецЕсли;		
	 	
	Возврат Результат;
		
КонецФункции

Функция ЭтоОтгрузкаМаркированногоТовара(Докум) Экспорт 

	Возврат Докум.ШтрихкодыУпаковок.Количество();
	
КонецФункции

Функция ПолучитьПоставщика(ВыбДок) Экспорт

	// Проверка переопределения функции в Общем модуле ЕИС_Переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьПоставщика");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьПоставщика(ВыбДок);
	КонецЕсли;
	
	Возврат ВыбДок.Организация;
	
КонецФункции

Функция ПолучитьКонтактыОрганизации(ПараметрыОрганизации) Экспорт
	
	// Проверка переопределения функции в Общем модуле ЕИС_Переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьКонтактыОрганизации");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьКонтактыОрганизации(ПараметрыОрганизации);
	КонецЕсли;

	Почта   = ПараметрыОрганизации.ПоставщикАдресЭлПочты;
	Телефон = ПараметрыОрганизации.ПоставщикТелефон;
	
	Контакты = Новый Структура();
	Контакты.Вставить("Почта", Почта);
	Контакты.Вставить("Телефон", Телефон);
	
	Возврат Контакты;
	
КонецФункции

Функция ЕстьГрузополучатель(Докум, ФактАдресКонтрагента) Экспорт
	
	// Проверка переопределения функции в Общем модуле ЕИС_Переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ЕстьГрузополучатель");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ЕстьГрузополучатель(Докум, ФактАдресКонтрагента);
	КонецЕсли;

	Результат = Ложь;
	Если ЗначениеЗаполнено(Докум.Грузополучатель) Тогда
		Результат = Докум.Контрагент <> Докум.Грузополучатель;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьОбязательныеРеквизиты(Докум, ПараметрыОрганизации, ДанныеДляФормированияПакета, МодульИнтеграции)
	
	Отказ = Ложь;
	Контракт = Докум.ЕИС_Контракт;
	МестоПоГАР = Неопределено;

	Если Не ЗначениеЗаполнено(Контракт) Тогда
		СообщитьИнфо("Не выбран контракт в документе " + Докум, 
			,
			,
			,
			Отказ);
	Иначе
		МестоПоГАР = ПолучитьМестоПоставкиПоГАР(Докум);		
	КонецЕсли;

	Если ЗначениеЗаполнено( ПараметрыОрганизации["СертификатДействуетДо"] ) И ( ПараметрыОрганизации["СертификатДействуетДо"] < ТекущаяДата())  Тогда
		СообщитьИнфо("Сертификат НЕ действителен, действует до " + ПараметрыОрганизации["СертификатДействуетДо"] + ". Замените сертификат. " + Докум,
			,
			,
			,
			Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыОрганизации["ПодписантЛогин"]) Тогда
		СообщитьИнфо("В параметрах интеграции не заполнен логин подписанта",
			,
			,
			,
			Отказ);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МестоПоГАР) И Не ЗначениеЗаполнено(МестоПоГАР.GUID) Тогда
		СообщитьИнфо("В контракте ["+СокрЛП(Контракт.Наименование)+"] не указан guid места поставки по ГАР",
			Контракт,
			,
			,
			Отказ);
	КонецЕсли;
	
	Поставщик = ПолучитьПоставщика(Докум);
	СведенияОбОрганизации = МодульИнтеграции.ПолучитьСведенияОбОрганизации(Поставщик);
	ПроверитьЗаполнениеРеквизитовЮрЛица(СведенияОбОрганизации, Поставщик, Отказ, Истина);
	МодульИнтеграции.ПолучитьБанковскиеРеквизитыОрганизации(Докум, СведенияОбОрганизации, ПараметрыОрганизации);
	АдресПоставщика = ПолучитьXMLАдресПоставщика(ПараметрыОрганизации["ЮрАдресПоставщика"], ПараметрыОрганизации);
	Если Не ЗначениеЗаполнено(АдресПоставщика) Тогда
		СообщитьИнфо("Не заполнен юридический адрес в параметрах организации.",
			,
			,
			,
			Отказ);
	КонецЕсли;
	СведенияОбОрганизации.Вставить("АдресПоставщика", АдресПоставщика);
	
	Плательщик = Докум.Контрагент;
	СведенияПоПлательшику = МодульИнтеграции.ПолучитьСведенияОбОрганизации(Плательщик);
	Если ЗначениеЗаполнено(Контракт) Тогда
		СведенияПоПлательшику.КодПоОКПО = Контракт.ОКПОПокупателя;
		СведенияПоПлательшику.ИНН		= Контракт.ИННпокупателя;
		СведенияПоПлательшику.КПП		= Контракт.КПППокупателя;
	КонецЕсли;
	ПроверитьЗаполнениеРеквизитовЮрЛица(СведенияПоПлательшику, Плательщик, Отказ, Ложь);
	АдресПокупателя = АдресXML(СведенияПоПлательшику.ЮридическийАдрес, ПараметрыОрганизации);
	Если Не ЗначениеЗаполнено(АдресПокупателя) Тогда
		СообщитьИнфо("Не заполнен юридический адрес у контрагента " + Плательщик,
			Плательщик,
			,
			,
			Отказ);
	КонецЕсли;
    СведенияПоПлательшику.Вставить("АдресПокупателя", АдресПокупателя);
	
	Если ЗначениеЗаполнено(Докум.Грузополучатель) Тогда
		Грузополучатель = Докум.Грузополучатель;
		СведенияПоГрузополучателю = МодульИнтеграции.ПолучитьСведенияОбОрганизации(Грузополучатель);
	Иначе
		Грузополучатель = Плательщик;
		СведенияПоГрузополучателю = СведенияПоПлательшику;
	КонецЕсли;
    АдресГрузополучателя = ?(ЗначениеЗаполнено(Докум.АдресДоставки), СокрЛП(Докум.АдресДоставки), СведенияПоГрузополучателю.ФактическийАдрес);
	Если Не ЗначениеЗаполнено(АдресГрузополучателя) Тогда
		СообщитьИнфо("Не заполнен фактический адрес у контрагента " + Грузополучатель,
			Грузополучатель,
			,
			,
			Отказ);
	КонецЕсли;
	СведенияПоГрузополучателю.Вставить("АдресГрузополучателя", АдресГрузополучателя);
	
	ЦеныПоКонтракту = Контракт.СпособУказанияЦены = Перечисления.еисСпособыУказанияЦеныКонтракта.ЦенаКонтракта;
	Для Каждого СтрДок Из Докум.Товары Цикл
		
		КонтрактныйТовар = СтрДок.ЕИС_КонтрактныйТовар;
		
		Если ЗначениеЗаполнено(КонтрактныйТовар) Тогда
			
			Если Не ЗначениеЗаполнено(КонтрактныйТовар.ТипОбъектаЗакупки) Тогда
				СообщитьИнфо("["+Докум+"]: В строке №" + СтрДок.НомерСтроки + "В контрактном товаре: " + КонтрактныйТовар +
				" не указан Тип объекта закупки!", 
				КонтрактныйТовар,
				,
				,
				Отказ);	
				Продолжить;
			КонецЕсли;
			
			ЕдиницаИзмеренияКВыгрузке = МодульИнтеграции.КодИНаименованиеЕдиницыИзмеренияКВыгрузке(СтрДок);
			Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияКВыгрузке.Код) Тогда
				СообщитьИнфо("В строке: " + СтрДок.НомерСтроки + " Не заполнен код единицы измерения " + ЕдиницаИзмеренияКВыгрузке,
				ЕдиницаИзмеренияКВыгрузке,
				,
				,
				Отказ);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияКВыгрузке.Наименование) Тогда
				СообщитьИнфо("В строке: " + СтрДок.НомерСтроки + " Не заполнено наименование единицы измерения " + ЕдиницаИзмеренияКВыгрузке, 
				ЕдиницаИзмеренияКВыгрузке,
				,
				,
				Отказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(КонтрактныйТовар.СтранаПроисхождения) Тогда
				СообщитьИнфо("Не заполнена страна происхождения в контрактном товаре: " + КонтрактныйТовар,
					КонтрактныйТовар,
					,
					,
					Отказ);
			КонецЕсли;
			
			Если Не ПараметрыОрганизации.РазрешитьРасхожденияПоСуммам Тогда
				
				Количество = СтрДок.Количество * ?(СтрДок.Коэффициент = 0, 1, СтрДок.Коэффициент);
				Цена = ?(ЦеныПоКонтракту, СтрДок.ЦенаПоКонтракту, СтрДок.Цена);
				Сумма = ?(ЦеныПоКонтракту, СтрДок.СуммаПоКонтракту, СтрДок.Сумма);
				СтавкаНДС = МодульИнтеграции.ПолучитьСтавкуНДС(СтрДок.СтавкаНДС);
				ЦенаБезНДС = Окр(Цена / СтрДок.Коэффициент / ((100 + СтавкаНДС) / 100), 11, РежимОкругления.Окр15как20);
                СтоимостьБезНДС = Окр(ЦенаБезНДС * Количество, 2, РежимОкругления.Окр15как20);
				СуммаСНДС = Окр(Сумма, 2, РежимОкругления.Окр15как20); 
				
				Если ЦеныПоКонтракту И Окр(СтрДок.ЦенаПоКонтракту, 2, РежимОкругления.Окр15как20) <> СтрДок.Цена Тогда
					СообщитьИнфо("[" + Докум + "]: В строке №" + СтрДок.НомерСтроки + " Цена за упаковку по документу отличается от цены по контракту. В документе: " +
						СтрДок.Цена + ", по контракту: " + Окр(СтрДок.ЦенаПоКонтракту, 2, РежимОкругления.Окр15как20),
						,
						,
						,
						Отказ);
				КонецЕсли;
				  
				Если ЦеныПоКонтракту И СуммаСНДС <> СтрДок.Сумма Тогда
					СообщитьИнфо("[" + Докум + "]: В строке " + СтрДок.НомерСтроки + " Сумма по документу отгрузки не равна рассчетной сумме по контракту. В документе: " +
						СтрДок.Сумма + ", по контракту: " + СуммаСНДС,
						,
						,
						,
						Отказ);
				КонецЕсли;
				
				Если СтрДок.СуммаНДС <> 0 Тогда 
					
					СуммаНДСПоКонтракту = ?(ЦеныПоКонтракту, СуммаСНДС - СтоимостьБезНДС, СтрДок.СуммаНДС);
					Если ЦеныПоКонтракту И СуммаНДСПоКонтракту <> СтрДок.СуммаНДС Тогда
						СообщитьИнфо("["+ Докум +"]: В строке " + СтрДок.НомерСтроки + " Сумма НДС по документу отгрузки не равна рассчетной сумме НДС по контракту. В документе: " +
							СтрДок.СуммаНДС + ", по контракту: " + СуммаНДСПоКонтракту,
							,
							,
							,
							Отказ);
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			СообщитьИнфо("["+ Докум +"]: В строке " + СтрДок.НомерСтроки + " не заполнен контрактный товар",
				,
				,
				,
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
  	
	ДанныеДляФормированияПакета.Вставить("СведенияОбОрганизации",		 СведенияОбОрганизации);
	ДанныеДляФормированияПакета.Вставить("СведенияПоПлательшику",		 СведенияПоПлательшику);
	ДанныеДляФормированияПакета.Вставить("СведенияПоГрузополучателю",	 СведенияПоГрузополучателю);
	ДанныеДляФормированияПакета.Вставить("МестоПоставкиПоГАР",			 МестоПоГАР);
		
	Возврат Отказ;
	
КонецФункции

Функция СформироватьПакетЕИС(Подписать = Ложь, Докум, ПолучитьОтветЕИС = Ложь, ПараметрыОрганизации, ПрикрепленныеФайлы) Экспорт
	
	МодульИнтеграции = ПолучитьОбщийМодульИнтеграции();
	
	Отказ = Ложь;
	Результат = Новый Структура();
	Результат.Вставить("ОшибкаФормирования", Истина);
	Результат.Вставить("ФайлыПакета", "");
	
	ДанныеДляФормированияПакета = Новый Структура();
	Если ПроверитьОбязательныеРеквизиты(Докум, ПараметрыОрганизации, ДанныеДляФормированияПакета, МодульИнтеграции) Тогда 
		Возврат Результат;
	КонецЕсли;
	
	ТекДата				 = Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	ТекВремя 			 = ТекущееВремяСтрока();
	НомерДок			 = СокрЛП(Докум.НомерНаПечать);
	ДатаДок         	 = Формат(Докум.ДатаНаПечать, "ДФ=dd.MM.yyyy");
	ДатаСтрока			 = Преобразовать_Дата_в_Строка_Сокращенная( Докум.Дата );
	ДатаПередачиТоваров	 = Формат(ПолучитьДатуПередачиТоваров(Докум), "ДФ=dd.MM.yyyy");
	НомерТТН			 = НомерДокументаТТН(Докум);
	
	СведенияОбОрганизации		 = ДанныеДляФормированияПакета.СведенияОбОрганизации;
	СведенияПоПлательшику		 = ДанныеДляФормированияПакета.СведенияПоПлательшику;
	СведенияПоГрузополучателю	 = ДанныеДляФормированияПакета.СведенияПоГрузополучателю;
	
	Контракт = Докум.ЕИС_Контракт;
		
	// ПОСТАВЩИК
	ИННПоставщика = СведенияОбОрганизации.ИНН;
	КПППоставщика = СведенияОбОрганизации.КПП;
	ПоставщикЭтоИП = СтрДлина(ИННПоставщика) = 12;
	
	Контакты = ПолучитьКонтактыОрганизации(ПараметрыОрганизации);
	Почта = Контакты.Почта;
	Телефон = Контакты.Телефон;

	Если ЗначениеЗаполнено(Телефон) Тогда
		ТелефонСтр = " <Тлф>"+ СокрЛП(Телефон) +"</Тлф>";
	КонецЕсли;
	Если ЗначениеЗаполнено(Почта)
			Или ЗначениеЗаполнено(Телефон) Тогда
		ПочтаСтр = " <ЭлПочта>"+ Почта +"</ЭлПочта>";
		СтрКонтакты = " <Контакт>" + Символы.ПС + ?(ЗначениеЗаполнено(Телефон), ТелефонСтр, "") +
			?(ЗначениеЗаполнено(Телефон), Символы.ПС, "") +
			?(ЗначениеЗаполнено(Почта), ПочтаСтр, "") + 
			?(ЗначениеЗаполнено(Почта), Символы.ПС, "") + 
			"</Контакт>";
	КонецЕсли;	
		
	РсПродавец = СведенияОбОрганизации.НомерСчета;
	БанкПродавец =  ЗаменитьСпецСимволы(?(ТипЗнч(СведенияОбОрганизации.Банк) = Тип("Строка"),
		СокрЛП(СведенияОбОрганизации.Банк), СокрЛП(СведенияОбОрганизации.Банк.Наименование)));
	БикПродавец = СокрЛП(СведенияОбОрганизации.БИК); 
	КорСчетПродавец = СведенияОбОрганизации.КоррСчет;
	
	ПоставщикНаименование = ЗаменитьСпецСимволы( ПараметрыОрганизации["ПоставщикНаименование"] );
	ПодписантФамилия = ПараметрыОрганизации["ПодписантФамилия"];
	ПодписантИмя = ПараметрыОрганизации["ПодписантИмя"];
	ПодписантОтчетство = ПараметрыОрганизации["ПодписантОтчество"];
	
	// ПОКУПАТЕЛЬ
	Попытка РСПокупателя = СведенияПоПлательшику.НомерСчета; Исключение РСПокупателя = "" КонецПопытки;
	Попытка
		НаименованиеБанка = ?(ТипЗнч(СведенияПоПлательшику.Банк) = Тип("Строка"), 
				СведенияПоПлательшику.Банк, СведенияПоПлательшику.Банк.Наименование);
		БанкПокупателя = ЗаменитьСпецСимволы(НаименованиеБанка); 
	Исключение 
		БанкПокупателя = "" 
	КонецПопытки;
	Попытка БИКБанкаПокупателя = СведенияПоПлательшику.БИК; Исключение БИКБанкаПокупателя = "" КонецПопытки;
	КорСчетПокупателя = ?(ЗначениеЗаполнено(СведенияПоПлательшику.КоррСчет), " КорСчет='"+СведенияПоПлательшику.КоррСчет+"' ", ""); 
	
	Если ЗначениеЗаполнено(РСПокупателя) Тогда
		БанкРекв = "
		|                <БанкРекв НомерСчета='"+ РСПокупателя +"'>
		|                    <СвБанк 
		|	НаимБанк='"+ БанкПокупателя +"' 
		|	БИК='"+БИКБанкаПокупателя+"' 
		|	"+КорСчетПокупателя+"/>
		|                </БанкРекв>";
	Иначе
		БанкРекв = "";
	КонецЕсли;
    			
	НомерКонтракта = СокрЛП(Контракт.НомерКонтракта);
	ДатаКонтракта = Формат(Контракт.ДатаЗаключения, "ДФ=dd.MM.yyyy");
	НомерКонтрагента = "2ZK-CUS-"+СокрЛП(Контракт.РегНомерКонтрагента);
	НомерПоставщика = "2ZK-SUP-000"+ ПараметрыОрганизации["РегНомер"];
	
	ИдГосКон = "";
	Если ЗначениеЗаполнено(Контракт.ИГК) Тогда
		ИдГосКон = " ИдГосКон= '" + СокрЛП(Контракт.ИГК) + "'";
	КонецЕсли;
	
	идЗакупки = СокрЛП(Контракт.идЗакупки);
	РеестровыйНомерКонтракта = СокрЛП(Контракт.РеестровыйНомерКонтракта);
	ИдентификаторКонтракта = СокрЛП(Контракт.Идентификатор);
	СокрНаименованиеПокупателя = ЗаменитьСпецСимволы( СокрЛП(Контракт.СокращенноеНаименованиеКонтрагента) );
	ПолноеНаименованиеПокупателя = ЗаменитьСпецСимволы( СокрЛП(Контракт.ПолноеНаименованиеКонтрагента) );
	
	guid = Новый УникальныйИдентификатор;
	
	Маркировка = ЭтоОтгрузкаМаркированногоТовара(Докум);
	ПрефиксДокумента = "ON_NSCHFDOPPR_";

	ИдФайла = ПрефиксДокумента+НомерКонтрагента+"_"+НомерПоставщика+"_"+ДатаСтрока+"_"+guid+"_0_0_0_0_0_00";
	
	//ДанныеЗаполненияПакета = Новый Структура();
	//ДанныеЗаполненияПакета.Вставить("ИдФайла", ИдФайла);
	//ДанныеЗаполненияПакета.Вставить("ПоставщикНаименование", ПоставщикНаименование);
	//ДанныеЗаполненияПакета.Вставить("НомерДок", НомерДок);
	//ДанныеЗаполненияПакета.Вставить("ПоставщикЭтоИП", ПоставщикЭтоИП);
	//ДанныеЗаполненияПакета.Вставить("Контракт", Контракт);
	//ДанныеЗаполненияПакета.Вставить("ИННПоставщика", ИННПоставщика);
	
	ФайлыПакета = Новый Массив;
	Запрос = "<?xml version=""1.0"" encoding=""WINDOWS-1251"" ?>
	|<Файл 
	|	ИдФайл='"+ИдФайла+"' 
	|	ВерсФорм='5.03' 
	|	ВерсПрог='1С:Предприятие 8.3'>
	|    <Документ КНД='1115131' 
	|Функция='" + ?(Докум.СтатусУПД = 1, "СЧФДОП", "ДОП") + "' 
	|ПоФактХЖ='Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)' 
	|НаимДокОпр='Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)' 
	|НаимЭконСубСост='"+ ПоставщикНаименование +"'
	|СоглСтрДопИнф='0000.0000.0000' 
	|ДатаИнфПр='"+ ТекДата +"' 
	|ВремИнфПр='"+ТекВремя+"'>  
	|        <СвСчФакт НомерДок='"+НомерДок+"' ДатаДок='"+ ТекДата +"'>
	|            <СвПрод СокрНаим='"+ ПоставщикНаименование +"'>
	|                <ИдСв>";
	Если ПоставщикЭтоИП Тогда
		Если Не Контракт.ПодконтрольныеТовары Тогда
			Запрос=Запрос+"
			|                 	<СвИП ИННФЛ='"+ИННПоставщика+"'>
			|						<ФИО Фамилия='"+ ПодписантФамилия +"' Имя='"+ ПодписантИмя +"' Отчество='"+ ПодписантОтчетство +"' />
			|					</СвИП>";
		Иначе
			Запрос=Запрос+"
			|                 	<СвФЛУчастФХЖ ИННФЛ='"+ИННПоставщика+"'>
			|						<ФИО Фамилия='"+ ПодписантФамилия +"' Имя='"+ ПодписантИмя +"' Отчество='"+ ПодписантОтчетство +"' />
			|					</СвФЛУчастФХЖ>";
		КонецЕсли;
	Иначе
		Запрос=Запрос+"
	|                    	<СвЮЛУч НаимОрг='"+ПоставщикНаименование+"' ИННЮЛ='"+ИННПоставщика+"' КПП='"+КПППоставщика+"'/>"
	КонецЕсли;
	Запрос=Запрос+"
	|                </ИдСв>
	|                <Адрес>"+ СведенияОбОрганизации.АдресПоставщика +"</Адрес>  
	|" + СтрКонтакты + "
	//|                <БанкРекв НомерСчета='"+ РсПродавец +"'>
	//|                    <СвБанк НаимБанк='"+ БанкПродавец +"' БИК='"+ БикПродавец+
	//					"' КорСчет='"+ КорСчетПродавец +"'/>
	//|                </БанкРекв>
	|            </СвПрод>";
	
	Если ЗначениеЗаполнено(ПараметрыОрганизации["ГрузоотправительИННИП"]) Тогда 
		Запрос=Запрос+"	
		|     <ГрузОт>
	    |        <ГрузОтпр>
	    |            <ИдСв>
	    |                <СвИП ИННФЛ='"+ ПараметрыОрганизации["ГрузоотправительИННИП"] +"'>
	    |                    <ФИО Фамилия='"+ПараметрыОрганизации["ГрузоотправительФамилия"]+"' 
		|						  Имя='"+ПараметрыОрганизации["ГрузоотправительИмя"]+"' 
		|						  Отчество='"+ПараметрыОрганизации["ГрузоотправительОтчество"]+"'/>
	    |                </СвИП>
	    |            </ИдСв>
	    |            <Адрес>
	    |                <АдрИнф КодСтр='643' НаимСтран='РОССИЯ' АдрТекст='"+ПараметрыОрганизации["ГрузоотправительАдресИП"]+"'/>
	    |            </Адрес>
	    |            <Контакт/>
	    |        </ГрузОтпр>
	    |    </ГрузОт>";
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОрганизации["ГрузоотправительИННООО"]) Тогда 
		Запрос=Запрос+"	
		|     <ГрузОт>
	    |        <ГрузОтпр>
	    |            <ИдСв>
		|		<СвЮЛУч НаимОрг='"+ ЗаменитьСпецСимволы(ПараметрыОрганизации["ПоставщикНаименование"]) +"' 
		|	ИННЮЛ='"+ ПараметрыОрганизации["ГрузоотправительИННООО"] +"' 
		|	КПП='"+ПараметрыОрганизации["ГрузоотправительКППООО"] +"'/>
	    |            </ИдСв>
	    |            <Адрес>
	    |                <АдрИнф КодСтр='643' НаимСтран='РОССИЯ' АдрТекст='"+ПараметрыОрганизации["ГрузоотправительАдресООО"]+"'/>
	    |            </Адрес>
	    |            <Контакт/>
	    |        </ГрузОтпр>
	    |    </ГрузОт>";
	КонецЕсли;
	
	ДобавитьСведенияОГрузополучателе = ЕстьГрузополучатель(Докум, СведенияПоПлательшику.ЮридическийАдрес);
	Если ДобавитьСведенияОГрузополучателе Тогда

		Запрос=Запрос+"
		|<ГрузПолуч ИнфДляУчаст='1'>
		|	<ИдСв>
		|		<СвЮЛУч ИННЮЛ='"+ СокрЛП(СведенияПоПлательшику.ИНН) +"' НаимОрг='"+ЗаменитьСпецСимволы( СведенияПоГрузополучателю.ПолноеНаименование )+"'/>
		|	</ИдСв>
		|	<Адрес>
		|		<АдрИнф АдрТекст='"+СокрЛП(СведенияПоГрузополучателю.АдресГрузополучателя)+"' КодСтр='643' НаимСтран='РОССИЯ'/>
		|	</Адрес>
		|	<Контакт/>
		|</ГрузПолуч>";
		
	КонецЕсли;

	Запрос=Запрос+"
	|	<СвПРД НомерПРД='"+НомерДок+"' ДатаПРД='"+ ТекДата +"' СуммаПРД='"+ Формат(Докум.СуммаДокумента, ФорматнаяСтрокаЧиселКВыгрузке()) +"'/>
	|            <ДокПодтвОтгрНом 
	|	РеквНаимДок='Документ о приемке' 
	|	РеквНомерДок='"+НомерДок+"' 
	|	РеквДатаДок='"+ ТекДата +"'/>
	|            <СвПокуп 
	|	ОКПО='"+ СведенияПоПлательшику.КодПоОКПО +"' 
	|	ИнфДляУчаст='0' "+ ?(ЗначениеЗаполнено(СокрНаименованиеПокупателя), "
	|	СокрНаим='"+ СокрНаименованиеПокупателя +"'", "") + ">
	|                <ИдСв>
	|                    <СвЮЛУч 
	|	НаимОрг='"+  ПолноеНаименованиеПокупателя +"' 
	|	ИННЮЛ='"+СведенияПоПлательшику.ИНН+"' 
	|	КПП='"+СведенияПоПлательшику.КПП+"'/>
	|                </ИдСв>
	|                <Адрес>"+ СведенияПоПлательшику.АдресПокупателя +"</Адрес> 
	|	" + БанкРекв + "
	|            </СвПокуп>
	|			 <ДенИзм КодОКВ='643' НаимОКВ='РОССИЙСКИЙ РУБЛЬ'/>
	|            <ДопСвФХЖ1 " + ИдГосКон + ">
	|                <ИнфПродЗаГоскКазн ДатаГосКонт='"+ДатаКонтракта+"' НомерГосКонт='"+НомерКонтракта+"'/>
	|            </ДопСвФХЖ1>
	|        </СвСчФакт>
	|        <ТаблСчФакт>";
	
	
	СтоимостьВсего = 0;
	СтоимостьБезНДСВсего = 0;
	НДСВсего = 0;
	
	тзКонтрактныеТовары = Новый ТаблицаЗначений;
	тзКонтрактныеТовары.Колонки.Добавить("НомерСтроки");
	тзКонтрактныеТовары.Колонки.Добавить("Товар");
	тзКонтрактныеТовары.Колонки.Добавить("Номенклатура");
	тзКонтрактныеТовары.Колонки.Добавить("Серия");
	тзКонтрактныеТовары.Колонки.Добавить("НаименованиеТовара");
	тзКонтрактныеТовары.Колонки.Добавить("КодТовара");
	тзКонтрактныеТовары.Колонки.Добавить("Цена");
	тзКонтрактныеТовары.Колонки.Добавить("ЦенаБезНДС");
	тзКонтрактныеТовары.Колонки.Добавить("КоличествоУпаковок");
	тзКонтрактныеТовары.Колонки.Добавить("ЗавершениеАктирования");
	
	НомерСтроки = 0;
	ТолькоУслуги = Истина;
	ЦеныПоКонтракту = Контракт.СпособУказанияЦены = Перечисления.еисСпособыУказанияЦеныКонтракта.ЦенаКонтракта;
	
	Для каждого СтрДок Из Докум.Товары Цикл
		
		Номенклатура = СтрДок.Номенклатура;
		
		КонтрактныйТовар = СтрДок.ЕИС_КонтрактныйТовар;
		
		Если ЗначениеЗаполнено(КонтрактныйТовар) Тогда
			
			Если КонтрактныйТовар.ТипОбъектаЗакупки = Перечисления.еисТипыОбъектовЗакупки.PRODUCT Тогда
				ТолькоУслуги = Ложь;
			КонецЕсли;
			
			НаименованиеТовара = КонтрактныйТовар.Наименование;
			КодТовара = ?(ЗначениеЗаполнено(КонтрактныйТовар.КТРУКод), КонтрактныйТовар.КТРУКод, КонтрактныйТовар.ОКПД2Код);
			
			БлокКодВидаТовара = "";
			Если ЗначениеЗаполнено(КонтрактныйТовар.КодТНВЭД) Тогда
				БлокКодВидаТовара = " КодВидТов='" + КонтрактныйТовар.КодТНВЭД + "'";	
			КонецЕсли;
			
			Количество = СтрДок.Количество * ?(СтрДок.Коэффициент = 0, 1, СтрДок.Коэффициент);
			Цена = ?(ЦеныПоКонтракту, СтрДок.ЦенаПоКонтракту, СтрДок.Цена);
			Сумма = ?(ЦеныПоКонтракту, СтрДок.СуммаПоКонтракту, СтрДок.Сумма);
			
			НомерСтроки = НомерСтроки + 1;
			нСтрокаИтог = тзКонтрактныеТовары.Добавить();
			нСтрокаИтог.НомерСтроки = НомерСтроки;
			нСтрокаИтог.Товар = КонтрактныйТовар;
			нСтрокаИтог.НаименованиеТовара = НаименованиеТовара;
			нСтрокаИтог.КодТовара = КодТовара;
			нСтрокаИтог.Серия = СтрДок.Серия;
			нСтрокаИтог.Номенклатура = СтрДок.Номенклатура;
			нСтрокаИтог.Цена = Окр(Цена / СтрДок.Коэффициент, 11, РежимОкругления.Окр15как20);
			нСтрокаИтог.КоличествоУпаковок = СтрДок.Количество;
			нСтрокаИтог.ЗавершениеАктирования = СтрДок.ЗавершениеАктирования;
					
			СтавкаНДС = МодульИнтеграции.ПолучитьСтавкуНДС(СтрДок.СтавкаНДС);
			
			ЦенаБезНДС = Окр(Цена / СтрДок.Коэффициент / ((100 + СтавкаНДС) / 100), 11, РежимОкругления.Окр15как20);
			нСтрокаИтог.ЦенаБезНДС = ЦенаБезНДС;
			
			СтоимостьБезНДС = Окр(ЦенаБезНДС * Количество, 2, РежимОкругления.Окр15как20);
			СуммаСНДС = Окр(Сумма, 2, РежимОкругления.Окр15как20);   
						
			Если СтрДок.СуммаНДС=0 Тогда 
				СуммаНДС = "без НДС";
				НДСВсего = 0;
			Иначе
				СуммаНДСПоКонтракту = ?(ЦеныПоКонтракту, СуммаСНДС - СтоимостьБезНДС, СтрДок.СуммаНДС);
				СуммаНДС =  Формат(СуммаНДСПоКонтракту, ФорматнаяСтрокаЧиселКВыгрузке());
				НДСВсего = НДСВсего + СуммаНДСПоКонтракту;	
			КонецЕсли;
			
			ЕдиницаИзмеренияКВыгрузке = МодульИнтеграции.КодИНаименованиеЕдиницыИзмеренияКВыгрузке(СтрДок);
			
			СтавкаНДС = ?(ВРЕГ(СокрЛП(СтрДок.СтавкаНДС)) = "БЕЗ НДС", "без НДС", СокрЛП(СтрДок.СтавкаНДС));
			Запрос = Запрос+"
			|            <СведТов 
			|	НомСтр='"+ СтрДок.НомерСтроки +"' 
			|	НаимТов='"+ НаименованиеТовара +"'
			|	ОКЕИ_Тов='"+ СокрЛП(ЕдиницаИзмеренияКВыгрузке.Код) + "'
			|	НаимЕдИзм='"+ СокрЛП(ЕдиницаИзмеренияКВыгрузке.Наименование) + "'
			|	КолТов='"+ Формат(Количество, ФорматнаяСтрокаЧиселКВыгрузке()) +"'
			|	ЦенаТов='"+ Формат(ЦенаБезНДС, ФорматнаяСтрокаЧиселКВыгрузке()) +"'
			|	СтТовБезНДС='"+Формат(СтоимостьБезНДС, ФорматнаяСтрокаЧиселКВыгрузке())+"'
			|	НалСт='"+ СтавкаНДС +"'
			|	СтТовУчНал='"+ Формат(СуммаСНДС, ФорматнаяСтрокаЧиселКВыгрузке()) +"'>";
			
			МаркировкаПоНоменкалтуре = Докум.ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("Номенклатура", СтрДок.Номенклатура));
			Если МаркировкаПоНоменкалтуре.Количество() Тогда
								
				Запрос = Запрос + "
					|<ДопСведТов ПрТовРаб='"+ 
						ПолучитьПорядковыйНомерПеречисления(КонтрактныйТовар.ТипОбъектаЗакупки) + 
						"' КодТов='"+ СокрЛП(КодТовара) +"'" + БлокКодВидаТовара + ">
					|	<НомСредИдентТов>";
			
				Для Каждого СтрКМ Из МаркировкаПоНоменкалтуре Цикл
					Запрос = Запрос + "
					|		<КИЗ>" + ЗаменитьСпецСимволы(СтрКМ.КодМаркировки) + "</КИЗ>";
				КонецЦикла;
				
				Запрос = Запрос + "
					|	</НомСредИдентТов>
					|</ДопСведТов>";				
			Иначе
				Запрос = Запрос + "
				|		<ДопСведТов ПрТовРаб='"+ 
						ПолучитьПорядковыйНомерПеречисления(КонтрактныйТовар.ТипОбъектаЗакупки) + 
						"' КодТов='"+ СокрЛП(КодТовара) + "'" + БлокКодВидаТовара + "/>";
			КонецЕсли;

			Запрос = Запрос+"
			|                <Акциз>
			|                    <БезАкциз>без акциза</БезАкциз>
			|                </Акциз>
			|                <СумНал>";
			
			Если СуммаНДС = "без НДС" Тогда
				Запрос = Запрос+"
				|                <БезНДС>"+ СуммаНДС +"</БезНДС>";
			Иначе
				Запрос = Запрос+"
				|                <СумНал>"+ СуммаНДС +"</СумНал>";
			КонецЕсли;
								
			Запрос = Запрос + "
			|				 </СумНал>
			|            </СведТов>";
			СтоимостьВсего = СтоимостьВсего + СуммаСНДС;
			СтоимостьБезНДСВсего = СтоимостьБезНДСВсего + СтоимостьБезНДС;

		КонецЕсли;
			
	КонецЦикла;
	
	мсКонтрактныеТовары = тзКонтрактныеТовары.ВыгрузитьКолонку("Товар");
	мсКонтрактныеТовары = СвернутьМассив(мсКонтрактныеТовары);
	
	НДСВсего = Формат(НДСВсего, ФорматнаяСтрокаЧиселКВыгрузке());
	Запрос = Запрос +"
	|            <ВсегоОпл 
	|	СтТовБезНДСВсего='"+Формат(СтоимостьБезНДСВсего, ФорматнаяСтрокаЧиселКВыгрузке())+"' 
	|	СтТовУчНалВсего='"+Формат(СтоимостьВсего, ФорматнаяСтрокаЧиселКВыгрузке())+"'>
	|                <СумНалВсего>";
	Если НДСВсего = 0 Тогда
		Запрос = Запрос +"
		|                    <БезНДС>без НДС</БезНДС>";
	Иначе
		Запрос = Запрос +"
		|                    <СумНал>"+НДСВсего+"</СумНал>";
	КонецЕсли;	
	Запрос = Запрос +"
	|                </СумНалВсего>
	|            </ВсегоОпл>
	|        </ТаблСчФакт>
	|        <СвПродПер>
	|        <СвПер СодОпер='" + ?(ТолькоУслуги, "Работы выполнены в полном объеме", "Товары переданы") + "' ДатаПер='"+ ДатаПередачиТоваров + 
								?(Докум.ОтгрузкаЗаМесяц, "' ДатаНачПер='" + Формат(НачалоМесяца(Докум.ДатаНаПечать), "ДФ=dd.MM.yyyy") + 
									"' ДатаОконПер='" + Формат(Мин(КонецМесяца(Докум.ДатаНаПечать), ТекущаяДатаСеанса()), "ДФ=dd.MM.yyyy") + "'", "'") + ">
	|                <ОснПер 
	|	РеквНаимДок='Контракт' 
	|	РеквНомерДок='"+НомерКонтракта+"' 
	|	РеквДатаДок='"+ДатаКонтракта+"' 
	|	РеквДопСведДок='Реестровый номер в реестре контрактов: "+РеестровыйНомерКонтракта+"'/>";
	Если Контракт.ВыгружатьАктПриемки Тогда
		Запрос = Запрос +"
		|                <ОснПер НаимОсн='Акт сдачи-приемки товара' НомОсн='"+НомерДок+"' ДатаОсн='"+ДатаДок+"'/>";
	КонецЕсли;
	
	Если ПараметрыОрганизации["ДобавлятьДанныеОЛицеПередавшемТовар"] Тогда
		Запрос = Запрос + "
		|                <СвЛицПер>
	    |                	<РабОргПрод Должность='" + ПараметрыОрганизации["ПодписантДолжность"] + "'>
	    |                  	  <ФИО Фамилия='"+ПодписантФамилия+"' Имя='"+ ПодписантИмя +"' Отчество='"+ ПодписантОтчетство +"'/>
	    |                	</РабОргПрод>
	    |            	</СвЛицПер>"; 
	КонецЕсли;
	
	Запрос = Запрос +"
	|                <Тран СвТран='" + НомерТТН + "'/>
	|            </СвПер>
	|        </СвПродПер>
	|        <Подписант Должн='"+ ПараметрыОрганизации["ПодписантДолжность"] +"' СпосПодтПолном='" + 
		?(ПараметрыОрганизации["ИспользуетсяДоверенность"], "3", "1") + "' ДопСведПодп='1'> 
	|			<ФИО Фамилия='"+ ПодписантФамилия +"' Имя='"+ ПодписантИмя +"' Отчество='"+ ПодписантОтчетство +"'/>";
	Если ПараметрыОрганизации["ИспользуетсяДоверенность"] Тогда
		Запрос = Запрос +"	
	|        <СвДоверЭл НомДовер='" + ПараметрыОрганизации["НомерДоверенности"] + "'
	|        	ДатаВыдДовер='" + Формат(ПараметрыОрганизации["ДатаВыдачиДоверенности"], "ДФ=dd.MM.yyyy") + "'
	|           ВнНомДовер='" + ПараметрыОрганизации["ВнутреннийНомерДоверенности"] + "'
	|           ИдСистХран='" + ЗаменитьСпецСимволы(ПараметрыОрганизации["ИдентификаторСистемыХраненияДоверенности"]) + "'
	|			УРЛСист='" + ЗаменитьСпецСимволы(ПараметрыОрганизации["УРЛСистемыХраненияДоверенности"]) + "'/>";
	КонецЕсли;
	Запрос = Запрос +"	
	|        </Подписант>
	|    </Документ>
	|</Файл>";
	
	КаталогФайлов = ПараметрыОрганизации["КаталогЛогов"];
	ИмяФайла = КаталогФайлов+ИдФайла+".xml";
	ИмяФайла1 = ИдФайла+".xml";

	ФайлСФ = Новый Структура("ИмяФайла, Запрос", ИмяФайла, Запрос);
	ФайлыПакета.Добавить(ФайлСФ);
	
	ИдФайлаПрил = "PRIL_"+ИдФайла;
	
	ИмяФайлаПрил = "PRIL_"+ИдФайла+".xml";
	
	ТекущийЭтап = Докум.ЕИС_ТекущийЭтап;
	Если Не ЗначениеЗаполнено(ТекущийЭтап.ВнешнийИдентификатор) Тогда
		ВнешТехИдЭтапКонт = ""
	Иначе
		ВнешТехИдЭтапКонт = "' ВнешТехИдЭтапКонт='"+ СокрЛП(ТекущийЭтап.ВнешнийИдентификатор);
	КонецЕсли;
	
	Приложение = "<?xml version=""1.0"" encoding=""windows-1251""?>
	|<ФайлУПДПрод 
	| ИдПрилож='"+ ИдФайлаПрил+"'
	| ИдФайл='"+ИдФайла+"'
	| ВерсФорм='1.21'
	| РукОрг='1'>
	|    <СведКонт РеестрНомКонт='"+РеестровыйНомерКонтракта+"' 
	|	ИдВерсКонт='"+ИдентификаторКонтракта+"' 
	|	ИдЭтапКонт='"+ СокрЛП(ТекущийЭтап.GUID) +"'
	|	ТехИдЭтапКонт='"+СокрЛП(ТекущийЭтап.Идентификатор) + ВнешТехИдЭтапКонт +"'
	|	ИКЗ='"+идЗакупки+"'/>
	|	 <СведПоставщик>"+?(ЗначениеЗаполнено(ПараметрыОрганизации["КодСВР"]),"
	|	<ЮЛ КодСВР='"+ПараметрыОрганизации["КодСВР"]+"'/>","");
		
	Если ЗначениеЗаполнено(Контракт.ПоставщикGuid) Тогда
		ИдПлатежнРеквКонт = "ИдПлатежнРеквКонт='" + СокрЛП(Контракт.ПоставщикGuid) + "'";
	Иначе
		ИдПлатежнРеквКонт = "";
	КонецЕсли;
	
	Если Контракт.ЭтоГОЗ Тогда
		
		НаимПоставщика = ЗаменитьСпецСимволы( Контракт.ПоставщикНаименование );
		Если Не ЗначениеЗаполнено(НаимПоставщика) Тогда
			НаимПоставщика = ПоставщикНаименование;
		КонецЕсли;
		
	Иначе
		НаимПоставщика = ПоставщикНаименование;
	КонецЕсли;
	
	РаботаСЛекарственнымиПрепаратами = Константы.кб99_ЕИС_Лекарства.Получить();
	
	Приложение = Приложение +"
	|    <БанкРекв " + ИдПлатежнРеквКонт + "
	|	ТипСчет='РСБ' 
	| 	БИК='"+ БикПродавец+"'
	|	НаимБанк='"+БанкПродавец+"' 
	|	КорСчетБанк='"+	КорСчетПродавец+"'
	|	РасчСчет='"+РсПродавец+"' 
	|	КонтрагентНаим='"+НаимПоставщика+"'/>
    |</СведПоставщик>
	|<СведЗаказчик КодСВР='"+ СокрЛП(Контракт.СВРПокупателя) +"' ЗаказчикВключГрузПолуч='false'/>
	|<СведТов " + ?(РаботаСЛекарственнымиПрепаратами, "ОтрСпец='2'", "") + ">";
				
	ИдМестаПоставки = Строка(Новый УникальныйИдентификатор);
	ИдМестаПоставки = СтрЗаменить(ИдМестаПоставки, "-", "");

	Для Каждого Товар Из мсКонтрактныеТовары Цикл
		
		Если Не ЗначениеЗаполнено(Товар.ТипОбъектаЗакупки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Товар.ВнешнийИдентификатор) Тогда 
			ВнешнийИдентификатор = " ВнешТехИдТРУ='"+ СокрЛП(Товар.ВнешнийИдентификатор)+"' ";
		Иначе
			ВнешнийИдентификатор = "";
		КонецЕсли;
		
		Если Товар.ТипОбъектаЗакупки = Перечисления.еисТипыОбъектовЗакупки.PRODUCT Тогда
			
			СтранаПроисхождения = Товар.СтранаПроисхождения;
			СведенияОСтранеПроисхождения = "<СтранаПроисх Код='"+СтранаПроисхождения.Код+"' Наим='"+СтранаПроисхождения.Наименование+"'/>";
			
			СтранаПроизводства  = Товар.СтранаПроизводства;
			Если ЗначениеЗаполнено(СтранаПроизводства) Тогда
				СведенияОСтранеПроизводства = "<СтранаПроизв Код='"+СтранаПроизводства.Код+"' Наим='"+СтранаПроизводства.Наименование+"'/>";	
			Иначе
				СведенияОСтранеПроизводства = "";	
			КонецЕсли;
		Иначе
			СведенияОСтранеПроисхождения = "";	
			СведенияОСтранеПроизводства = "";
		КонецЕсли;
		
		Приложение = Приложение + "
		|        <СведТРУ>
		|            <НедеталТРУ 
		|	ИдТРУ='"+ ?(РаботаСЛекарственнымиПрепаратами, 
					СокрЛП(Товар.GuidЛекарственногоПрепарата), СокрЛП(Товар.Guid)) + "'
		|	ТехИдТРУ='"+ СокрЛП(Товар.Идентификатор) + "' 
		|   "+ ВнешнийИдентификатор +"
		|	НаимТовИсх='"+ СокрЛП(Товар.Наименование) +"'>";
				
		СтрокиПоТовару = тзКонтрактныеТовары.НайтиСтроки(Новый Структура("Товар", Товар));
		Для Каждого Стр Из СтрокиПоТовару Цикл

			ЭАИдТРУ = Строка(Новый УникальныйИдентификатор);
			ЭАИдТРУ = СтрЗаменить(ЭАИдТРУ, "-", "");
			
			
			Если НЕ РаботаСЛекарственнымиПрепаратами Тогда    
				
				Приложение = Приложение + "
				|                <НеЛПСвед 
				|	НомСтр='"+Стр.НомерСтроки+"' 
				|	ЭАИдТРУ='"+ЭАИдТРУ+"' 
				|	ЦенаИзКонтСНДС='"+Формат(Стр.Цена, ФорматнаяСтрокаЧиселКВыгрузке())+"'
				|	ПрУлучшХаракт='" + ?(Не Товар.ПрУлучшХаракт, 1, 2) + "'" + ?(Стр.ЗавершениеАктирования, " АктирЗаверш='true'", "") + ">
				|                    " + СведенияОСтранеПроисхождения + "
				|					 " + СведенияОСтранеПроизводства;
				Приложение = Приложение + "
				|                </НеЛПСвед>";
				
				// Можно указывать сведения о месте поставки по стркоам товаров. Используется в Мастмедика ООО
				//Приложение = Приложение + "
				//|   <СведПоставкиТов 
				//|		ИдМестаПоставки='" + ИдМестаПоставки + "' 
				//|		ПостКол='" + Формат(Стр.КоличествоУпаковок, ФорматнаяСтрокаЧиселКВыгрузке()) + "'/>
				//|                </НеЛПСвед>";
				
			Иначе 
				//Это Лекарства
				Приложение = Приложение + "
				|<ЛПСвед НомСтр='" + Стр.НомерСтроки + "'
	            |        ИдЛП='" + ЭАИдТРУ + "'
	            |        ЦенаЗаУпакСНДС='" + Формат(Стр.Цена, ФорматнаяСтрокаЧиселКВыгрузке()) + "'
	            |        СерияЛекПреп='" + Стр.Серия.Номер + "'
	            |        СрокГодн='" + Формат(Стр.Серия.ГоденДо, "ДФ=dd.MM.yyyy") + "'>
	            |   <ПозицПоМНН МНН='" + ЗаменитьСпецСимволы(Товар.МНН )+ "'
	            |               ТН='" + ЗаменитьСпецСимволы(Товар.ТорговоеНаименование) + "'
	            |               ЛекФорм='" + Товар.ЛекартсвеннаяФорма + "'/>
	            |   <ДозСвед Наим='" + Товар.ЕдИзмДозы+"' Знач='" + Формат(Товар.Дозировка, ФорматнаяСтрокаЧиселКВыгрузке()) +"'/>
	            |   <ПотребЕдИзмСвед Наим='" + Товар.НаименованиеПотребительскойЕдИзм + "' Колич='" + 
							Формат(Стр.КоличествоУпаковок * Товар.КоличПотребЕдВПотребУпак, ФорматнаяСтрокаЧиселКВыгрузке()) + "'>
	            |      <ОКЕИ Код='" + СокрЛП(Товар.ПотребительскаяЕдИзм.Код) + "' НацУслОбоз='" + Товар.ПотребительскаяЕдИзм.Наименование + "' Наим='" + 
								Товар.ПотребительскаяЕдИзм.НаименованиеПолное + "'/>
	            |   </ПотребЕдИзмСвед>
	            |   <УпакСвед ВидПервУпак='" + Товар.УпаковкаНаименование + "'
	            |             КоличЛекФормВПервУпак='" + Формат(Товар.КоличЛекФормВПервУпак, ФорматнаяСтрокаЧиселКВыгрузке()) + "'
	            |             КоличПервУпакВПотребУпак='" + Формат(Товар.КоличПервУпакВПотребУпак, ФорматнаяСтрокаЧиселКВыгрузке()) + "'
	            |             КоличПотребЕдВПотребУпак='" + Формат(Товар.КоличПотребЕдВПотребУпак, ФорматнаяСтрокаЧиселКВыгрузке()) + "'/>
	            |             " + СведенияОСтранеПроисхождения + "
				|			  " + СведенияОСтранеПроизводства;

								
				Если Товар.ЖНВЛП Тогда
					
					ЦенаБезНДС = Стр.ЦенаБезНДС;	
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	УАС_ЦеныПоставщиковСрезПоследних.ЦенаЗарегистрированнаяПроизводителем КАК ЦенаЗарегистрированнаяПроизводителем,
						|	УАС_ЦеныПоставщиковСрезПоследних.ЦенаБезНДС КАК ЦенаБезНДС,
						|	УАС_ЦеныПоставщиковСрезПоследних.ЦенаСНДС КАК ЦенаСНДС
						|ИЗ
						|	РегистрСведений.УАС_ЦеныПоставщиков.СрезПоследних(
						|			&Дата,
						|			Номенклатура = &Номенклатура
						|				И Серия = &Серия) КАК УАС_ЦеныПоставщиковСрезПоследних
						|ГДЕ
						|	УАС_ЦеныПоставщиковСрезПоследних.ДанныеПроизводителя";
					
					Запрос.УстановитьПараметр("Дата", Докум.Дата);
					Запрос.УстановитьПараметр("Номенклатура", Стр.Номенклатура);
					Запрос.УстановитьПараметр("Серия", Стр.Серия);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					Выборка = РезультатЗапроса.Выбрать();
					
					Если Выборка.Следующий() Тогда
						
						Наценка = ?(ЦенаБезНДС - Выборка.ЦенаБезНДС > 0, ЦенаБезНДС - Выборка.ЦенаБезНДС, 0);
						НаценкиПроцент = ?(Наценка>0, Окр(Наценка/Выборка.ЦенаБезНДС * 100, 2), 0);
						
						Приложение = Приложение + "				
						|   <ЖНВЛП ФактОтпЦена='" + Формат(Выборка.ЦенаБезНДС, ФорматнаяСтрокаЧиселКВыгрузке()) + "'
				        |          ЗарегПредОтпЦена='" + Формат(Выборка.ЦенаЗарегистрированнаяПроизводителем, ФорматнаяСтрокаЧиселКВыгрузке()) + "'
				        |          СуммРазмФактОптНадбРуб='" + Формат(Окр(Наценка, 2), ФорматнаяСтрокаЧиселКВыгрузке()) + "'
				        |          СуммРазмФактОптНадбПроц='" + Формат(НаценкиПроцент, ФорматнаяСтрокаЧиселКВыгрузке()) + "'/>";
					Иначе
						СообщитьИнфо("["+Докум+"] Не найдены данные по зарегестрированным ценам поставщика по номенлатуре " + Стр.Номенклатура);
					КонецЕсли;
					
				КонецЕсли;
				Приложение = Приложение + "
	            |   <СведПоставкиТов 
				|		ИдМестаПоставки='" + ИдМестаПоставки + "' 
				|		ПостКол='" + Формат(Стр.КоличествоУпаковок, ФорматнаяСтрокаЧиселКВыгрузке()) + "'/>
	            |</ЛПСвед>";
			КонецЕсли;
			
		КонецЦикла;
		
		Приложение = Приложение + "
		|            </НедеталТРУ>
		|        </СведТРУ>";
		
	КонецЦикла;
	
	МестоПоставки = ?(ЗначениеЗаполнено(СведенияПоГрузополучателю.АдресГрузополучателя), 
		СведенияПоГрузополучателю.АдресГрузополучателя, СведенияПоПлательшику.ЮридическийАдрес);
		
	Приложение = Приложение + "
	|    </СведТов>
	|    <СведМестаПоставки>
	|        <СведМестоПоставки 
	|			ИдМестаПоставки='"+ИдМестаПоставки+"' 
	|			Место='"+МестоПоставки+"' 
	|			ИнфДляУчаст='"+?(ДобавитьСведенияОГрузополучателе, 1, 0)+"'>";
	
	МестоПоставкиПоГАР = ДанныеДляФормированияПакета.МестоПоставкиПоГАР;
	Если ЗначениеЗаполнено(МестоПоставкиПоГАР) Тогда
		
		Приложение=Приложение+"
		|		<ПоГАР СтрокаГАР='"+ СокрЛП(МестоПоставкиПоГАР.ПолноеНаименование) +"'>
        //|		    МестоДопСвед='" + МестоПоставки + "'>
        |			<Страна Код='643' Наим='Российская Федерация'/>
		|				<АдрГАР ИдНом='" + МестоПоставкиПоГАР.GUID + "'/>
        //|			<АдрОКТМО Код='"+СокрЛП(МестоПоГАР.ОКТМО)+"' Наим='" + СокрЛП(МестоПоГАР.Наименование) + "'/>
		|		</ПоГАР>";
	ИначеЕсли ЗначениеЗаполнено(Контракт.ОКТМОКод) Тогда
			Приложение = Приложение + "
				|			 <ПоОКТМО Адрес='" + ЗаменитьСпецСимволы(СокрЛП(Контракт.МестоПоставки)) + "'
			    |              Код='" + СокрЛП(Контракт.ОКТМОКод) + "'
			    |              Наим='" + ЗаменитьСпецСимволы(СокрЛП(Контракт.ОКТМОНаименование)) + "'/>";
	Иначе 
		
		КодРегиона = "";
		Если ЗначениеЗаполнено(МестоПоставки) Тогда
			
			Индекс = Лев(СокрЛП(МестоПоставки), 3);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	кб99_КодыРегионаПоИндексу.КодРегиона КАК КодРегиона
				|ИЗ
				|	РегистрСведений.кб99_КодыРегионаПоИндексу КАК кб99_КодыРегионаПоИндексу
				|ГДЕ
				|	кб99_КодыРегионаПоИндексу.Индекс = &Индекс";
			
			Запрос.УстановитьПараметр("Индекс", Индекс);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				КодРегиона = Выборка.КодРегиона;
			Иначе
				СообщитьИнфо("Не удалось найти соотвествие кода региона началу почтового индекса: "+ Индекс);
				КодРегиона =  ПараметрыОрганизации["АдресПоставщикаКодРегиона"];
			КонецЕсли;;

		Иначе
			КодРегиона =  ПараметрыОрганизации["АдресПоставщикаКодРегиона"];	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КодРегиона) Тогда
			КодРегиона =  ПараметрыОрганизации["АдресПоставщикаКодРегиона"];
			СообщитьИнфо( "Не удалось определить код региона по адресу места поставки: " + МестоПоставки +
			+". Проверьте, указан ли индекс в адресе.");	
		КонецЕсли;
		
		КодРегионаПоКЛАДР = КодРегиона + "000000000";
		
		Приложение=Приложение+"
		|        <ПоКЛАДР>
		|            <КЛАДР Код='"+ КодРегионаПоКЛАДР +"'/>
		|        </ПоКЛАДР>"; 
		
	КонецЕсли;
		
	Приложение = Приложение + "
	|        </СведМестоПоставки>
	|    </СведМестаПоставки>";
	
	Для Каждого ЗагруженныйФайл Из ПрикрепленныеФайлы Цикл
		
		ФайлИД = ЗагруженныйФайл.Id;
		ФайлХэш = ЗагруженныйФайл.Hash;
		ФайлИмя = СокрЛП(ЗагруженныйФайл.FileName);
		ФайлРасширение = ПолучитьРасширениеИмениФайла(ФайлИмя);
		ФайлВид = ЗагруженныйФайл.Вид;
		ФайлНаименование = ЗагруженныйФайл.Наименование;
		
		Если ЗначениеЗаполнено(ФайлИД) Тогда
			
			Приложение = Приложение + "
			|    <Вложен 
			|	КонтентИд='"+ ФайлИД +"'
			|	ИмяФайл='"+ФайлИмя+"'
			|	ХэшФайл='"+ФайлХэш+"'
			|	РасширенФайл='"+ФайлРасширение+"' 
			|		ДатаПрикреплен='"+ ТекущаяДатаВремяСтрока() +"'>
			|        <ВидДок Код='"+ФайлВид+"' Наим='"+ФайлНаименование+"'/>
			|    </Вложен>";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Приложение = Приложение + "
	|	<Подписант ЛогинПрод='"+ПараметрыОрганизации["ПодписантЛогин"]+"' ПорядНом='1'/> 
	|</ФайлУПДПрод>";
	
	ИмяФайла = КаталогФайлов+ИмяФайлаПрил;
	ФайлПрил = Новый Структура("ИмяФайла, Запрос", ИмяФайла, Приложение);
	ФайлыПакета.Добавить(ФайлПрил);

	Результат.Вставить("ИмяФайла1", ИмяФайла1);
	Результат.Вставить("ИмяФайлаПрил", ИмяФайлаПрил);
	Результат.Вставить("ФайлыПакета", ФайлыПакета);
	Результат.Вставить("guid", guid);
	Результат.Вставить("НомерПоставщика", НомерПоставщика);
	Результат.Вставить("НомерКонтрагента", НомерКонтрагента);
	Результат.Вставить("Подписать", Подписать);
	Результат.Вставить("тзФайлыВложений", ПрикрепленныеФайлы);
	Результат.Вставить("ПараметрыОрганизации", ПараметрыОрганизации);
	Результат.Вставить("ОшибкаФормирования", Отказ);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьПакетПоСчету(Подписать = Ложь, Докум, ПолучитьОтветЕИС = Ложь, ПараметрыОрганизации, ПрикрепленныеФайлы) Экспорт
	
	//Если Компонента = Неопределено Тогда
	//	Компонента = ИнициализацияКомпоненты();
	//КонецЕсли;
	
	Отказ = Ложь;
	Результат = Новый Структура();
	//ПараметрыОрганизации = ПолучитьСтруктуруПараметров(Докум.Организация);
	
	Контракт = Докум.ДоговорКонтрагента.еисКонтракт;
	
	Если Не ЗначениеЗаполнено(Контракт) Тогда
		СообщитьИнфо("Не выбран контракт в договоре " + Докум.ДоговорКонтрагента,,,,Отказ);
	КонецЕсли;
	
	Поставщик 		 = Докум.ДоговорКонтрагента.Агент;
	Грузополучатель	 = Докум.Контрагент;
	Контрагент		 = Докум.Контрагент;
	ТекДата			 = Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	ТекВремя 		 = ТекущееВремяСтрока();
	ДатаНачалаПериода		= Формат(Докум.НачПериода, "ДФ=dd.MM.yyyy");
	ДатаОкончанияПериода	= Формат(Докум.КонПериода, "ДФ=dd.MM.yyyy");
	ДатаАкта				= Формат(Докум.Дата, "ДФ=dd.MM.yyyy");
	НомерДок		 = Докум.Номер;
	ДатаДок          = Формат(Докум.Дата, "ДФ=dd.MM.yyyy");
	ДатаСтрока		 = Преобразовать_Дата_в_Строка_Сокращенная( Докум.Дата );
	
	//Структура("Представление, ПолноеНаименование, НаименованиеСокращенное, КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, Банк, БИК, КоррСчет, НомерСчета, АдресБанка");
	//СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Поставщик, ТекущаяДатаСеанса());
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Поставщик, ТекущаяДатаСеанса());
	ПроверитьЗаполнениеРеквизитовЮрЛица(СведенияОбОрганизации, Поставщик, Отказ, Истина);	
	
	Плательщик = ?(ЗначениеЗаполнено(Грузополучатель.ГоловнойКонтрагент), Грузополучатель.ГоловнойКонтрагент, Грузополучатель);
	СведенияПоПлательшику = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Плательщик, ТекущаяДата());
	СведенияПоПлательшику.КодПоОКПО = ?(ЗначениеЗаполнено(Контракт.ОКПОПокупателя), Контракт.ОКПОПокупателя, СведенияПоПлательшику.КодПоОКПО);
	ПроверитьЗаполнениеРеквизитовЮрЛица(СведенияПоПлательшику, Плательщик, Отказ, Ложь);	
	
	Если ЗначениеЗаполнено(Грузополучатель) Тогда
		СведенияПоГрузополучателю = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Грузополучатель, ТекущаяДата());
	Иначе
		СведенияПоГрузополучателю = СведенияПоПлательшику;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// ПОСТАВЩИК
	ИННПоставщика = СведенияОбОрганизации.ИНН;
	КПППоставщика = СведенияОбОрганизации.КПП;
	ПоставщикЭтоИП = СтрДлина(ИННПоставщика) = 12;
	
	Почта = "";
	Телефон = СведенияОбОрганизации.Телефоны;
	
	Если ЗначениеЗаполнено(Телефон) Тогда
		ТелефонСтр = " <Тлф>"+ СокрЛП(Телефон) +"</Тлф>";
	КонецЕсли;
	Если ЗначениеЗаполнено(Почта)
			Или ЗначениеЗаполнено(Телефон) Тогда
		ПочтаСтр = " <ЭлПочта>"+ Почта +"</ЭлПочта>";
		СтрКонтакты = " <Контакт>" + Символы.ПС + ?(ЗначениеЗаполнено(Телефон), ТелефонСтр, "") +
			?(ЗначениеЗаполнено(Телефон), Символы.ПС, "") +
			?(ЗначениеЗаполнено(Почта), ПочтаСтр, "") + 
			?(ЗначениеЗаполнено(Почта), Символы.ПС, "") + 
			"</Контакт>";
	КонецЕсли;	
	
	РсПродавец = СведенияОбОрганизации.НомерСчета;
	БанкПродавец = ЗаменитьСпецСимволы(СведенияОбОрганизации.Банк.Наименование); 
	БикПродавец = СокрЛП(СведенияОбОрганизации.БИК); 
	КорСчетПродавец = СведенияОбОрганизации.КоррСчет; 
	
	АдресПоставщикаXML = ПолучитьXMLАдресПоставщика( СведенияОбОрганизации.ФактическийАдрес, ПараметрыОрганизации );
	
	//ПоставщикНаименование = ЗаменитьСпецСимволы(ПараметрыОрганизации["ПоставщикНаименование"]);
	ПоставщикНаименование = ПараметрыОрганизации["ПоставщикНаименование"];
	ПодписантФамилия = ПараметрыОрганизации["ПодписантФамилия"];
	ПодписантИмя = ПараметрыОрганизации["ПодписантИмя"];
	ПодписантОтчетство = ПараметрыОрганизации["ПодписантОтчество"];
	
	// ПОКУПАТЕЛЬ
	Попытка РСПокупателя = СведенияПоПлательшику.НомерСчета; Исключение РСПокупателя = "" КонецПопытки;
	Попытка БанкПокупателя = СведенияПоПлательшику.Банк.Наименование; Исключение БанкПокупателя = "" КонецПопытки;
	Попытка БИКБанкаПокупателя = СведенияПоПлательшику.БИК; Исключение БИКБанкаПокупателя = "" КонецПопытки;
	КорСчетПокупателя = ?(ЗначениеЗаполнено(СведенияПоПлательшику.КоррСчет), " КорСчет='"+СведенияПоПлательшику.КоррСчет+"' ", ""); 
	
	Если ЗначениеЗаполнено(РСПокупателя) Тогда
		БанкРекв = "
		|                <БанкРекв НомерСчета='"+ РСПокупателя +"'>
		|                    <СвБанк НаимБанк='"+ БанкПокупателя +"' БИК='"+БИКБанкаПокупателя+"' "+КорСчетПокупателя+"/>
		|                </БанкРекв>";
	Иначе
		БанкРекв = "";
	КонецЕсли;

	ФактАдрес = СведенияПоПлательшику.ФактическийАдрес;
	КодРегионаПоКЛАДР = ПараметрыОрганизации["АдресПоставщикаКодРегиона"] + "000000000";	
	АдресПокупателяXML = АдресXML( ФактАдрес, ПараметрыОрганизации );
	
	ИННпокупателя = СведенияПоПлательшику.ИНН;
	КПППокупателя = СведенияПоПлательшику.КПП;
	ОКПО = СведенияПоПлательшику.КодПоОКПО;
	
	НомерКонтракта = СокрЛП(Контракт.НомерКонтракта);
	ДатаКонтракта = Формат(Контракт.ДатаЗаключения, "ДФ=dd.MM.yyyy");
	НомерКонтрагента = "2ZK-CUS-"+СокрЛП(Контракт.РегНомерКонтрагента);
	НомерПоставщика = "2ZK-SUP-000"+ ПараметрыОрганизации["РегНомер"];
	
	ИдГосКон = "";
	Если ЗначениеЗаполнено(Контракт.ИГК) Тогда
		ИдГосКон = " ИдГосКон= '" + СокрЛП(Контракт.ИГК) + "'";
	КонецЕсли;
	
	идЗакупки = СокрЛП(Контракт.идЗакупки);
	РеестровыйНомерКонтракта = СокрЛП(Контракт.РеестровыйНомерКонтракта);
	ИдентификаторКонтракта = СокрЛП(Контракт.Идентификатор);
	СокрНаименованиеПокупателя = СокрЛП(Контракт.СокращенноеНаименованиеКонтрагента);
	ПолноеНаименованиеПокупателя = СокрЛП(Контракт.ПолноеНаименованиеКонтрагента);
	
	guid = Новый УникальныйИдентификатор;
	
	Маркировка = Ложь;
	ПрефиксДокумента = "ON_NSCHFDOPPR_";

	ИдФайла = ПрефиксДокумента+НомерКонтрагента+"_"+НомерПоставщика+"_"+ДатаСтрока+"_"+guid+"_0_0_0_0_0_00";
	
	тхт = Новый ТекстовыйДокумент;
	//тхт.КодоваяСтраница(0);
	Запрос = "<?xml version=""1.0"" encoding=""WINDOWS-1251"" standalone=""yes"" ?>
	|<Файл ИдФайл='"+ИдФайла+"' ВерсФорм='5.03' ВерсПрог='1С:Предприятие 8.3'>
	|    <Документ КНД='1115131' Функция='ДОП' ПоФактХЖ='Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)' "+
		"НаимДокОпр='Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)' "+
		"НаимЭконСубСост='"+ ПоставщикНаименование +
		"' СоглСтрДопИнф='0000.0000.0000' ДатаИнфПр='"+ ТекДата +"' ВремИнфПр='"+ТекВремя+"'>  
	|        <СвСчФакт НомерДок='"+НомерДок+"' ДатаДок='"+ ТекДата +"'>
	|            <СвПрод СокрНаим='"+ ПоставщикНаименование +"'>
	|                <ИдСв>";
	Если ПоставщикЭтоИП Тогда
		Если Не Контракт.ПодконтрольныеТовары Тогда
			Запрос=Запрос+"
			|                 	<СвИП ИННФЛ='"+ИННПоставщика+"'>
			|						<ФИО Фамилия='"+ ПодписантФамилия +"' Имя='"+ ПодписантИмя +"' Отчество='"+ ПодписантОтчетство +"' />
			|					</СвИП>";
		Иначе
			Запрос=Запрос+"
			|                 	<СвФЛУчастФХЖ ИННФЛ='"+ИННПоставщика+"'>
			|						<ФИО Фамилия='"+ ПодписантФамилия +"' Имя='"+ ПодписантИмя +"' Отчество='"+ ПодписантОтчетство +"' />
			|					</СвФЛУчастФХЖ>";
		КонецЕсли;
	Иначе
		Запрос=Запрос+"
	|                    	<СвЮЛУч НаимОрг='"+ПоставщикНаименование+"' ИННЮЛ='"+ИННПоставщика+"' КПП='"+КПППоставщика+"'/>"
	КонецЕсли;
	Запрос=Запрос+"
	|                </ИдСв>
	|                <Адрес>"+ АдресПоставщикаXML +"</Адрес>  
	//|                <Контакт "+ Телефон +" ЭлПочта='"+ Почта +"'/>
	|" + СтрКонтакты + "
	//|                <БанкРекв НомерСчета='"+ РсПродавец +"'>
	//|                    <СвБанк НаимБанк='"+ БанкПродавец +"' БИК='"+ БикПродавец+
	//					"' КорСчет='"+ КорСчетПродавец +"'/>
	//|                </БанкРекв>
	|            </СвПрод>";
	
	Если ЗначениеЗаполнено(ПараметрыОрганизации["ГрузоотправительИННИП"]) Тогда 
		Запрос=Запрос+"	
		|     <ГрузОт>
        |        <ГрузОтпр>
        |            <ИдСв>
        |                <СвИП ИННФЛ='"+ ПараметрыОрганизации["ГрузоотправительИННИП"] +"'>
        |                    <ФИО Фамилия='"+ПараметрыОрганизации["ГрузоотправительФамилия"]+"' 
		|						  Имя='"+ПараметрыОрганизации["ГрузоотправительИмя"]+"' 
		|						  Отчество='"+ПараметрыОрганизации["ГрузоотправительОтчество"]+"'/>
        |                </СвИП>
        |            </ИдСв>
        |            <Адрес>
        |                <АдрИнф КодСтр='643' НаимСтран='РОССИЯ' АдрТекст='"+ПараметрыОрганизации["ГрузоотправительАдресИП"]+"'/>
        |            </Адрес>
        |            <Контакт/>
        |        </ГрузОтпр>
        |    </ГрузОт>";
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОрганизации["ГрузоотправительИННООО"]) Тогда 
		Запрос=Запрос+"	
		|     <ГрузОт>
        |        <ГрузОтпр>
        |            <ИдСв>
		|		<СвЮЛУч НаимОрг='"+ ЗаменитьСпецСимволы(ПараметрыОрганизации["ГрузоотправительНазваниеООО"]) +"' 
		|	ИННЮЛ='"+ ПараметрыОрганизации["ГрузоотправительИННООО"] +"' 
		|	КПП='"+ПараметрыОрганизации["ГрузоотправительКППООО"] +"'/>
        |            </ИдСв>
        |            <Адрес>
        |                <АдрИнф КодСтр='643' НаимСтран='РОССИЯ' АдрТекст='"+ПараметрыОрганизации["ГрузоотправительАдресООО"]+"'/>
        |            </Адрес>
        |            <Контакт/>
        |        </ГрузОтпр>
        |    </ГрузОт>";
	КонецЕсли;
	
	ДобаитьСведенияОГрузополучателе = ЕстьГрузополучатель(Докум, ФактАдрес);
	АдресГрузополучателя = "";
	Если ДобаитьСведенияОГрузополучателе Тогда
		
		АдресГрузополучателя = ?(ЗначениеЗаполнено(Докум.АдресДоставки), СокрЛП(Докум.АдресДоставки), СведенияПоГрузополучателю.ФактическийАдрес);
		
		Запрос=Запрос+"
		|<ГрузПолуч СокрНаим='"+ ЗаменитьСпецСимволы( Грузополучатель.Наименование ) + "' ИнфДляУчаст='1'>
		|	<ИдСв>
		|		<СвЮЛУч ИННЮЛ='"+ СокрЛП(Грузополучатель.ИНН) +"' НаимОрг='"+ЗаменитьСпецСимволы( Грузополучатель.НаименованиеПолное )+"'/>
		|	</ИдСв>
		|	<Адрес>
		|		<АдрИнф АдрТекст='"+СокрЛП(АдресГрузополучателя)+"' КодСтр='643' НаимСтран='РОССИЯ'/>
		|	</Адрес>
		|	<Контакт/>
		|</ГрузПолуч>";
		
	КонецЕсли;

	Запрос=Запрос+"	
	|            <ДокПодтвОтгрНом РеквНаимДок='Документ о приемке' РеквНомерДок='"+НомерДок+"' РеквДатаДок='"+ ТекДата +"'/>
	|            <СвПокуп ОКПО='"+ ОКПО +"' ИнфДляУчаст='0' СокрНаим='"+ СокрНаименованиеПокупателя +"'>
	|                <ИдСв>
	|                    <СвЮЛУч НаимОрг='"+  ПолноеНаименованиеПокупателя +"' ИННЮЛ='"+ИННпокупателя+"' КПП='"+КПППокупателя+"'/>
	|                </ИдСв>
	|                <Адрес>"+ АдресПокупателяXML +"</Адрес> " + БанкРекв + "
	//|                <БанкРекв НомерСчета='"+ РСПокупателя +"'>
	//|                    <СвБанк НаимБанк='"+ БанкПокупателя +"' БИК='"+БИКБанкаПокупателя+"' "+КорСчетПокупателя+"/>
	//|                </БанкРекв>
	|            </СвПокуп>
	|			 <ДенИзм КодОКВ='643' НаимОКВ='РОССИЙСКИЙ РУБЛЬ'/>
	|            <ДопСвФХЖ1 " + ИдГосКон + ">
	|                <ИнфПродЗаГоскКазн ДатаГосКонт='"+ДатаКонтракта+"' НомерГосКонт='"+НомерКонтракта+"'/>
	|            </ДопСвФХЖ1>
	|        </СвСчФакт>
	|        <ТаблСчФакт>";
	
	
	СтоимостьВсего = 0;
	СтоимостьБезНДСВсего = 0;
	НДСВсего = 0;
	
	тзКонтрактныеТовары = Новый ТаблицаЗначений;
	тзКонтрактныеТовары.Колонки.Добавить("НомерСтроки");
	тзКонтрактныеТовары.Колонки.Добавить("Товар");
	тзКонтрактныеТовары.Колонки.Добавить("НаименованиеТовара");
	тзКонтрактныеТовары.Колонки.Добавить("КодТовара");
	тзКонтрактныеТовары.Колонки.Добавить("Цена");
	
	НомерСтроки = 0;
	Для каждого СтрДок Из Докум.Товары Цикл
		
		Номенклатура = СтрДок.Номенклатура;
		
		КонтрактныйТовар = ПолучитьКонтрактныйТоварПоНоменклатуре(Контракт, Номенклатура, ПараметрыОрганизации);
		//КонтрактныйТовар = СтрДок.ЕИС_КонтрактныйТовар;
		
		Если ЗначениеЗаполнено(КонтрактныйТовар) Тогда
			
			Если СтрДок.Цена <> КонтрактныйТовар.Цена Тогда
			    СообщитьИнфо("Цена товара ["+Номенклатура+"] = "+ СтрДок.Цена +" отличается от цены контракта = "+КонтрактныйТовар.Цена);
				//Возврат "";
			КонецЕсли; 
			
			НаименованиеТовара = КонтрактныйТовар.Наименование;
			КодТовара = ?(ЗначениеЗаполнено(КонтрактныйТовар.КТРУКод), КонтрактныйТовар.КТРУКод, КонтрактныйТовар.ОКПД2Код);
			
			НомерСтроки = НомерСтроки + 1;
			нСтрокаИтог = тзКонтрактныеТовары.Добавить();
			нСтрокаИтог.НомерСтроки = НомерСтроки;
			нСтрокаИтог.Товар = КонтрактныйТовар;
			нСтрокаИтог.НаименованиеТовара = НаименованиеТовара;
			нСтрокаИтог.КодТовара = КодТовара;
			//нСтрокаИтог.Цена = СтрДок.Цена;
			нСтрокаИтог.Цена = КонтрактныйТовар.Цена;
			
			Вес = 1;
			СтоимостьБезНДС = СтрДок.Сумма - СтрДок.СуммаНДС;			
			СуммаСНДС = СтрДок.Сумма;
			ЦенаБезНДС = Окр( СтрДок.Цена/Вес, 2, 1);
			СуммаНДС = СтрДок.СуммаНДС;
            НДСВсего = НДСВсего + СуммаНДС;
			
		    Количество = СтрДок.Количество * ?(СтрДок.Коэффициент = 0, 1, СтрДок.Коэффициент) * Вес;
			
			//Если ( ( ПустоеЗначение(Докум.СтавкаНДС)=1 ) или ( Докум.СтавкаНДС=Перечисление.СтавкиНДС.БезНДС ) ) Тогда
			    		

			Запрос = Запрос+"
			|            <СведТов НомСтр='"+ СтрДок.НомерСтроки +"' НаимТов='"+ НаименованиеТовара +
				"' ОКЕИ_Тов='"+ СокрЛП(КонтрактныйТовар.ЕдиницаИзмерения.Код) +"' КолТов='"+ Формат(Количество, ФорматнаяСтрокаЧиселКВыгрузке()) +"' ЦенаТов='"+ Формат(ЦенаБезНДС, ФорматнаяСтрокаЧиселКВыгрузке()) +
				"' СтТовБезНДС='"+Формат(СтоимостьБезНДС, ФорматнаяСтрокаЧиселКВыгрузке())+"' НалСт='"+ СокрЛП(КонтрактныйТовар.СтавкаНДС) +"' СтТовУчНал='"+ Формат(СуммаСНДС, ФорматнаяСтрокаЧиселКВыгрузке()) +"'>";
			
			//МаркировкаПоНоменкалтуре = Докум.ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("Номенклатура", СтрДок.Номенклатура));
			//Если МаркировкаПоНоменкалтуре.Количество() Тогда
			//					
			//	Запрос = Запрос + "
			//		|<ДопСведТов ПрТовРаб='1' КодТов='"+ СокрЛП(КодТовара) +"'>
			//		|	<НомСредИдентТов>";
			//
			//	Для Каждого СтрКМ Из МаркировкаПоНоменкалтуре Цикл
			//		Запрос = Запрос + "
			//		|		<КИЗ>" + ЗаменитьСпецСимволы(СтрКМ.КодМаркировки) + "</КИЗ>";
			//	КонецЦикла;
			//	
			//	Запрос = Запрос + "
			//		|	</НомСредИдентТов>
			//		|</ДопСведТов>";				
			//Иначе
				Запрос = Запрос + "
				|		<ДопСведТов ПрТовРаб='1' КодТов='"+ СокрЛП(КодТовара) +"'/>";
			//КонецЕсли;

			Запрос = Запрос+"
			|                <Акциз>
			|                    <БезАкциз>без акциза</БезАкциз>
			|                </Акциз>
			|                <СумНал>";
			
			Если СуммаНДС = "без НДС" Тогда
				Запрос = Запрос+"
				|                <БезНДС>"+ СуммаНДС +"</БезНДС>";
			Иначе
				Запрос = Запрос+"
				|                    <СумНал>"+ СуммаНДС +"</СумНал>";
			КонецЕсли;
								
			Запрос = Запрос + "
			|				 </СумНал>
			|            </СведТов>";
			СтоимостьВсего = СтоимостьВсего + СуммаСНДС;
			СтоимостьБезНДСВсего = СтоимостьБезНДСВсего + СтоимостьБезНДС;
					
		Иначе
			СообщитьИнфо("По номенклатуре ["+ Номенклатура +"] не найдено соответствие контрактному товару");
			Возврат Неопределено;
		КонецЕсли;
			
	КонецЦикла;
	
	мсКонтрактныеТовары = тзКонтрактныеТовары.ВыгрузитьКолонку("Товар");
	мсКонтрактныеТовары = СвернутьМассив(мсКонтрактныеТовары);
	
	НДСВсего = Формат(НДСВсего, ФорматнаяСтрокаЧиселКВыгрузке());
	Запрос = Запрос +"
	|            <ВсегоОпл СтТовБезНДСВсего='"+Формат(СтоимостьБезНДСВсего, ФорматнаяСтрокаЧиселКВыгрузке())+"' СтТовУчНалВсего='"+Формат(СтоимостьВсего, ФорматнаяСтрокаЧиселКВыгрузке())+"'>
	|                <СумНалВсего>";
	Если НДСВсего = 0 Тогда
		Запрос = Запрос +"
		|                    <БезНДС>без НДС</БезНДС>";
	Иначе
		Запрос = Запрос +"
		|                    <СумНал>"+НДСВсего+"</СумНал>";
	КонецЕсли;	
	Запрос = Запрос +"
	|                </СумНалВсего>
	|            </ВсегоОпл>
	|        </ТаблСчФакт>
	|        <СвПродПер>
	|            <СвПер СодОпер='Работы выполнены в полном объеме' ДатаПер='" + ДатаОкончанияПериода + "'
	|			ДатаНачПер='" + ДатаНачалаПериода + "'
    |            ДатаОконПер='" + ДатаОкончанияПериода + "'>
	|                <ОснПер РеквНаимДок='Контракт' РеквНомерДок='"+НомерКонтракта+"' РеквДатаДок='"+ДатаКонтракта+"' РеквДопСведДок='Реестровый номер в реестре контрактов: "+РеестровыйНомерКонтракта+"'/>
	|                <ОснПер РеквНаимДок='Акт сдачи-приемки товара' РеквНомерДок='"+НомерДок+"' РеквДатаДок='"+ДатаДок+"'/>";
	//Запрос = Запрос +"
	//|                <СвЛицПер>
	//|				<ИнЛицо>
	//|             		 <ПредОргПер Должность='Руководитель'
	//|                          НаимОргПер='" + Докум.Организация + "'
	//|						   ИННЮЛПер='"+ИННПоставщика+"'>
	//|              	   		<ФИО Фамилия='"+ПодписантФамилия+"' Имя='"+ПодписантИмя+"' Отчество='"+ПодписантОтчетство+"'/>
	//|              		 </ПредОргПер>
	//|				</ИнЛицо>
	//|                	<РабОргПрод Должность='" + ПараметрыОрганизации["ПодписантДолжность"] + "'>
	//|                  	  <ФИО Фамилия='"+ПодписантФамилия+"' Имя='"+ ПодписантИмя +"' Отчество='"+ ПодписантОтчетство +"'/>
	//|                	</РабОргПрод>
    //|            	</СвЛицПер>";
	мсГрузополучатели = Новый Массив;
	тзАдресовДоставки = Новый ТаблицаЗначений;
	тзАдресовДоставки.Колонки.Добавить("Адрес");
	тзАдресовДоставки.Колонки.Добавить("ИдМестаПоставки");
	тзАдресовДоставки.Колонки.Добавить("еисГар");
	СтрСвТран = "";
	
	Для Каждого Стр Из Докум.СвязанныеДокументы Цикл
		
		Если мсГрузополучатели.Найти(Стр.Документ.Грузополучатель)=Неопределено Тогда
			мсГрузополучатели.Добавить(Стр.Документ.Грузополучатель);
		КонецЕсли;
		
		СтрСвТран = СтрСвТран +"УПД "+Стр.Документ.Номер+" от "+Формат(Стр.Документ.Дата, "ДФ=dd.MM.yyyy") + " ";
	КонецЦикла;
	Запрос = Запрос +"
	|				 <Тран "+?(ЗначениеЗаполнено(СтрСвТран), "СвТран='"+СтрСвТран+"'", "")+"/>
	|            </СвПер>
	|        </СвПродПер>
	//|        <Подписант ОблПолн='5' Статус='1' ОснПолн='Лицо, уполномоченное действовать без доверенности от имени юридического лица'>";
	|        <Подписант Должн='"+ ПараметрыОрганизации["ПодписантДолжность"] +"' СпосПодтПолном='1' ДопСведПодп='1'> 
	|			<ФИО Фамилия='"+ ПодписантФамилия +"' Имя='"+ ПодписантИмя +"' Отчество='"+ ПодписантОтчетство +"'/>
	|        </Подписант>
	|    </Документ>
	|</Файл>";
	
	тхт.ДобавитьСтроку(Запрос);
	
	ИмяФайла1 = ИдФайла+".xml";
		
	КаталогФайлов = ПараметрыОрганизации["КаталогЛогов"];
	тхт.Записать( КаталогФайлов+ИмяФайла1);
	
	Если ПараметрыОрганизации["ВыводитьПодробнуюИнформацию"] Тогда
		СообщитьИнфо(ТекущееВремяСтрока()+" Записан файл: "+КаталогФайлов+ИмяФайла1);
	КонецЕсли;
	
	тхт = Новый ТекстовыйДокумент;
	//тхт.КодоваяСтраница(0);
	
	ИдФайлаПрил = "PRIL_"+ИдФайла;
	
	ИмяФайлаПрил = "PRIL_"+ИдФайла+".xml";
	
	ТекущийЭтап = Контракт.ТекущийЭтап;
	Если Не ЗначениеЗаполнено(ТекущийЭтап.ВнешнийИдентификатор) Тогда
	    //СообщитьИнфо("Пустое значение Контракт = "+ Контракт+" Этап = "+ТекущийЭтап);
		ВнешТехИдЭтапКонт = ""
	Иначе
		ВнешТехИдЭтапКонт = "' ВнешТехИдЭтапКонт='"+ СокрЛП(ТекущийЭтап.ВнешнийИдентификатор);
	КонецЕсли;
	
	Приложение = "<?xml version=""1.0"" encoding=""windows-1251""?>
	|<ФайлУПДПрод xmlns:xs='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' ИдПрилож='"+
		ИдФайлаПрил+"' ИдФайл='"+ИдФайла+"' ВерсФорм='1.08' РукОрг='1'>
	|    <СведКонт РеестрНомКонт='"+РеестровыйНомерКонтракта+"' ИдВерсКонт='"+ИдентификаторКонтракта+"' "+
				"ИдЭтапКонт='"+ СокрЛП(ТекущийЭтап.GUID) +"' ТехИдЭтапКонт='"+СокрЛП(ТекущийЭтап.Идентификатор)+  ВнешТехИдЭтапКонт +"' ИКЗ='"+идЗакупки+"'/>
	|<СведПоставщик>"+?(ЗначениеЗаполнено(ПараметрыОрганизации["КодСВР"])," <ЮЛ КодСВР='"+ПараметрыОрганизации["КодСВР"]+"'/>","");
		
	Если ЗначениеЗаполнено(Контракт.ПоставщикGuid) Тогда
		ИдПлатежнРеквКонт = "ИдПлатежнРеквКонт='" + СокрЛП(Контракт.ПоставщикGuid) + "'";
	Иначе
		ИдПлатежнРеквКонт = "";
	КонецЕсли;
	
	Если Контракт.ЭтоГОЗ Тогда
		
		НаимПоставщика = Контракт.ПоставщикНаименование;
		Если Не ЗначениеЗаполнено(НаимПоставщика) Тогда
			НаимПоставщика = ПоставщикНаименование;
		КонецЕсли;
		
	Иначе
		НаимПоставщика = ПоставщикНаименование;
	КонецЕсли;
	
	Приложение = Приложение +"
	|    <БанкРекв " + ИдПлатежнРеквКонт + " ТипСчет='РСБ' БИК='"+
			БикПродавец+"' НаимБанк='"+БанкПродавец+"' КорСчетБанк='"+
				КорСчетПродавец+"' РасчСчет='"+РсПродавец+"' КонтрагентНаим='"+НаимПоставщика+"'/>
    |</СведПоставщик>
	|<СведЗаказчик КодСВР='"+ ?(ЗначениеЗаполнено(Контракт.СВРПокупателя), Контракт.СВРПокупателя,  Контрагент.еисКодСВР) +"' ЗаказчикВключГрузПолуч='false'/>
	|<СведТов>";
	
	Для Каждого Товар Из мсКонтрактныеТовары Цикл
		
		Если ЗначениеЗаполнено(Товар.ВнешнийИдентификатор) Тогда 
			ВнешнийИдентификатор = " ВнешТехИдТРУ='"+ СокрЛП(Товар.ВнешнийИдентификатор)+"' ";
		Иначе
			ВнешнийИдентификатор = "";
		КонецЕсли;
		
		
		СтранаПроисхождения = Товар.СтранаПроисхождения;
		
		Приложение = Приложение + "
		|        <СведТРУ>
		|            <НедеталТРУ ИдТРУ='"+ СокрЛП(Товар.guid) +"' ТехИдТРУ='"+ СокрЛП(Товар.Идентификатор) +
					"' "+ ВнешнийИдентификатор +"НаимТовИсх='"+ СокрЛП(Товар.Наименование) +"'>";
		
		СтрокиПоТовару = тзКонтрактныеТовары.НайтиСтроки(Новый Структура("Товар", Товар));
		Для Каждого Стр Из СтрокиПоТовару Цикл

			ЭАИдТРУ = Строка(Новый УникальныйИдентификатор);
			ЭАИдТРУ = СтрЗаменить(ЭАИдТРУ, "-", "");

			Приложение = Приложение + "
			|                <НеЛПСвед НомСтр='"+Стр.НомерСтроки+"' ЭАИдТРУ='"+ЭАИдТРУ+"' ЦенаИзКонтСНДС='"+Формат(Стр.Цена, ФорматнаяСтрокаЧиселКВыгрузке())+
					"' ПрУлучшХаракт='"+?(Не Товар.ПрУлучшХаракт, 1, 2)+"'>
			|                    <СтранаПроисх Код='" + СокрЛП(СтранаПроисхождения.Код) + "' Наим='" + СокрЛП(СтранаПроисхождения.Наименование) + "'/>
			|                </НеЛПСвед>";
			
		КонецЦикла;
		
		Приложение = Приложение + "
		|            </НедеталТРУ>
		|        </СведТРУ>";
		
	КонецЦикла;
	
	Для Каждого Получатель Из мсГрузополучатели Цикл
		СведенияПоГрузополучателю = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Получатель, ТекущаяДата());
		Если ЗначениеЗаполнено(СведенияПоГрузополучателю.ФактическийАдрес) Тогда
			НовАдрес = тзАдресовДоставки.Добавить();
			НовАдрес.Адрес = СведенияПоГрузополучателю.ФактическийАдрес;
			ИдМестаПоставки = Строка(Новый УникальныйИдентификатор);
			ИдМестаПоставки = СтрЗаменить(ИдМестаПоставки,"-","");
			НовАдрес.ИдМестаПоставки = ИдМестаПоставки;
			НовАдрес.еисГАР = Получатель.еисГАР;
		Иначе
			СообщитьИнфо("У грузополучателя "+Получатель+" не указан фактический адрес",Получатель);	
		КонецЕсли;
	КонецЦикла;
	
	Приложение = Приложение + "
	|    </СведТов>
	|    <СведМестаПоставки>";
	Для Каждого СтрМестаПоставки Из тзАдресовДоставки Цикл
		Приложение = Приложение + "
		|        <СведМестоПоставки ИдМестаПоставки='"+СтрМестаПоставки.ИдМестаПоставки+"' Место='"+ СтрМестаПоставки.Адрес +"' ИнфДляУчаст='1'>";
		
		Если ЗначениеЗаполнено(Контракт.ГАР) Тогда
			
			МестоПоГАР = СтрМестаПоставки.еисГАР;
			Если Не ЗначениеЗаполнено(МестоПоГАР.GUID) Тогда
				Сообщить("В контракте ["+СокрЛП(Контракт.Наименование)+"] не указан guid места поставки по ГАР");
				Возврат "";
			КонецЕсли;
			
			ДополнительныеСведения = ?(ЗначениеЗаполнено(МестоПоГАР.ДополнительныеСведения), 
			"
			|	МестоДопСвед='"+ МестоПоГАР.ДополнительныеСведения +"'", "");
			Приложение=Приложение+"
			|		<ПоГАР СтрокаГАР='"+ СокрЛП(МестоПоГАР.ПолноеНаименование) + "'" + ДополнительныеСведения +">
	        |			<Страна Код='643' Наим='Российская Федерация'/>
	        |				<АдрГАР ИдНом='" + МестоПоГАР.GUID + "'>
	        |				   <НаимРегион>"+СокрЛП(МестоПоГАР.Регион) +"</НаимРегион>
	        |				</АдрГАР>
	        |			<АдрОКТМО Код='"+СокрЛП(МестоПоГАР.ОКТМО)+"' Наим='" + СокрЛП(МестоПоГАР.ПолноеНаименование) + "'/>
			|		</ПоГАР>";
			
		Иначе
			Приложение=Приложение+"
			|        <ПоКЛАДР>
			|            <КЛАДР Код='"+ КодРегионаПоКЛАДР +"'/>
			|        </ПоКЛАДР>";
		КонецЕсли;
		
		Приложение = Приложение + "
		|        </СведМестоПоставки>";
	КонецЦикла;

	Приложение = Приложение + "
	|    </СведМестаПоставки>";
	
	Для Каждого ЗагруженныйФайл Из ПрикрепленныеФайлы Цикл
		
		ФайлИД = ЗагруженныйФайл.Id;
		ФайлХэш = ЗагруженныйФайл.Hash;
		ФайлИмя = СокрЛП(ЗагруженныйФайл.FileName);
		ФайлРасширение = Прав(ФайлИмя,3);
		ФайлВид = ЗагруженныйФайл.Вид;
		ФайлНаименование = ЗагруженныйФайл.Наименование;
		
		Если ЗначениеЗаполнено(ФайлИД) Тогда
			
			//стрТзФайлыВложений = тзФайлыВложений.Добавить();
			//стрТзФайлыВложений.ИмяФайла = ФайлИмя;
			//стрТзФайлыВложений.Ид = ФайлИД;

			Приложение = Приложение + "
			|    <Вложен КонтентИд='"+ ФайлИД +"' ИмяФайл='"+ФайлИмя+"' ХэшФайл='"+ФайлХэш+"' РасширенФайл='"+ФайлРасширение+"' 
			|		ДатаПрикреплен='"+ ТекущаяДатаВремяСтрока() +"'>
			|        <ВидДок Код='"+ФайлВид+"' Наим='"+ФайлНаименование+"'/>
			|    </Вложен>";		
		КонецЕсли;
		
	КонецЦикла;
	
	Приложение = Приложение + "
	|	<Подписант ЛогинПрод='"+ПараметрыОрганизации["ПодписантЛогин"]+"' ПорядНом='1'/> 
	|</ФайлУПДПрод>";
	
	тхт.ДобавитьСтроку(Приложение);
		
	тхт.Записать( КаталогФайлов+ИмяФайлаПрил);
	
	Если ПараметрыОрганизации["ВыводитьПодробнуюИнформацию"] Тогда
		СообщитьИнфо(ТекущееВремяСтрока()+" Записан файл: "+КаталогФайлов+ИмяФайлаПрил);
	КонецЕсли;
		
	Результат.Вставить("ИмяФайла1", ИмяФайла1);
	Результат.Вставить("ИмяФайлаПрил", ИмяФайлаПрил);
	Результат.Вставить("guid", guid);
	Результат.Вставить("НомерПоставщика", НомерПоставщика);
	Результат.Вставить("НомерКонтрагента", НомерКонтрагента);
	Результат.Вставить("Подписать", Подписать);
	Результат.Вставить("тзФайлыВложений", ПрикрепленныеФайлы);
	Результат.Вставить("ПараметрыОрганизации", ПараметрыОрганизации);
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьФайлы(Компонента, ИмяФайла, ПараметрыОрганизации ) Экспорт

	СообщитьИнфо("Отправка файла: "+ИмяФайла);
	Ответ = Компонента.SendFile( ИмяФайла );
		
	Если ПараметрыОрганизации["ВыводитьПодробнуюИнформацию"] Тогда  				
		СообщитьИнфо("Статус = "+ Ответ.Status + " File ID = "+Ответ.Id);
		СообщитьИнфо("File hash = "+Ответ.Hash);
		СообщитьИнфо("Описание = "+Ответ.Description);
	КонецЕсли;		
	
	Возврат Ответ;
	
КонецФункции

Процедура ЗаписатьОтвет(Докум, ApplicationId, ФайлОтвет, ФайлЗапрос="", АдресВх) Экспорт
		
	Ошибки="";
	ИдДокЕИС = "";
	СтатусЗапроса = НайтиОшибки( АдресВх, Ошибки, ИдДокЕИС );
	СообщитьИнфо(""+ТекущееВремяСтрока()+" Запрос отправлен в ЕИС, статус запроса = "+СтатусЗапроса);
	
	МенеджерЗаписи = РегистрыСведений.еисСтатусыЗапросов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДатаСеанса();
	МенеджерЗаписи.Документ = Докум;
	МенеджерЗаписи.ApplicationID = ApplicationID;
	МенеджерЗаписи.СтатусЗапроса = СтатусЗапроса;
	МенеджерЗаписи.ФайлЗапрос = ФайлЗапрос;
	МенеджерЗаписи.ФайлОтвет = ФайлОтвет;
	МенеджерЗаписи.Ошибка = Ошибки;
	МенеджерЗаписи.Записать();
	
	Если ЗначениеЗаполнено(ИдДокЕИС) 
			И ТипЗнч(Докум) = Тип("ДокументСсылка.ЕИС_ТранспортныйКонтейнер") Тогда
		МенеджерЗаписи = РегистрыСведений.еисСтатусыДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = ТекущаяДатаСеанса();
		МенеджерЗаписи.Документ = Докум;
		МенеджерЗаписи.еисИдДокумента = ИдДокЕИС;
		МенеджерЗаписи.Записать();
    КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТзРеализаций(ПараметрыФункции) Экспорт
	
	// Проверка переопределения функции в Общем модуле ЕИС_Переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьТзРеализаций");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат	ПереопределенныйМодуль.ПолучитьТзРеализаций(ПараметрыФункции);
	КонецЕсли;
	
	МодульИнтеграции = ПолучитьОбщийМодульИнтеграции();
	ПоляЗапросаПоКонфигурации = МодульИнтеграции.ПолучитьПредставлениеПолейДокументаВЗапрос();
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(РеализацияТоваровУслугТовары.&ТекстПоляКоличество&) КАК Количество,
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.&ТаблицаТовары& КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И РеализацияТоваровУслугТовары.Ссылка.Организация = &Организация
	|	И НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления
	|	И РеализацияТоваровУслугТовары.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.&ТекстПоляГрузополучатель& КАК Грузополучатель,
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	втТовары.Количество,
	|	РеализацияТоваровУслуг.&ТекстПоляКонтракт& КАК Контракт,
	|	РеализацияТоваровУслуг.Контрагент,
	|	ЕИС_ТранспортныйКонтейнер.Ссылка КАК ДокументОтгрузки,
	|	еисСтатусыЗапросовСрезПоследних.СтатусЗапроса,
	|	еисСтатусыДокументовСрезПоследних.СтатусДокумента,
	|	РеализацияТоваровУслуг.СуммаДокумента <> ЕСТЬNULL(ЕИС_ТранспортныйКонтейнер.СуммаДокумента, 0) КАК РасхождениеПоСумме
	|ИЗ
	|	&ТекстПоляИсточник& КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТовары КАК втТовары
	|		ПО (втТовары.Ссылка = РеализацияТоваровУслуг.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЕИС_ТранспортныйКонтейнер КАК ЕИС_ТранспортныйКонтейнер
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.еисСтатусыЗапросов.СрезПоследних(&ТекущаяДата, ) КАК еисСтатусыЗапросовСрезПоследних
	|			ПО ЕИС_ТранспортныйКонтейнер.Ссылка = еисСтатусыЗапросовСрезПоследних.Документ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.еисСтатусыДокументов.СрезПоследних(&ТекущаяДата, ) КАК еисСтатусыДокументовСрезПоследних
	|			ПО ЕИС_ТранспортныйКонтейнер.Ссылка = еисСтатусыДокументовСрезПоследних.Документ
	|		ПО РеализацияТоваровУслуг.Ссылка = ЕИС_ТранспортныйКонтейнер.ДокументОснование
	|			И (НЕ ЕИС_ТранспортныйКонтейнер.ПометкаУдаления)
	|ГДЕ
	|	РеализацияТоваровУслуг.Организация = &Организация
	|	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И РеализацияТоваровУслуг.Проведен
	|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|	И НЕ РеализацияТоваровУслуг.&ТекстПоляКонтракт& = ЗНАЧЕНИЕ(Справочник.еисКонтракты.ПустаяСсылка)
	|	И &ОтборПоКОнтрагенту
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияТоваровУслуг.Контрагент";
	Запрос.УстановитьПараметр("Организация", ПараметрыФункции["Организация"]); 
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыФункции["ДатаНачала"]); 
	Запрос.УстановитьПараметр("ОкончаниеПериода", ПараметрыФункции["ДатаОкончания"]);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Если ЗначениеЗаполнено(ПараметрыФункции["ВыбКонтрагент"]) Тогда
		ПодстрокаЗамены = "И РеализацияТоваровУслуг.Контрагент В(&Контрагент)";
		Запрос.УстановитьПараметр("Контрагент", ПараметрыФункции["ВыбКонтрагент"]);
	Иначе
		ПодстрокаЗамены = "";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПоКОнтрагенту", ПодстрокаЗамены);
	УстановитьПоляЗапросаПоКонфигурации(Запрос.Текст);
	
	Возврат Запрос.Выполнить();

КонецФункции

Функция ПолучитьСтатусЗапросаЕИС(Док) Экспорт

	Если Не ЗначениеЗаполнено(Док) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Статус = РегистрыСведений.еисСтатусыЗапросов.ПолучитьПоследнее(ТекущаяДатаСеанса(), Новый Структура("Документ", Док)).СтатусЗапроса;
	
	Возврат Статус;
	
КонецФункции

Функция ПоследнийЗапрос(Док) Экспорт

	Если Не ЗначениеЗаполнено(Док) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = РегистрыСведений.еисСтатусыЗапросов.ПолучитьПоследнее(ТекущаяДатаСеанса(), Новый Структура("Документ", Док));
	
	Возврат Запрос;
	
КонецФункции

Функция СтатусДокументаЕИС(Док) Экспорт

	Если Не ЗначениеЗаполнено(Док) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Статус = РегистрыСведений.еисСтатусыДокументов.ПолучитьПоследнее(ТекущаяДатаСеанса(), Новый Структура("Документ", Док));
	
	Возврат Статус;
	
КонецФункции

Функция СформироватьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати,
												КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//// Получим менеджер печати
	//МенеджерПечати = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераПечати);
	//
	//// Подготовим коллекцию для формируемых печатных форм
	//КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(ИменаМакетов);
	//
	//// Подготовим структуру параметров вывода
	//ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
	//
	//ОбъектыПечати = Новый СписокЗначений;
	//
	//// Сформируем печатные формы
	//МенеджерПечати.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	//
	//// Проверим, все ли макеты были сформированы
	//Для Каждого Стр Из КоллекцияПечатныхФорм Цикл
	//	Если Стр.ТабличныйДокумент = Неопределено Тогда
	//		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//									НСтр("ru = 'В обработчике печати не был сформирован табличный документ для: %1'"),
	//									Стр.ИмяМакета);
	//		ВызватьИсключение(ТекстСообщенияОбОшибке);
	//	КонецЕсли;
	//	
	//	Если НЕ Стр.ТабличныйДокумент.АвтоМасштаб Тогда
	//		Стр.ТабличныйДокумент.АвтоМасштаб = Истина;
	//	КонецЕсли;
	//	
	//	Возврат Стр.ТабличныйДокумент;
	//	
	//КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьПрикрепленныеФайлы(ВыбДок) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	еисКонтрактныеТоварыПрикрепленныеФайлы.Путь КАК Путь,
		|	еисКонтрактныеТоварыПрикрепленныеФайлы.ВидДокумента КАК ВидДокумента
		|ИЗ
		|	Справочник.еисКонтрактныеТовары.ПрикрепленныеФайлы КАК еисКонтрактныеТоварыПрикрепленныеФайлы
		|ГДЕ
		|	еисКонтрактныеТоварыПрикрепленныеФайлы.Ссылка В(&СписокТоваров)
		|
		|СГРУППИРОВАТЬ ПО
		|	еисКонтрактныеТоварыПрикрепленныеФайлы.Путь,
		|	еисКонтрактныеТоварыПрикрепленныеФайлы.ВидДокумента";
	
	Запрос.УстановитьПараметр("СписокТоваров", ВыбДок.Товары.ВыгрузитьКолонку("ЕИС_КонтрактныйТовар"));
		
	РезультатЗапроса = Запрос.Выполнить();
	ВыбДок.ПрикрепленныеФайлы.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СоздатьДокументыОтгрузки(МассивОбъектов) Экспорт
	
	// Проверка переопределения функции в Общем модуле ЕИС_Переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("СоздатьДокументыОтгрузки");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		ПереопределенныйМодуль.СоздатьДокументыОтгрузки(МассивОбъектов);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходнаяНакладная.Ссылка КАК Ссылка,
	|	РасходнаяНакладная.&ТекстПоляКонтракт& КАК Контракт,
	|	МИНИМУМ(еисЭтапы.НачДата) КАК НачДата
	|ПОМЕСТИТЬ втЭтапы
	|ИЗ
	|	&ТекстПоляИсточник& КАК РасходнаяНакладная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.еисЭтапы КАК еисЭтапы
	|		ПО (РасходнаяНакладная.&ТекстПоляКонтракт& = еисЭтапы.Владелец)
	|			И (РасходнаяНакладная.Дата МЕЖДУ еисЭтапы.НачДата И еисЭтапы.КонДата)
	|			И НЕ еисЭтапы.ПометкаУдаления
	|ГДЕ
	|	РасходнаяНакладная.Ссылка В(&СписокДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходнаяНакладная.&ТекстПоляКонтракт&,
	|	РасходнаяНакладная.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка.Номер КАК НомерНаПечать,
	|	РеализацияТоваровУслуг.Ссылка.Дата КАК ДатаНаПечать,
	|	РеализацияТоваровУслуг.Ссылка КАК ДокументОснование,
	|	РеализацияТоваровУслуг.Ссылка.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Ссылка.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Ссылка.АдресДоставки КАК АдресДоставки,
	|	РеализацияТоваровУслуг.Ссылка.&ТекстПоляДоговор& КАК ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Ссылка.&ТекстПоляГрузополучатель& КАК Грузополучатель,
	|	РеализацияТоваровУслуг.Контракт КАК ЕИС_Контракт,
	|	РеализацияТоваровУслуг.Ссылка.&ЦенаВключаетНДС& КАК ЦенаВключаетНДС,
	|	еисЭтапы.Ссылка КАК ЕИС_ТекущийЭтап
	|ИЗ
	|	втЭтапы КАК РеализацияТоваровУслуг
	|		//|		ПО РеализацияТоваровУслугТовары.Номенклатура = еисКонтрактныеТовары.Номенклатура
	|		//|			И РеализацияТоваровУслугТовары.Цена = (ВЫРАЗИТЬ(еисКонтрактныеТовары.Цена КАК ЧИСЛО(15, 2)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.еисЭтапы КАК еисЭтапы
	|		ПО РеализацияТоваровУслуг.Контракт = еисЭтапы.Владелец
	|			И РеализацияТоваровУслуг.НачДата = еисЭтапы.НачДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.&ТекстПоляСерия& КАК Серия,
	|	ЕСТЬNULL(СоответствияТоваровЕИС.КонтрактныйТовар, ЗНАЧЕНИЕ(Справочник.еисКонтрактныеТовары.ПустаяСсылка)) КАК ЕИС_КонтрактныйТовар,
	|	&ТекстПоляЦена& КАК Цена,
	|	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(РеализацияТоваровУслугТовары.&ТекстПоляКоличество&) КАК Количество,
	|	МАКСИМУМ(&ТекстПоляКоэффициент&) КАК Коэффициент,
	|	МАКСИМУМ(ВЫБОР КОГДА ЕСТЬNULL(СоответствияТоваровЕИС.КонтрактныйТовар.КоличПотребЕдВПотребУпак, 0) = 0
	|   	ТОГДА 1
	|       ИНАЧЕ ЕСТЬNULL(СоответствияТоваровЕИС.КонтрактныйТовар.КоличПотребЕдВПотребУпак, 0)
	|	КОНЕЦ) КАК КоличПотребЕдВПотребУпак,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствияТоваровЕИС.КонтрактныйТовар.Цена, 0)) КАК ЦенаПоКонтракту,
	|	РеализацияТоваровУслугТовары.Ссылка КАК Документ,
	|	&ТекстПоляЕдиницаИзмерения& КАК ЕдиницаИзмерения,
	|	"""" КАК Содержание
	|ИЗ
	|	Документ.&ТаблицаТовары& КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кб99_СоответствияТоваровЕИС КАК СоответствияТоваровЕИС
	|		ПО (РеализацияТоваровУслугТовары.Номенклатура = СоответствияТоваровЕИС.Номенклатура
	|				И РеализацияТоваровУслугТовары.Ссылка.&ТекстПоляКонтракт& = СоответствияТоваровЕИС.КонтрактныйТовар.Владелец)
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				т.Ссылка
	|			ИЗ
	|				втЭтапы КАК т)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.&ТекстПоляСерия&,
	|	ЕСТЬNULL(СоответствияТоваровЕИС.КонтрактныйТовар, ЗНАЧЕНИЕ(Справочник.еисКонтрактныеТовары.ПустаяСсылка)),
	|	&ТекстПоляЦена&,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СоответствияТоваровЕИС.КонтрактныйТовар.Цена, 0) * &ТекстПоляКоэффициент& * ВЫБОР КОГДА ЕСТЬNULL(СоответствияТоваровЕИС.КонтрактныйТовар.КоличПотребЕдВПотребУпак, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(СоответствияТоваровЕИС.КонтрактныйТовар.КоличПотребЕдВПотребУпак, 0)
	|	КОНЕЦ КАК ЧИСЛО(25, 11)),
	|	РеализацияТоваровУслугТовары.Ссылка,
	|	&ТекстПоляЕдиницаИзмерения&,
	|	""""
	|
	|	&ТекстЗапросаУслуги&
	|////////////////////////////////////////////////////////////////////////////////
	| &ТекстЗапросаШтрихкодыУпаковок& ";
	
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	ИспользуютсяШтрихкодыУпаковок = Ложь;
	УстановитьПоляЗапросаПоКонфигурации(Запрос.Текст, ИспользуютсяШтрихкодыУпаковок);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоШапке		 = РезультатЗапроса[1].Выбрать();
	тзТовары			 = РезультатЗапроса[2].Выгрузить();
	Если ИспользуютсяШтрихкодыУпаковок Тогда
		тзШтрихкодыУпаковок	 = РезультатЗапроса[3].Выгрузить();
	КонецЕсли;
	
	МодульИнтеграции = ПолучитьОбщийМодульИнтеграции();
    ЗаполнятьКодыМаркировкиОСУ = Константы.кб99_ФормироватьКодыМаркировкиОСУ.Получить();
	
	Пока ВыборкаПоШапке.Следующий() Цикл
		
		ДокОтгрузки = Документы.ЕИС_ТранспортныйКонтейнер.СоздатьДокумент();
		ДокОтгрузки.Дата = ТекущаяДатаСеанса();
		ЗаполнитьЗначенияСвойств(ДокОтгрузки, ВыборкаПоШапке);
		МодульИнтеграции.ЗаполнитьНомерДатуНаПечать(ДокОтгрузки);
		ДокОтгрузки.ДатаПередачи = ДокОтгрузки.ДатаНаПечать;
		
		СтруктураПоиска = Новый Структура("Документ", ВыборкаПоШапке.ДокументОснование);
		ТоварыПоДокументу = тзТовары.Скопировать(СтруктураПоиска);
		Для Каждого Стр Из ТоварыПоДокументу Цикл
			
			//СтрОтгрузки = ДокОтгрузки.Товары.Добавить();
			//СтрОтгрузки.Номенклатура = Стр.Номенклатура;
			
			Если ЗначениеЗаполнено(Стр.Содержание) Тогда
				СтруктураОтбора = Новый Структура("Содержание, Цена", Стр.Содержание, Стр.Цена);
			Иначе
				СтруктураОтбора = Новый Структура("Номенклатура, Цена", Стр.Номенклатура, Стр.Цена);
			КонецЕсли;
			НайденныеСтроки = ТоварыПоДокументу.НайтиСтроки(СтруктураОтбора);
			ДобавленаСтрока = Ложь;
			
			Если НайденныеСтроки.Количество() = 1 Тогда
				СтрОтгрузки = ДокОтгрузки.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрОтгрузки, Стр, , "ЦенаПоКонтракту");
				СтрОтгрузки.ЦенаПоКонтракту = ОКР(Стр.ЦенаПоКонтракту * Стр.Коэффициент * Стр.КоличПотребЕдВПотребУпак, 11, РежимОкругления.Окр15как20);
				СтрОтгрузки.СуммаПоКонтракту = ОКР(СтрОтгрузки.ЦенаПоКонтракту * СтрОтгрузки.Количество, 2, РежимОкругления.Окр15как20);
				ДобавленаСтрока = Истина;
			Иначе
				
				Если ДокОтгрузки.Товары.Количество() Тогда
					ПоследняяСтрока	= ДокОтгрузки.Товары[ДокОтгрузки.Товары.Количество()-1];
					Если ПоследняяСтрока.Номенклатура = Стр.Номенклатура 
							И ПоследняяСтрока.Цена = Стр.Цена Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого СтрПоНоменклатуре Из НайденныеСтроки Цикл
					Если Окр(СтрПоНоменклатуре.ЦенаПоКонтракту, 2) = СтрПоНоменклатуре.Цена 
						    // ТЕСТ - Допустима разница при округлении копейка +-
							ИЛИ (Окр(СтрПоНоменклатуре.ЦенаПоКонтракту, 2) - СтрПоНоменклатуре.Цена = 0.01
									ИЛИ Окр(СтрПоНоменклатуре.ЦенаПоКонтракту, 2) - СтрПоНоменклатуре.Цена = -0.01)
									ИЛИ Не ЗначениеЗаполнено(СтрПоНоменклатуре.ЕИС_КонтрактныйТовар) Тогда
									
						СтрОтгрузки = ДокОтгрузки.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(СтрОтгрузки, СтрПоНоменклатуре, , "ЦенаПоКонтракту");
						СтрОтгрузки.ЦенаПоКонтракту = ОКР(СтрПоНоменклатуре.ЦенаПоКонтракту * СтрПоНоменклатуре.Коэффициент * СтрПоНоменклатуре.КоличПотребЕдВПотребУпак, 11, РежимОкругления.Окр15как20);
						СтрОтгрузки.СуммаПоКонтракту = ОКР(СтрОтгрузки.ЦенаПоКонтракту * СтрОтгрузки.Количество, 2, РежимОкругления.Окр15как20);
						ДобавленаСтрока = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если Не ДобавленаСтрока Тогда
				СтрОтгрузки = ДокОтгрузки.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрОтгрузки, СтрПоНоменклатуре,, "ЕИС_КонтрактныйТовар, ЦенаПоКонтракту");
				СообщитьИнфо("["+ДокОтгрузки.ДокументОснование +
					"]: Не удалось определить строку по контракту для номенклатуры " + СтрОтгрузки.Номенклатура + ", с ценой "+СтрОтгрузки.Цена , ДокОтгрузки.ДокументОснование);
			КонецЕсли;
						
		КонецЦикла;
		
		Если ИспользуютсяШтрихкодыУпаковок Тогда
			ДокОтгрузки.ШтрихкодыУпаковок.Загрузить(тзШтрихкодыУпаковок.Скопировать(СтруктураПоиска));
		КонецЕсли;
		
		ЗаполнитьПрикрепленныеФайлы(ДокОтгрузки);
		
		Если ЗаполнятьКодыМаркировкиОСУ Тогда
			МодульИнтеграции.ЗаполнитьКМОСУ(ДокОтгрузки);	
		КонецЕсли;
		
		ДокОтгрузки.ОтгрузкаЗаМесяц = ПолучитьПризнакОтгрузкаЗаМесяц();
		
		ДокОтгрузки.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьРезультатСтатусДокумента(АдресВх, Ошибки = "") Экспорт

	СтатусДокумента = Неопределено;
	
	ЧтениеXML = Новый ЧтениеXML();
	
	ЧтениеXML.УстановитьСтроку(ПолучитьИзВременногоХранилища(АдресВх));
	objDom = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Body = objDom.Body;
	
	Если ЕстьРеквизитИлиСвойствоОбъекта(Body, "lkpGetObjectInfoResponse") Тогда
		
		Если ЕстьРеквизитИлиСвойствоОбъекта(Body.lkpGetObjectInfoResponse, "objectInfo") Тогда
			objectInfo = Body.lkpGetObjectInfoResponse.objectInfo;
			СтатусДокумента = Перечисления.еисСтатусыДокументов[objectInfo.status];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтатусДокумента;
	
КонецФункции

Функция ПолучитьРезультатСтатусДокумента_COM(ФайлОтвет, Ошибки="") Экспорт
	
	objDom = New COMОбъект("MSXML2.DOMDocument.6.0");
	objDom.load(ФайлОтвет);
	objDom.setProperty("SelectionNamespaces", "
						|xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' 
						|xmlns:docs='http://zakupki.gov.ru/eruz/ws/elacts'");
	
	Попытка
		
		st		   	    = objDom.selectSingleNode("//*[local-name() = 'status']").text;
		СтатусДокумента = Перечисления.еисСтатусыДокументов[st]; 
		Возврат СтатусДокумента;
		
	Исключение
	КонецПопытки;
	
	Попытка	
		
		errorInfos  = objDom.selectNodes("//*[local-name() = 'errorInfo']");
		КолвоОшибок = errorInfos.length;
		
		Для i = 0 По КолвоОшибок Цикл
			
			КодОшибки = errorInfos.item(i).selectSingleNode("//*[local-name() = 'code']").text;
			
			Ошибка = errorInfos.item(i).text;
			Ошибки = Ошибки + ?(i > 0, ", ", "") + Ошибка;
			
			СообщитьИнфо(Ошибка + ?(КодОшибки = "7", ". Возможно он не подписан в личном кабините.", ""));
		КонецЦикла;
		
	Исключение	
	КонецПопытки;
	
КонецФункции

Процедура ЗаписатьСтатусВДокумент(Докум, АдресВх, ПараметрыОрганизации) Экспорт
		
	Ошибки="";
	СтатусДокумента = ПолучитьРезультатСтатусДокумента( АдресВх, Ошибки );
	Если ПараметрыОрганизации.ВыводитьПодробнуюИнформацию Тогда 
		СообщитьИнфо(""+ТекущееВремяСтрока()+" Получен ответ. Документ: " + Докум + ", имеет статус = "+СтатусДокумента);
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.еисСтатусыДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	МенеджерЗаписи.Документ = Докум;
	МенеджерЗаписи.еисИдДокумента = ПараметрыОрганизации.еисИдДокумента;
	МенеджерЗаписи.СтатусДокумента = СтатусДокумента;
	МенеджерЗаписи.Ошибка = Ошибки;
	МенеджерЗаписи.Записать();	
	
КонецПроцедуры

Функция НайтиКонтрагентаПоИНН(ИНН) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН ПОДОБНО &ИНН
		|	И НЕ Контрагенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Рез = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		СообщитьИнфо("Не найден контрагент с ИНН: "+ ИНН);
		Рез = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция ПолучитьApplicationId(Док) Экспорт
	
	ApplicationID = РегистрыСведений.еисСтатусыЗапросов.ПолучитьПоследнее(ТекущаяДатаСеанса(), Новый Структура("Документ", Док)).ApplicationID;
	Возврат ApplicationID;
	
КонецФункции

Функция ПолучитьIdДокумента(Док) Экспорт
	
	еисИдДокумента = РегистрыСведений.еисСтатусыДокументов.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Документ", Док)).еисИдДокумента;
	Возврат еисИдДокумента;
	
КонецФункции

Процедура КонтрактУстановитьСтатусЗакрыт(Контракт) Экспорт
	
	КонтрактОбъект = Контракт.ПолучитьОбъект();
	КонтрактОбъект.Закрыт = Истина;
	КонтрактОбъект.Записать();
	
КонецПроцедуры

// Возвращает копию исходного массива с уникальными значениями.
//
// Параметры:
//  Массив - Массив - массив произвольных значений.
//
// Возвращаемое значение:
//  Массив - массив уникальных элементов.
//
Функция СвернутьМассив(Знач Массив) Экспорт
	
	Результат = Новый Массив;
	УникальныеЗначения = Новый Соответствие;
	
	Для Каждого Значение Из Массив Цикл
		Если УникальныеЗначения[Значение] = Неопределено Тогда
			Результат.Добавить(Значение);
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеРевизитаОбъекта_НаСервере( ВыбОбъект, Реквизит ) Экспорт
	
	Попытка
		Возврат ВыбОбъект[Реквизит];
	Исключение
		СообщитьИнфо("Указан неверный реквизит "+Реквизит+" для объекта "+ВыбОбъект);
		СообщитьИнфо(ОписаниеОшибки());
		Возврат "";
	КонецПопытки
	
КонецФункции

// Функция - Есть реквизит или свойство объекта
//
// Параметры:
//  Объект	 - в котором проверяется наличие реквизита или свойства
//  Свойство - проверяемое свойство по имени
// 
// Возвращаемое значение:
//  Булево - признак наличия реквизита/свойства
//
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

Функция ПодготовитьСписокФайловКОтправке(Док) Экспорт
	
	ПрикрепленныеФайлы = Новый Массив;
	
	Для Каждого Стр Из Док.ПрикрепленныеФайлы Цикл
		
		Если Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ДокументОПриемке Тогда
			ВидДокумента = "1";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ПротоколСогласованияЦен Тогда
			ВидДокумента = "2";
	    ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ТоварнаяНакладная Тогда
			ВидДокумента = "3";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.РегистрационноеУдостоверениеЛекарственногоПрепарата Тогда
			ВидДокумента = "4";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ДокументПодтверждающийСоответствиеТовара Тогда
			ВидДокумента = "5";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ИнструкцияПоМедицинскомуПрименению Тогда
			ВидДокумента = "6";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.Спецификация Тогда
			ВидДокумента = "7";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ТехническиеХарактеристики Тогда
			ВидДокумента = "8";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ИныеДокументы5_3 Тогда
			ВидДокумента = "9";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ПлатежноРасчетныйДокумент Тогда
			ВидДокумента = "10";	
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ПрочиеДокументыПредусмотренныеКонтрактом Тогда
			ВидДокумента = "11";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ИнформацияОСтранеПроисхожденияИлиОПроизводителеТовара Тогда
			ВидДокумента = "12";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ДокументыОплатуКонтрактаИДокументыОНачисленииНеустоек Тогда
			ВидДокумента = "13";
	    ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ДокументОРасхождениях Тогда
			ВидДокумента = "14";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ДокументОРезультатахПроведеннойЭкспертизы Тогда
			ВидДокумента = "15";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ПротоколРазногласий Тогда
			ВидДокумента = "17";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.РешениеПриемочнойКомиссии Тогда
			ВидДокумента = "18";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ДосудебноеСогласие Тогда
			ВидДокумента = "19";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.РешениеСуда Тогда
			ВидДокумента = "20";
		ИначеЕсли Стр.ВидДокумента = Перечисления.еисВидыПрикрепленныхДокументов.ОснованиеДляПлатежногоДокумента Тогда
			ВидДокумента = "21";
		КонецЕсли;
		
		Файл = Новый Структура("Путь, Вид, Наименование", 
			Стр.Путь, 
			ВидДокумента,
			Стр.ВидДокумента);
		ПрикрепленныеФайлы.Добавить(Файл);
	КонецЦикла;
	
	Возврат ПрикрепленныеФайлы;	
	
КонецФункции

Функция ПроверитьДокументыПередОтправкой(Докум) Экспорт
	
	//Возврат Докум.Товары.Количество() = Докум.ДокументОснование.Товары.Количество();
	Возврат Истина;
	
КонецФункции

#Область ПереопределяемыеФункции

Функция ПолучитьМестоПоставкиПоГАР(Докум) Экспорт
	
	// Проверка переопределения функции в Общем модуле ЕИС_Переопределения
	ПереопределенныйМодуль = ГМ_ЕИС.ФункцияПереопределена("ПолучитьМестоПоставкиПоГАР");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьМестоПоставкиПоГАР(Докум);
	КонецЕсли;
	
	МестоПоГАР = Докум.ЕИС_Контракт.ГАР;
	Возврат МестоПоГАР;
	
КонецФункции

Функция ПолучитьПризнакОтгрузкаЗаМесяц() Экспорт

	// Проверка переопределения функции в Общем модуле ЕИС_Переопределения
	ПереопределенныйМодуль = ГМ_ЕИС.ФункцияПереопределена("ПолучитьПризнакОтгрузкаЗаМесяц");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьПризнакОтгрузкаЗаМесяц();
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

Функция НомерДокументаТТН(Докум)
	
	// Проверка переопределения функции в Общем модуле ЕИС_Переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("НомерДокументаТТН");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.НомерДокументаТТН(Докум);
	КонецЕсли;
	
	МодульИнтеграции = ПолучитьОбщийМодульИнтеграции();
	
	Возврат МодульИнтеграции.ПолучитьНомерНаПечать(Докум.ДокументОснование);
	
КонецФункции

Функция ПолучитьДатуПередачиТоваров(Докум) Экспорт
	
	// Проверка переопределения функции в Общем модуле ЕИС_Переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьДатуПередачиТоваров");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьДатуПередачиТоваров(Докум);
	КонецЕсли;
	
	Возврат Докум.ДатаПередачи;
	
КонецФункции

Функция СерверныйМодульМенеджера(Имя)
	
	ОбъектНайден = Ложь;
	
	ЧастиИмени = СтрРазделить82(Имя, ".");
	Если ЧастиИмени.Количество() = 2 Тогда
		
		ИмяВида = ВРег(ЧастиИмени[0]);
		ИмяОбъекта = ЧастиИмени[1];
		
		Если ИмяВида = ВРег("Константы") Тогда
			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбъектНайден Тогда
		ВызватьИсключение("ОШИБКА ПОЛУЧЕНИЯ МОДУЛЯ");
	КонецЕсли;
	
	Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
	
	Возврат Модуль;
	
КонецФункции

Функция ОбщийМодуль(Имя) Экспорт
	
	Попытка	
		Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
			Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
		ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
			Возврат СерверныйМодульМенеджера(Имя);
		Иначе
			Модуль = Неопределено;
		КонецЕсли;
	Исключение
		СообщитьИнфо("Ошибка получения модуля Типовой конфигурации "+Имя+" "+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Модуль;
	
КонецФункции

Функция ФункцияПереопределена( ИмяФункции ) Экспорт
 
 	// Проверка переопределения функции в Общем модуле ЕИС_Переопределения
 	Модуль  = ОбщийМодуль("ЕИС_Переопределения");
	Если Модуль = Неопределено Тогда
		Возврат Неопределено;
 	КонецЕсли;  
	
	Если Модуль.НайтиФункцию( ИмяФункции ) Тогда 
		Возврат Модуль;
	Иначе
		// переопределения нет
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция ЗагрузитьКонтракт(ФайлXML, АдресВх, ПараметрыОрганизации) Экспорт
	
	МодульИнтеграции = ПолучитьОбщийМодульИнтеграции();
	
	ЧтениеXML = Новый ЧтениеXML();
	//ЧтениеXML.ОткрытьФайл(ФайлXML);
	ЧтениеXML.УстановитьСтроку(ПолучитьИзВременногоХранилища(АдресВх));
	objXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Попытка
		КонтрактXDTO = objXDTO.contract;
	Исключение
		ГМ_ЕИС.СообщитьИнфо("Не удалось загрузить XML файл контракта "+ФайлXML);
		Возврат Неопределено;
	КонецПопытки;
	
	order = КонтрактXDTO.foundation.fcsOrder.order;
	Попытка
		Идентификатор	 	 = КонтрактXDTO.id;
	Исключение
		Идентификатор	 	 = "";
	КонецПопытки;
	
	Попытка
		НомерИзвещения		 = order.notificationNumber;
	Исключение
		НомерИзвещения 		 = "";
	КонецПопытки;
	
	Попытка
		НомерКонтракта		 = КонтрактXDTO.number;
	Исключение
		НомерКонтракта = "";
		ГМ_ЕИС.СообщитьИнфо("Не указан номер контракта id="+Идентификатор);
	КонецПопытки;
	
	Попытка
		идЗакупки			 = order.purchaseCode;
	Исключение                                                                                    
		идЗакупки			 = "";
	КонецПопытки;
	
	Попытка
		ДатаКонтракта	 = КонтрактXDTO.placementDate;
	Исключение
		ДатаКонтракта	 = "";
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ДатаКонтракта) Тогда
		Попытка
			ДатаКонтракта	 = КонтрактXDTO.publishDate;	
		Исключение	
		КонецПопытки;
	КонецЕсли;

	ДатаЗаключения		 = ГМ_ЕИС.СтрокаВДату(КонтрактXDTO.signDate);
	Покупатель		 	 = КонтрактXDTO.customer;
		
	Попытка
		ИГК = КонтрактXDTO.defenseContractNumber;
	Исключение
		ИГК = "";
	КонецПопытки;
	
	Попытка
		ЭтоГОЗ = КонтрактXDTO.isGOZ;
	Исключение
		ЭтоГОЗ = Ложь;
	КонецПопытки;
	
	Попытка
		Поставщик = КонтрактXDTO.suppliersInfo.supplierInfo.supplierAccountsDetails.supplierAccountDetails;
	Исключение
		Поставщик = Неопределено;
	КонецПопытки;
	
	// Указано несколько банковских счетов refs# 
	Если ТипЗнч(Поставщик) = Тип("СписокXDTO") Тогда
		Поставщик = Поставщик[0];	
	КонецЕсли;
	
	РеестровыйНомерКонтракта = "";
	РеестровыйНомерКонтракта = КонтрактXDTO.regNum;
		
	ИННПокупателя				 	 = Покупатель.inn;
	КПППокупателя				 	 = Покупатель.kpp;
	Попытка
		КодКонтрагента			     = Покупатель.customerCode;
	Исключение
		КодКонтрагента				 = "";
	КонецПопытки;
	РегНомерКонтрагента				 = Покупатель.regNum;
	ПолноеНаименованиеКонтрагента	 = Покупатель.fullName;
	Попытка 
		СокрНаименованиеКонтрагента	 = Покупатель.shortName;
	Исключение
	    СокрНаименованиеКонтрагента = "";
	КонецПопытки;
	
	Попытка
		ОКПО = Покупатель.OKPO;	
	Исключение
		ОКПО = "";
	КонецПопытки;
	
	Попытка
		СВР = Покупатель.consRegistryNum;	
	Исключение
		СВР = "";
	КонецПопытки;
	
	КодОКТМО	  = "";
	НаимОКТМО	  = "";
	МестоПоставки = "";
	
	deliveryPlaceInfo = КонтрактXDTO.deliveryPlaceInfo;
	
	Попытка
		МестоПоставки = deliveryPlaceInfo.deliveryPlace;
	Исключение
		МестоПоставки = "";
	КонецПопытки;
	
	МестоПоставкиГАР = Неопределено;
	GARGuid = "";
	
	Попытка
		ОКТМОИнфо	  = deliveryPlaceInfo.byOKTMOInfo.OKTMOInfo;
		КодОКТМО	  = ОКТМОИнфо.code;
		НаимОКТМО	  = ОКТМОИнфо.name;
		Если ЕстьРеквизитИлиСвойствоОбъекта(deliveryPlaceInfo.byOKTMOInfo, "GARInfo") Тогда
			byGARInfo = deliveryPlaceInfo.byOKTMOInfo;
			GARInfo = deliveryPlaceInfo.byOKTMOInfo.GARInfo;
			GARGuid = GARInfo.GARGuid;
			GARAddress = GARInfo.GARAddress;
			
			Если ЗначениеЗаполнено(GARGuid) Тогда
				Попытка
					НаименованиеГАР = byGARInfo.deliveryPlace;
				Исключение
					НаименованиеГАР = GARAddress;	
				КонецПопытки;
				
				МестоПоставки = НаименованиеГАР;
				
				МестоПоставкиГАР = Справочники.еисГАР.НайтиПоРеквизиту("GUID", GARGuid);
				Если Не ЗначениеЗаполнено(МестоПоставкиГАР) Тогда
					НовоеМестоПоставки = Справочники.еисГАР.СоздатьЭлемент();
				Иначе
					НовоеМестоПоставки = МестоПоставкиГАР.ПолучитьОбъект();
				КонецЕсли;
				НовоеМестоПоставки.GUID = GARGuid;
				НовоеМестоПоставки.Наименование = НаименованиеГАР;
				НовоеМестоПоставки.ПолноеНаименование = НаименованиеГАР;
				НовоеМестоПоставки.Записать();
				МестоПоставкиГАР = НовоеМестоПоставки.Ссылка;
			КонецЕсли;

		КонецЕсли;
	Исключение КонецПопытки;
	
	Контрагент = ГМ_ЕИС.НайтиКонтрагентаПоИНН(ИННПокупателя);
			
    Если ЕстьРеквизитИлиСвойствоОбъекта(deliveryPlaceInfo, "byGARInfo") Тогда
		byGARInfo = deliveryPlaceInfo.byGARInfo;
		Если ТипЗнч(byGARInfo) <> Тип("СписокXDTO") Тогда
			GARList = Новый Массив;
			GARList.Добавить(byGARInfo);
		Иначе
			GARList = byGARInfo;	
		КонецЕсли;
		
		Для Каждого GAR Из GARList Цикл
			GARInfo = GAR.GARInfo;
			GARGuid = GARInfo.GARGuid;
			GARAddress = GARInfo.GARAddress;
			
			Если ЗначениеЗаполнено(GARGuid) Тогда
				Попытка
					НаименованиеГАР = GAR.deliveryPlace;
				Исключение
					НаименованиеГАР = GARAddress;	
				КонецПопытки;
				
				МестоПоставки = НаименованиеГАР;
				
				МестоПоставкиГАР = Справочники.еисГАР.НайтиПоРеквизиту("GUID", GARGuid);
				Если Не ЗначениеЗаполнено(МестоПоставкиГАР) Тогда
					НовоеМестоПоставки = Справочники.еисГАР.СоздатьЭлемент();
				Иначе
					НовоеМестоПоставки = МестоПоставкиГАР.ПолучитьОбъект();
				КонецЕсли;
				НовоеМестоПоставки.GUID = GARGuid;
				НовоеМестоПоставки.Наименование = НаименованиеГАР;
				НовоеМестоПоставки.ПолноеНаименование = НаименованиеГАР;
				НовоеМестоПоставки.Записать();
				МестоПоставкиГАР = НовоеМестоПоставки.Ссылка;
			КонецЕсли;

		КонецЦикла;
    КонецЕсли;
		
	Если Поставщик <> Неопределено Тогда

		ПоставщикИдентификатор				 = Поставщик.sid;
		Попытка
			ПоставщикВнешнийИдентификатор	 = Поставщик.externalSid;
		Исключение
			ПоставщикВнешнийИдентификатор	 = "";
		КонецПопытки;
		
		ПоставщикGuid					 = Поставщик.guid;
		ПоставщикБанк					 = Поставщик.creditOrgName;
		ПоставщикРасчетныйСчет			 = Поставщик.bankAccountNumber;
		ПоставщикБИК					 = Поставщик.bik;
		Попытка
			ПоставщикКоррСчет			 = Поставщик.corrAccountNumber;
		Исключение
			ПоставщикКоррСчет			 = "";
		КонецПопытки;
		
		Попытка
			ПоставщикНаименование		 = Поставщик.counterpartyName;
		Исключение
			ПоставщикНаименование		 = "";
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(ПоставщикНаименование) Тогда
			Попытка ПоставщикНаименование = Поставщик.counterparty160Name; Исключение КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		ПоставщикИдентификатор			 = "";
		ПоставщикВнешнийИдентификатор	 = "";
		ПоставщикGuid					 = "";
		ПоставщикБанк					 = "";
		ПоставщикРасчетныйСчет			 = "";
		ПоставщикБИК					 = "";
		ПоставщикКоррСчет				 = "";
		ПоставщикНаименование			 = "";
		
	КонецЕсли;
	
	ПредметКонтракта 	 = КонтрактXDTO.contractSubject;
	СуммаКонтракта 	 	 = КонтрактXDTO.priceInfo.price;
	Попытка
		СуммаНалогов	 = КонтрактXDTO.priceInfo.priceVAT;
	Исключение
	КонецПопытки;
	
	Если КонтрактXDTO.priceInfo.priceType = "MP" Тогда
		СпособУказанияЦеныКонтракта = Перечисления.еисСпособыУказанияЦеныКонтракта.МаксимальноеЗначениеЦеныКонтракта;
	Иначе
		СпособУказанияЦеныКонтракта = Перечисления.еисСпособыУказанияЦеныКонтракта.ЦенаКонтракта;
	КонецЕсли;
	
	СпрКонтракт = Справочники.еисКонтракты.НайтиПоРеквизиту("РеестровыйНомерКонтракта", РеестровыйНомерКонтракта);
	Если СпрКонтракт = Справочники.еисКонтракты.ПустаяСсылка() Тогда
	    Контракт = Справочники.еисКонтракты.СоздатьЭлемент();		
	Иначе
	    Контракт = СпрКонтракт.ПолучитьОбъект();
	КонецЕсли;
		
	Контракт.Наименование				 		 = ПредметКонтракта;
	Контракт.ПолноеНаименование			 		 = ПредметКонтракта;
	Контракт.Идентификатор						 = Идентификатор;
	Контракт.НомерКонтракта						 = НомерКонтракта;
	Контракт.НомерИзвещения						 = НомерИзвещения;
	Контракт.РеестровыйНомерКонтракта			 = РеестровыйНомерКонтракта;
	Контракт.ИдЗакупки							 = идЗакупки;
	Контракт.ДатаКонтракта						 = ?(ЗначениеЗаполнено(ДатаКонтракта), ГМ_ЕИС.СтрокаВДату(ДатаКонтракта), "");
	Контракт.ДатаЗаключения					     = ДатаЗаключения;
	Контракт.ИННПокупателя				 		 = ИННПокупателя;
	Контракт.КПППокупателя				 		 = КПППокупателя;
	Контракт.ОКПОПокупателя				 		 = ОКПО;
	Контракт.СВРПокупателя				 		 = СВР;
	Контракт.Контрагент						 	 = Контрагент;	
	Контракт.ПолноеНаименованиеКонтрагента		 = ПолноеНаименованиеКонтрагента;
	Контракт.СокращенноеНаименованиеКонтрагента	 = СокрНаименованиеКонтрагента;
	Контракт.РегНомерКонтрагента				 = РегНомерКонтрагента;
	Контракт.КодКонтрагента					  	 = КодКонтрагента;
	Контракт.Сумма								 = СуммаКонтракта;
	Контракт.СуммаНалогов						 = СуммаНалогов;
	Контракт.СпособУказанияЦены					 = СпособУказанияЦеныКонтракта;
	Контракт.ФайлXML							 = ФайлXML;
	Контракт.ИГК								 = ИГК;
	Контракт.ЭтоГОЗ								 = ЭтоГОЗ;
	
	Контракт.ПоставщикИдентификатор			 = ПоставщикИдентификатор;
	Контракт.ПоставщикВнешнийИдентификатор	 = ПоставщикВнешнийИдентификатор;
	Контракт.ПоставщикGuid					 = ПоставщикGuid;
	Контракт.ПоставщикБанк					 = ПоставщикБанк;
	Контракт.ПоставщикРасчетныйСчет			 = ПоставщикРасчетныйСчет;
	Контракт.ПоставщикБИК					 = ПоставщикБИК;
	Контракт.ПоставщикКоррСчет				 = ПоставщикКоррСчет;
	Контракт.ПоставщикНаименование			 = ПоставщикНаименование;
	
	Если ЗначениеЗаполнено(КодОКТМО) Тогда
		Контракт.ОКТМОКод = КодОКТМО;
		Контракт.ОКТМОНаименование = НаимОКТМО;
	КонецЕсли;
    Контракт.МестоПоставки = МестоПоставки;
	Контракт.Организация = ПараметрыОрганизации.Организация;
	Контракт.ГАР = МестоПоставкиГАР;
	//Если Контракт.ЭтоНовый() Тогда
	Контракт.Записать();
	//КонецЕсли;
	
	products = КонтрактXDTO.products.product;
	Если ТипЗнч(products) <> Тип("СписокXDTO") Тогда 
		productsList = Новый Массив;
		productsList.Добавить(products);
	Иначе
		productsList = products;
	КонецЕсли;
		
	Для Каждого product ИЗ productsList Цикл		
		
		СпрПродукция = ЗагрузитьПродукцию(product, Контракт.Ссылка, КонтрактXDTO);
		
	КонецЦикла;

	stages = КонтрактXDTO.finances.financingPlan.stages;
	Если ТипЗнч(stages) <> Тип("СписокXDTO") Тогда 
		stagesList = Новый Массив;
		stagesList.Добавить(stages);
	Иначе
		stagesList = stages;
	КонецЕсли;

	Для Каждого stage Из stagesList Цикл
     	Контракт.ТекущийЭтап = ГМ_ЕИС.ЗагрузитьЭтап(stage, Контракт.Ссылка);
	КонецЦикла;
	
	Контракт.еисФайлОтвет = ФайлXML;
	Контракт.Записать();

	Если ПараметрыОрганизации["ОтладкаЗапросовXML"] Тогда
		ГМ_ЕИС.СохранитьЗапросВРегистрСведений(ПараметрыОрганизации, "", "Содержимое xml", Контракт.Ссылка, "", "");	
	КонецЕсли;
	
	Если ПараметрыОрганизации["ВыводитьПодробнуюИнформацию"] Тогда
		ГМ_ЕИС.СообщитьИнфо("Записан контракт: "+Контракт.ПолноеНаименование, Контракт.Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерКонтракта) И ЗначениеЗаполнено(Контрагент) Тогда
		Договор = МодульИнтеграции.НайтиДоговорКонтрагента(Контрагент, НомерКонтракта);
		Если ЗначениеЗаполнено(Договор) Тогда
			ДоговорОбъект = Договор.ПолучитьОбъект();
			ДоговорОбъект.еисКонтракт = Контракт.Ссылка;
			ДоговорОбъект.ОбменДанными.Загрузка = Истина;
			ДоговорОбъект.Записать();
			Если ПараметрыОрганизации["ВыводитьПодробнуюИнформацию"] Тогда
				ГМ_ЕИС.СообщитьИнфо("Контракт: " + Контракт.ПолноеНаименование + 
					" Установлено соответсвиес договором: " + ДоговорОбъект.Ссылка, ДоговорОбъект.Ссылка);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;

	Возврат Контракт.Ссылка;
	
КонецФункции

Функция ПолучитьОбщийМодульИнтеграции() Экспорт

	ВерсияКонфигурации = Константы.кб99_ВерсияКонфигурации.Получить();
	Если Не ЗначениеЗаполнено(ВерсияКонфигурации) Тогда
		ВызватьИсключение "Не задано значение глобально параметра ""Версия конфигурации""!";	
	КонецЕсли;
	
	Если ВерсияКонфигурации = 1 Тогда
		ИмяМодуля = "ЕИС_МодульУТ10";
	ИначеЕсли ВерсияКонфигурации = 2 Тогда
		ИмяМодуля = "ЕИС_МодульУТ11";	
	ИначеЕсли ВерсияКонфигурации = 3 Тогда
		ИмяМодуля = "ЕИС_МодульУНФ";
	ИначеЕсли ВерсияКонфигурации = 4 Тогда
		ИмяМодуля = "ЕИС_МодульБП3";
	КонецЕсли;
	
	Возврат ОбщийМодуль(ИмяМодуля);
	
КонецФункции

Процедура УстановитьПоляЗапросаПоКонфигурации(ТекстЗапроса, ИспользуютсяШтрихкодыУпаковок = Ложь) Экспорт

	МодульИнтеграции = ПолучитьОбщийМодульИнтеграции();
	ПоляЗапросаПоКонфигурации = МодульИнтеграции.ПолучитьПредставлениеПолейДокументаВЗапрос();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляГрузополучатель&",		 ПоляЗапросаПоКонфигурации.ТекстПоляГрузополучатель);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляКонтракт&",				 ПоляЗапросаПоКонфигурации.ТекстПоляКонтракт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляДоговор&",				 ПоляЗапросаПоКонфигурации.ТекстПоляДоговор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаТовары&",					 ПоляЗапросаПоКонфигурации.ТекстПоляТаблицаТовары);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЦенаВключаетНДС&",				 ПоляЗапросаПоКонфигурации.ТекстПоляЦенаВключаетНДС);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляЕдиницаИзмерения&",		 ПоляЗапросаПоКонфигурации.ТекстПоляЕдиницаИзмерения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаШтрихкодыУпаковок&",	 ПоляЗапросаПоКонфигурации.ТекстЗапросаШтрихкодыУпаковок);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляКоэффициент&",			 ПоляЗапросаПоКонфигурации.ТекстПоляКоэффициент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляИсточник&",				 ПоляЗапросаПоКонфигурации.ТекстПоляИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляСерия&",				 ПоляЗапросаПоКонфигурации.ТекстПоляСерия);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляЦена&",					 ПоляЗапросаПоКонфигурации.ТекстПоляЦена);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляКоличество&",			 ПоляЗапросаПоКонфигурации.ТекстПоляКоличество);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаУслуги&",			 ПоляЗапросаПоКонфигурации.ТекстЗапросаУслуги);
	
	ИспользуютсяШтрихкодыУпаковок = ЗначениеЗаполнено(ПоляЗапросаПоКонфигурации.ТекстЗапросаШтрихкодыУпаковок);
	
КонецПроцедуры

Функция ПолучитьРасширениеИмениФайла(Знач ИмяФайла) Экспорт
	
	РасширениеФайла = "";
	МассивСтрок = СтрРазделить82(ИмяФайла, ".");
	Если МассивСтрок.Количество() > 1 Тогда
		РасширениеФайла = МассивСтрок[МассивСтрок.Количество() - 1];
	КонецЕсли;
	
	Возврат НРег(РасширениеФайла);
	
КонецФункции

Функция ВыполнитьЗапросГАР_API(Адрес) Экспорт

	Определение = Новый WSОпределения("http://1c.kb99.pro/gar_info/ws/kb99_GARAddressInfo.1cws?wsdl", "", "");
	
	Прокси = Новый WSПрокси(Определение, "kb99_GARAddressInfo", "kb99_GARAddressInfo", "kb99_GARAddressInfoSoap");
	Прокси.Пользователь = "";
	Прокси.Пароль = "";

	ОтветСервера = "";
	
	ОтветСервера = Прокси.GetGARAddressInfo(Адрес);
	
	Возврат jsonПрочитать(ОтветСервера);
	
КонецФункции

Функция jsonПрочитать(Значение) Экспорт 

    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.УстановитьСтроку(Значение);
	
	Попытка 
		Данные  = ПрочитатьJSON(ЧтениеJSON, Истина, );
    	ЧтениеJSON.Закрыть();
	Исключение
		Данные=Значение;
	КонецПопытки;
    
    Возврат Данные;

КонецФункции

Функция ЗаписатьСоответствиеТоваров(Номенклатура, КонтрактныйТовар) Экспорт
		
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		НоваяЗапись = РегистрыСведений.кб99_СоответствияТоваровЕИС.СоздатьМенеджерЗаписи();
		НоваяЗапись.Номенклатура = Номенклатура;
		НоваяЗапись.КонтрактныйТовар = КонтрактныйТовар;
		НоваяЗапись.Записать(Истина);
	Иначе
		Выборка = РегистрыСведений.кб99_СоответствияТоваровЕИС.Выбрать(Новый Структура("КонтрактныйТовар", КонтрактныйТовар));	
		Пока Выборка.Следующий() Цикл
			Запись = Выборка.ПолучитьМенеджерЗаписи();
			Запись.Прочитать();
			Запись.Удалить();
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПорядковыйНомерПеречисления(ЗначПеречисления) Экспорт
	
	Возврат (Перечисления[ЗначПеречисления.Метаданные().Имя].Индекс(ЗначПеречисления) + 1);
	
КонецФункции

#Область ЗагрузкаКорректировок

Процедура ОбработатьФайлПриложения(Содержимое, Корректировка)

	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(Содержимое);
	objDom = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Корректировка.СодержаниеОперации = Корректировка.СодержаниеОперации + ", " + objDom.СодОснКорректир;
	Строки = objDom.СведТов.ТРУ;
	Если Не ТипЗнч(Строки) = Тип("СписокXDTO") Тогда
		Строки = Новый Массив;
		Строки.Добавить(objDom.СведТов.ТРУ);
	КонецЕсли;
	
	Для Каждого Строка Из Строки Цикл
		нСтр = Корректировка.Товары[Строка.НеЛПСвед.НомСтр-1];
		нСтр.ТоварПоКонтракту = Справочники.еисКонтрактныеТовары.НайтиПоРеквизиту("guid", Строка.ИдТРУ,, Корректировка.Контракт);
		нСтр.ЦенаДо = Число(Строка.НеЛПСвед.ЦенаСНДС.ДоИзм);
		нСтр.ЦенаПосле = Число(Строка.НеЛПСвед.ЦенаСНДС.ПослеИзм);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьФайлКорректировки(Содержимое, Корректировка)

	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(Содержимое);
	objDom = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Документ = objDom.Документ;
	СвКСчФ = Документ.СвКСчФ;
	ДатаСтрока = Документ.СодФХЖ3.ПередатДокум.ДатаОсн;
	
	Корректировка.НомерКорректировки = СвКСчФ.НомерКСчФ;
	Корректировка.НомерОснования = Документ.СодФХЖ3.ПередатДокум.НомОсн;
	Корректировка.ДатаОснования = Дата(Прав(ДатаСтрока, 4), Сред(ДатаСтрока, 4, 2), Лев(ДатаСтрока, 2));
	Корректировка.СодержаниеОперации = Документ.СодФХЖ3.СодОпер;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕИС_ТранспортныйКонтейнер.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЕИС_ТранспортныйКонтейнер КАК ЕИС_ТранспортныйКонтейнер
	|ГДЕ
	|	ЕИС_ТранспортныйКонтейнер.НомерНаПечать = &НомерНаПечать
	|	И ЕИС_ТранспортныйКонтейнер.ДатаНаПечать = &ДатаНаПечать
	|	И НЕ ЕИС_ТранспортныйКонтейнер.ПометкаУдаления";
    Запрос.УстановитьПараметр("НомерНаПечать", Корректировка.НомерОснования); 
    Запрос.УстановитьПараметр("ДатаНаПечать", Корректировка.ДатаОснования);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
    	Корректировка.ДокументОснование = Выборка.Ссылка;
	КонецЕсли;
	
	Строки = Документ.ТаблКСчФ.СведТов;
	Если Не ТипЗнч(Строки) = Тип("СписокXDTO") Тогда
		Строки = Новый Массив;
		Строки.Добавить(Документ.ТаблКСчФ.СведТов);
	КонецЕсли;
	
	МодульИнтеграции = ПолучитьОбщийМодульИнтеграции();
	
	Для Каждого Строка Из Строки Цикл
		нСтр = Корректировка.Товары.Вставить(Строка.НомСтр-1);
		нСтр.КоличествоДо = Число(Строка.КолТовДо);
		нСтр.КоличествоПосле = Число(Строка.КолТовПосле);
		нСтр.ЕдиницаИзмеренияДо = МодульИнтеграции.НайтиЕдиницуИзмерения(Строка.ОКЕИ_ТовДо);
		нСтр.ЕдиницаИзмеренияПосле = МодульИнтеграции.НайтиЕдиницуИзмерения(Строка.ОКЕИ_ТовПосле);
		нСтр.СтавкаНДСДо = Строка.НалСтДо;
		нСтр.СтавкаНДСПосле = Строка.НалСтПосле;
		нСтр.СуммаДо = Число(Строка.СтТовУчНал.СтоимДоИзм);
		нСтр.СуммаПосле = Число(Строка.СтТовУчНал.СтоимПослеИзм);
		нСтр.СуммаНДСДо = Число(Строка.СумНалДо.СумНДС);
		нСтр.СуммаНДСПосле = Число(Строка.СумНалПосле.СумНДС);
	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьКорректировкуНаСервере(АдресВх, ПараметрыОрганизации) Экспорт

	вхДанные = ПолучитьИзВременногоХранилища(АдресВх);
	Контракт = Справочники.еисКонтракты.НайтиПоРеквизиту("РеестровыйНомерКонтракта", вхДанные.РеестровыйНомерКонтракта);
	Если Не ЗначениеЗаполнено(Контракт) Тогда
	    СообщитьИнфо("Не найден контракт с реестровым номером: " + вхДанные.РеестровыйНомерКонтракта);
		Возврат;	
	КонецЕсли;
	
	Корректировка = Документы.ЕИС_КорректировочныйДокумент.НайтиПоРеквизиту("id", вхДанные.id);
	Если Не ЗначениеЗаполнено(Корректировка) Тогда
		КорректировкаОб = Документы.ЕИС_КорректировочныйДокумент.СоздатьДокумент();	
	Иначе
		КорректировкаОб = Корректировка.ПолучитьОбъект();
		КорректировкаОб.Товары.Очистить();
	КонецЕсли;
	КорректировкаОб.Контракт = Контракт;
	Если ЗначениеЗаполнено(Контракт) Тогда
		КорректировкаОб.Контрагент = Контракт.Контрагент;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(КорректировкаОб, вхДанные, "id, Статус, Дата, ФайлXML, Организация");
	ОбработатьФайлКорректировки(вхДанные.Корректировка, КорректировкаОб);
	ОбработатьФайлПриложения(вхДанные.Приложение, КорректировкаОб);
	КорректировкаОб.СуммаВзаиморасчетов = КорректировкаОб.Товары.Итог("СуммаПосле");
	КорректировкаОб.Записать();
	
	Если ПараметрыОрганизации.ВыводитьПодробнуюИнформацию Тогда
	    СообщитьИнфо("Загружен документ Корректировка ЕИС: " + КорректировкаОб, КорректировкаОб.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ВерсияИнтеграции() Экспорт
	
	Возврат "1.35.250825";
	
КонецФункции