&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьГруппыДоверенность();
	ЗаполнитьСписокВыбораБанковскихСчетов();
	ПоказатьСведенияОСертификате();

КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьСведенияОСертификате()
	
    CAPICOM_CURRENT_USER_STORE = 2; //2 - Искать сертификат в ветке "Личное" хранилища.
    CAPICOM_MY_STORE = "My"; // Указываем, что ветку "Личное" берем из хранилища текущего пользователя
    CAPICOM_STORE_OPEN_READ_ONLY = 0; // Открыть хранилище только на чтение

    oStore = Новый COMОбъект("CAdESCOM.Store");// .Store(); // Объект описывает хранилище сертификатов
    oStore.Open( CAPICOM_CURRENT_USER_STORE, CAPICOM_MY_STORE, CAPICOM_STORE_OPEN_READ_ONLY ); // Открыть хранилище сертификатов
    // 1 вариант: поиск сертификата по отпечатку
    CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0;
    Certificates = oStore.Certificates.Find(CAPICOM_CERTIFICATE_FIND_SHA1_HASH, Объект.СертификатОтпечаток);
	Если Certificates.Count >0 Тогда 
    	Сертификат = Certificates.Item(1);
	
		Объект.СертификатДействуетДо = Дата(Сертификат.ValidToDate);
		Если Объект.СертификатДействуетДо < ТекущаяДата() Тогда 
			Этаформа.Элементы.СертификатДействуетДо.ЦветТекста = Новый Цвет(255, 0, 0); // красный
			Этаформа.Элементы.СертификатОтпечаток.ЦветФона = Новый Цвет(255, 0, 0); // зеленый
			ЭтаФорма.СертификатПредупреждение = "Сертификат просрочен!";
		Иначе 
			Этаформа.Элементы.СертификатДействуетДо.ЦветФона = Новый Цвет(0, 255, 200); // зеленый
			Этаформа.Элементы.СертификатДействуетДо.ЦветРамки = Новый Цвет(0, 255, 200); // зеленый
			Этаформа.Элементы.СертификатДействуетДо.ЦветТекста = Новый Цвет(0, 0, 0); // Черный
			Этаформа.Элементы.СертификатОтпечаток.ЦветФона = Новый Цвет(0, 255, 200); // зеленый
			ЭтаФорма.СертификатПредупреждение = "";		
		КонецЕсли;
		ЭтаФорма.СертификатНаименование = Сертификат.SubjectName;
	КонецЕсли;
	
	////2 вариант: обходом по коллекции и сравнение с отпечатком            
	////last = "";
	//Certs = oStore.Certificates;
	//
	//сзСертификаты = Новый СписокЗначений;
	//Для каждого Сертификат из Certs Цикл
	//	Если Сертификат.ValidToDate > ТекущаяДата() Тогда
	//		сзСертификаты.Добавить( Сертификат.Thumbprint, Лев(Сертификат.SubjectName, 100) + "... до " + Формат(Сертификат.ValidToDate, "ДФ=dd.MM.yyyy"));
	//	КонецЕсли;
	//КонецЦикла;
	//oStore.Close(); // Закрыть хранилище сертификатов и освободить объект 61
	//Возврат сзСертификаты;
	
КонецПроцедуры

&НаКлиенте
Функция СписокСертификатов()
	
    CAPICOM_CURRENT_USER_STORE = 2; //2 - Искать сертификат в ветке "Личное" хранилища.
    CAPICOM_MY_STORE = "My"; // Указываем, что ветку "Личное" берем из хранилища текущего пользователя
    CAPICOM_STORE_OPEN_READ_ONLY = 0; // Открыть хранилище только на чтение

    oStore = Новый COMОбъект("CAdESCOM.Store");// .Store(); // Объект описывает хранилище сертификатов
    oStore.Open( CAPICOM_CURRENT_USER_STORE, CAPICOM_MY_STORE, CAPICOM_STORE_OPEN_READ_ONLY ); // Открыть хранилище сертификатов
    // 1 вариант: поиск сертификата по отпечатку
    //var CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0;
    //var Certificates = oStore.Certificates.Find(CAPICOM_CERTIFICATE_FIND_SHA1_HASH, sThumbprint);
    //var Result = Certificates.Item(1);
    //2 вариант: обходом по коллекции и сравнение с отпечатком            
    //last = "";
	Certs = oStore.Certificates;
	
	сзСертификаты = Новый СписокЗначений;
	Для каждого Сертификат из Certs Цикл
		Если Сертификат.ValidToDate > ТекущаяДата() Тогда
			сзСертификаты.Добавить( Сертификат, "до " + Формат(Сертификат.ValidToDate, "ДФ=dd.MM.yyyy") +" "+ Лев(Сертификат.SubjectName, 250),
				, БиблиотекаКартинок.кб99_Сертификат);
			//Сертификат.Thumbprint
		КонецЕсли;
	КонецЦикла;
    oStore.Close(); // Закрыть хранилище сертификатов и освободить объект 61
    Возврат сзСертификаты;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьСертификат(Команда)
	
	сзСертификаты = СписокСертификатов();
	ОписаниеОповещения = Новый ОписаниеОповещения("СписокСертификатовВыбор", ЭтаФорма );
	сзСертификаты.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите сертификат");

КонецПроцедуры  

&НаКлиенте
Процедура СписокСертификатовВыбор(ЗначениеВыбора, ДопПараметры) Экспорт

	Если Не ЗначениеВыбора = Неопределено Тогда
		oCert = ЗначениеВыбора.Значение;
		Объект.СертификатОтпечаток = oCert.Thumbprint;
		Объект.СертификатДействуетДо = oCert.ValidToDate;    
		
		ПоказатьСведенияОСертификате();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура КаталогЛоговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Выберите каталог для сохранения логов...";
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = Ложь;
	
	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;		  
	
	Объект.КаталогЛогов = Диалог.Каталог+"\";
    	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СформироватьНаименование();
	Объект.БанковскийСчетОрганизации = Неопределено;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.ПоставщикИНН = ГМ_ЕИС.ПолучитьЗначениеРевизитаОбъекта_НаСервере(Объект.Организация, "ИНН");
	КонецЕсли;
	ЗаполнитьСписокВыбораБанковскихСчетов();

КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименование()
	Объект.Наименование = Строка(Объект.Организация) + ?(ЗначениеЗаполнено(Объект.Пользователь), " - " +Строка(Объект.Пользователь), "");
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	СформироватьНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьГруппыДоверенность()
	
	Элементы.ГруппаДоверенность.Видимость = Объект.ИспользуетсяДоверенность;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяДоверенностьПриИзменении(Элемент)
	
	УстановитьВидимостьГруппыДоверенность();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура БанковскийСчетОрганизацииНачалоВыбораИзСпискаНаСервере(Организация, СписокВыбора)

	МодульИнтеграции = ГМ_ЕИС.ПолучитьОбщийМодульИнтеграции();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка КАК Счет
		|ИЗ
		|	Справочник." + МодульИнтеграции.ПолучитьИмяСправочникаБанковскиеСчета() + " КАК БанковскиеСчета
		|ГДЕ
		|	НЕ БанковскиеСчета.ПометкаУдаления
		|	И БанковскиеСчета.Владелец = &Владелец
		|	И БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации";
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Счет);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораБанковскихСчетов()
	
	СписокСчетов = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		БанковскийСчетОрганизацииНачалоВыбораИзСпискаНаСервере(Объект.Организация, СписокСчетов);
	КонецЕсли;
    Элементы.БанковскийСчетОрганизации.СписокВыбора.ЗагрузитьЗначения(СписокСчетов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиОрганизациюПоИНН(ИНН)
	
	Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", ИНН);
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ГМ_ЕИС.СообщитьИнфо("Не найдена организация с ИНН: " + ИНН);	
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИзФайла(Команда)

	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытия.МножественныйВыбор = Ложь;
	ДиалогОткрытия.Заголовок = "Выберите каталог с файлами выгрузки, сформированными на сайте ЕИС";
	Если ДиалогОткрытия.Выбрать() Тогда
		
		ИмяКаталога = ДиалогОткрытия.Каталог;
		ФайлыСФ = НайтиФайлы(ИмяКаталога, "ON_NSCHFDOPPR*.xml");
		Если ФайлыСФ.Количество() Тогда
			txt = Новый ТекстовыйДокумент;
			txt.Прочитать(ФайлыСФ[0].ПолноеИмя);
			АдресВх = ПоместитьВоВременноеХранилище(txt.ПолучитьТекст());
			ПрочитатьФайлСФ(АдресВх);
			ИспользуетсяДоверенностьПриИзменении(Неопределено);
		Иначе
			ЕИС_Клиент.СообщитьИнфо("В выбранном каталоге отсуствтует файл выгрузки: ON_NSCHFDOPPR*.xml");
		КонецЕсли;
		
		ФайлыДоп = НайтиФайлы(ИмяКаталога, "PRIL_ON_NSCHFDOPPR*.xml");
		Если ФайлыДоп.Количество() Тогда
			txt = Новый ТекстовыйДокумент;
			txt.Прочитать(ФайлыДоп[0].ПолноеИмя);
			АдресВх = ПоместитьВоВременноеХранилище(txt.ПолучитьТекст());
			ПрочитатьФайлДоп(АдресВх);
		Иначе
			ЕИС_Клиент.СообщитьИнфо("В выбранном каталоге отсуствтует файл выгрузки: PRIL_ON_NSCHFDOPPR*.xml");
		КонецЕсли
		
	КонецЕсли;	
	
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаСервере
Процедура ПрочитатьФайлСФ(АдресВх)
	
	ЧтениеXML = Новый ЧтениеXML();
	//ЧтениеXML.ОткрытьФайл(ФайлXML);
	ЧтениеXML.УстановитьСтроку(ПолучитьИзВременногоХранилища(АдресВх));
	objXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ИдФайл = objXDTO.ИдФайл;
	НачальныйСимвол = Найти(ИдФайл, "2ZK-SUP-");
	// Проверить метод СтрРазделить
	Если НачальныйСимвол > 0 Тогда
		
		ИдентификаторОтправителя = Сред(ИдФайл, НачальныйСимвол+8, 11);
		Пока Лев(ИдентификаторОтправителя, 1) = "0" Цикл
			ИдентификаторОтправителя = Сред(ИдентификаторОтправителя, 2);
		КонецЦикла;
		
		Объект.РегНомер = ИдентификаторОтправителя;
		
		Документ = objXDTO.Документ;
		
		Объект.ПоставщикНаименование = Документ.НаимЭконСубСост;
		
		СвПрод = Документ.СвСчФакт.СвПрод;
		ИдСв = СвПрод.ИдСв;
		
		Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(ИдСв, "СвЮЛУч") Тогда
			ИНН = ИдСв.СвЮЛУч.ИННЮЛ;
			КПП = ИдСв.СвЮЛУч.КПП;
		ИначеЕсли ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(ИдСв, "СвИП") Тогда
			ИНН = ИдСв.СвИП.ИННФЛ;
			КПП = "";
		КонецЕсли;
		Объект.ПоставщикИНН = ИНН;
		Если ЗначениеЗаполнено(ИНН) Тогда
			Объект.Организация = НайтиОрганизациюПоИНН(ИНН);		
		КонецЕсли;
		
		Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(СвПрод, "Контакт") Тогда
			Контакты = СвПрод.Контакт;
			Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(Контакты, "Тлф") Тогда
				Объект.ПоставщикТелефон = Контакты.Тлф;
			КонецЕсли;
			Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(Контакты, "ЭлПочта") Тогда
				Объект.ПоставщикАдресЭлПочты = Контакты.ЭлПочта;
			КонецЕсли;
		КонецЕсли;
		
		Адрес = СвПрод.Адрес;
		Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(Адрес, "АдрРФ") Тогда
			
			АдрРФ = Адрес.АдрРФ;
			
			Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(АдрРФ, "Индекс") Тогда
				Объект.АдресПоставщикаИндекс = АдрРФ.Индекс;
			КонецЕсли;
			
			Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(АдрРФ, "КодРегион") Тогда
				Объект.АдресПоставщикаКодРегиона = АдрРФ.КодРегион;
			КонецЕсли;
			
			Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(АдрРФ, "Город") Тогда
				Объект.АдресПоставщикаГород = АдрРФ.Город;
			КонецЕсли;
			
			Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(АдрРФ, "Улица") Тогда
				Объект.АдресПоставщикаУлица = АдрРФ.Улица;
			КонецЕсли;
			
			Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(АдрРФ, "Дом") Тогда
				Объект.АдресПоставщикаДом = АдрРФ.Дом;
			КонецЕсли;
			
			Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(АдрРФ, "Кварт") Тогда
				Объект.АдресПоставщикаКвартира = АдрРФ.Кварт;
			КонецЕсли;
			
			Объект.ВыгружатьАдресПоКЛАДР = Истина;
			
		КонецЕсли;
		
		Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(Адрес, "АдрИнф") Тогда
			
			АдрИнф = Адрес.АдрИнф;
			
			Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(АдрИнф, "АдрТекст") Тогда
				Объект.ЮрАдресПоставщика = АдрИнф.АдрТекст;
			КонецЕсли;
			
		КонецЕсли;
		
		Подписант = Документ.Подписант;
		Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(Подписант, "Должн") Тогда
			Объект.ПодписантДолжность = Подписант.Должн;
		КонецЕсли;
		
		Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(Подписант, "ФИО") Тогда
			ФИО = Подписант.ФИО;
			Объект.ПодписантФамилия = ФИО.Фамилия;
			Объект.ПодписантИмя = ФИО.Имя;
			Объект.ПодписантОтчество = ФИО.Отчество;
		КонецЕсли;
		
		Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(Подписант, "ИП") Тогда
			ФИО = Подписант.ИП.ФИО;
			Объект.ПодписантФамилия = ФИО.Фамилия;
			Объект.ПодписантИмя = ФИО.Имя;
			Объект.ПодписантОтчество = ФИО.Отчество;
		КонецЕсли;
		
		Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(Подписант, "СвДоверЭл") Тогда
			СвДоверЭл = Подписант.СвДоверЭл;
			Объект.ИспользуетсяДоверенность = Истина;
			Объект.НомерДоверенности = СвДоверЭл.НомДовер;
			Объект.ДатаВыдачиДоверенности = Дата(Прав(СвДоверЭл.ДатаВыдДовер, 4) + Сред(СвДоверЭл.ДатаВыдДовер, 4, 2) +
			Лев(СвДоверЭл.ДатаВыдДовер, 2));
			Объект.ВнутреннийНомерДоверенности = СвДоверЭл.ВнНомДовер;
			Объект.ИдентификаторСистемыХраненияДоверенности = СвДоверЭл.ИдСистХран;
			Объект.УРЛСистемыХраненияДоверенности = СвДоверЭл.УРЛСист;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлДоп(АдресВх)
	
	ЧтениеXML = Новый ЧтениеXML();
	//ЧтениеXML.ОткрытьФайл(ФайлXML);
	ЧтениеXML.УстановитьСтроку(ПолучитьИзВременногоХранилища(АдресВх));
	objXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	СведПоставщик = objXDTO.СведПоставщик;
	
	Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(СведПоставщик, "ЮЛ") Тогда
		Объект.КодСВР = СведПоставщик.ЮЛ.КодСВР;
	КонецЕсли;
	
	Если ГМ_ЕИС.ЕстьРеквизитИлиСвойствоОбъекта(objXDTO, "Подписант") Тогда
		Объект.ПодписантЛогин = objXDTO.Подписант.ЛогинПрод;
	КонецЕсли;
	
КонецПроцедуры